/* Date Stamp: 8/23/2014 */

#ifndef MCIO_DDRIO_h
#define MCIO_DDRIO_h

#include "DataTypes.h"

/* Device and Function specifications:                                        */
/* For IVT_HOST:                                                              */
/* MCIO_DDRIO_IVT_EP_DEV 17                                                   */
/* MCIO_DDRIO_IVT_EP_FUN 4                                                    */
/* For IVT_HOST:                                                              */
/* MCIO_DDRIO_IVT_EX_DEV 31                                                   */
/* MCIO_DDRIO_IVT_EX_FUN 4                                                    */
/* For HSX_HOST:                                                              */
/* MCIO_DDRIO_HSX_DEV 20                                                      */
/* MCIO_DDRIO_HSX_FUN 4                                                       */
/* For BDX_HOST:                                                              */
/* MCIO_DDRIO_BDX_DEV 20                                                      */
/* MCIO_DDRIO_BDX_FUN 4                                                       */

/* VID_MCIO_DDRIO_REG supported on:                                           */
/*       IVT_EP (0x2018C000)                                                  */
/*       IVT_EX (0x201FC000)                                                  */
/*       HSX (0x201A4000)                                                     */
/*       BDX (0x201A4000)                                                     */
/* Register default value:              0x8086                                */
#define VID_MCIO_DDRIO_REG 0x0D022000
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Vendor ID Register
 */
typedef union {
  struct {
    UINT16 vendor_identification_number : 16;
    /* vendor_identification_number - Bits[15:0], RO, default = 16'h8086 
       The value is assigned by PCI-SIG to Intel.
     */
  } Bits;
  UINT16 Data;
} VID_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* DID_MCIO_DDRIO_REG supported on:                                           */
/*       IVT_EP (0x2018C002)                                                  */
/*       IVT_EX (0x201FC002)                                                  */
/*       HSX (0x201A4002)                                                     */
/*       BDX (0x201A4002)                                                     */
/* Register default value on IVT_EP:    0x0EBC                                */
/* Register default value on IVT_EX:    0x0EDC                                */
/* Register default value on HSX:       0x2FBC                                */
/* Register default value on BDX:       0x6FBC                                */
#define DID_MCIO_DDRIO_REG 0x0D022002
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Device Identification Number
 */
typedef union {
  struct {
    UINT16 device_identification_number : 16;
    /* device_identification_number - Bits[15:0], RO, default = 16'h6FBC 
       Device ID values vary from function to function. Bits 15:8 are equal to 0x6F for 
       the processor. The following list is a breakdown of the function groups.0x6F00 - 
       0x6F1F : PCI Express and DMI2 ports 
         0x6F20 - 0x6F3F : IO Features (CBDMA, APIC, VT, RAS, Intel TXT)
         0x6F40 - 0x6F5F : Performance Monitors
         0x6F80 - 0x6F9F : Intel Quick Path Interface
         0x6FA0 - 0x6FBF : Home Agent/Memory Controller
         0x6FC0 - 0x6FDF : Power Management
         0x6FE0 - 0x6FFF : Cbo/Ring
     */
  } Bits;
  UINT16 Data;
} DID_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* PCICMD_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x2018C004)                                                  */
/*       IVT_EX (0x201FC004)                                                  */
/*       HSX (0x201A4004)                                                     */
/*       BDX (0x201A4004)                                                     */
/* Register default value:              0x0000                                */
#define PCICMD_MCIO_DDRIO_REG 0x0D022004
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Command Register
 */
typedef union {
  struct {
    UINT16 io_space_enable : 1;
    /* io_space_enable - Bits[0:0], RO, default = 1'b0 
       Hardwired to 0 since these devices don't decode any IO BARs
     */
    UINT16 memory_space_enable : 1;
    /* memory_space_enable - Bits[1:1], RO, default = 1'b0 
       Hardwired to 0 since these devices don't decode any memory BARs
     */
    UINT16 bus_master_enable : 1;
    /* bus_master_enable - Bits[2:2], RO, default = 1'b0 
       Hardwired to 0 since these devices don't generate any transactions
     */
    UINT16 special_cycle_enable : 1;
    /* special_cycle_enable - Bits[3:3], RO, default = 1'b0 
       Not applicable. Hardwired to 0.
     */
    UINT16 memory_write_and_invalidate_enable : 1;
    /* memory_write_and_invalidate_enable - Bits[4:4], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 vga_palette_snoop_enable : 1;
    /* vga_palette_snoop_enable - Bits[5:5], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 parity_error_response : 1;
    /* parity_error_response - Bits[6:6], RO, default = 1'b0 
       This bit has no impact on error reporting from these devices
     */
    UINT16 idsel_stepping_wait_cycle_control : 1;
    /* idsel_stepping_wait_cycle_control - Bits[7:7], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 serr_enable : 1;
    /* serr_enable - Bits[8:8], RO, default = 1'b0 
       This bit has no impact on error reporting from these devices
     */
    UINT16 fast_back_to_back_enable : 1;
    /* fast_back_to_back_enable - Bits[9:9], RO, default = 1'b0 
       Not applicable to PCI Express and is hardwired to 0
     */
    UINT16 intx_disable : 1;
    /* intx_disable - Bits[10:10], RO, default = 1'b0 
       N/A for these devices
     */
    UINT16 rsvd : 5;
    /* rsvd - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PCICMD_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* PCISTS_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x2018C006)                                                  */
/*       IVT_EX (0x201FC006)                                                  */
/*       HSX (0x201A4006)                                                     */
/*       BDX (0x201A4006)                                                     */
/* Register default value on IVT_EP:    0x0010                                */
/* Register default value on IVT_EX:    0x0010                                */
/* Register default value on HSX:       0x0000                                */
/* Register default value on BDX:       0x0000                                */
#define PCISTS_MCIO_DDRIO_REG 0x0D022006


#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * PCI Status Register
 */
typedef union {
  struct {
    UINT16 rsvd : 3;
    /* rsvd - Bits[2:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 intx_status : 1;
    /* intx_status - Bits[3:3], RO, default = 1'b0 
       Reflects the state of the INTA# signal at the input of the enable/disable 
       circuit.  This bit is set by HW to 1 when the INTA# is asserted.  This bit is 
       reset by HW to 0 after the interrupt is cleared (independent of the state of the 
       Interrupt Disable bit in the PCICMD register). 
       Hardwired to 0 on the processor.
     */
    UINT16 capabilities_list : 1;
    /* capabilities_list - Bits[4:4], RO, default = 1'h0 
       This bit indicates the presence of a capabilities list structure. When set to 1, 
       indicates the register at 34h provides an offset into the function. 
     */
    UINT16 x66mhz_capable : 1;
    /* x66mhz_capable - Bits[5:5], RO, default = 1'b0 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 reserved : 1;
    /* reserved - Bits[6:6], RO, default = 1'b0 
       Reserved
     */
    UINT16 fast_back_to_back : 1;
    /* fast_back_to_back - Bits[7:7], RO, default = 1'b0 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 master_data_parity_error : 1;
    /* master_data_parity_error - Bits[8:8], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 devsel_timing : 2;
    /* devsel_timing - Bits[10:9], RO, default = 2'b00 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 signaled_target_abort : 1;
    /* signaled_target_abort - Bits[11:11], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 received_target_abort : 1;
    /* received_target_abort - Bits[12:12], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 received_master_abort : 1;
    /* received_master_abort - Bits[13:13], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 signaled_system_error : 1;
    /* signaled_system_error - Bits[14:14], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 detected_parity_error : 1;
    /* detected_parity_error - Bits[15:15], RO_V, default = 1'b0 
       This bit is set when the device receives a packet on the primary side with an 
       uncorrectable data error (including a packet with poison bit set) or an 
       uncorrectable address/control parity error. The setting of this bit is 
       regardless of the Parity Error Response bit (PERRE) in the PCICMD register. 
     */
  } Bits;
  UINT16 Data;
} PCISTS_MCIO_DDRIO_HSX_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* (HSX_HOST) || defined(BDX_HOST) */




/* RID_MCIO_DDRIO_REG supported on:                                           */
/*       IVT_EP (0x1018C008)                                                  */
/*       IVT_EX (0x101FC008)                                                  */
/*       HSX (0x101A4008)                                                     */
/*       BDX (0x101A4008)                                                     */
/* Register default value:              0x00                                  */
#define RID_MCIO_DDRIO_REG 0x0D021008
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * "PCIe header Revision ID register"
 */
typedef union {
  struct {
    UINT8 revision_id : 8;
    /* revision_id - Bits[7:0], ROS_V, default = 8'b00000000 
       Reflects the Uncore Revision ID after reset.
       Reflects the Compatibility Revision ID after BIOS writes 0x69 to any RID 
       register in the processor uncore. 
       
     */
  } Bits;
  UINT8 Data;
} RID_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* CCR_N0_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x1018C009)                                                  */
/*       IVT_EX (0x101FC009)                                                  */
/*       HSX (0x101A4009)                                                     */
/*       BDX (0x101A4009)                                                     */
/* Register default value:              0x00                                  */
#define CCR_N0_MCIO_DDRIO_REG 0x0D021009


#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * PCIe header ClassCode register
 */
typedef union {
  struct {
    UINT8 register_level_programming_interface : 8;
    /* register_level_programming_interface - Bits[7:0], RO_V, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} CCR_N0_MCIO_DDRIO_HSX_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* (HSX_HOST) || defined(BDX_HOST) */




/* CCR_N1_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x2018C00A)                                                  */
/*       IVT_EX (0x201FC00A)                                                  */
/*       HSX (0x201A400A)                                                     */
/*       BDX (0x201A400A)                                                     */
/* Register default value:              0x0880                                */
#define CCR_N1_MCIO_DDRIO_REG 0x0D02200A
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCIe header ClassCode register
 */
typedef union {
  struct {
    UINT16 sub_class : 8;
    /* sub_class - Bits[7:0], RO_V, default = 8'b10000000 
       The value changes dependent upon the dev/func accessed. A table of the values 
       can be found in the Class-code tab of the msgch spread-sheet  
          Most dev-func will return 8'h80 for this field except for the following 
       dev-func0,func1,... combinations. The following exceptions will return 8'h01. 
                 dev-0x0 through 0x7 (return 0x4, d0f0 return 0x0 under default 
       settings) 
       	  dev-0x8 func-2
       	  dev-0x9 func-2
       	  dev-0xA func-2
       	  dev-0xB func-1,2,5,6
       	  dev-0x10 func-1,6
       	  dev-0x12 func-1,5
       	  
     */
    UINT16 base_class : 8;
    /* base_class - Bits[15:8], RO_V, default = 8'b00001000 
       The value changes dependent upon the dev-func accessed. A table of the values 
       can be found in the Class-code tab of the msgch spread-sheet  
          Most dev-func will return 8'h08 for this field except for the following 
       dev-func0,func1,... combinations. The following exceptions will return 8'h11. 
                 dev-0x0 through 0x7 (return 0x6)
       	  dev-0x8 func-2
       	  dev-0x9 func-2
       	  dev-0xA func-2
       	  dev-0xB func-1,2,5,6
       	  dev-0x10 func-1,6
       	  dev-0x12 func-1,5
       	  
     */
  } Bits;
  UINT16 Data;
} CCR_N1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* CLSR_MCIO_DDRIO_REG supported on:                                          */
/*       IVT_EP (0x1018C00C)                                                  */
/*       IVT_EX (0x101FC00C)                                                  */
/*       HSX (0x101A400C)                                                     */
/*       BDX (0x101A400C)                                                     */
/* Register default value:              0x00                                  */
#define CLSR_MCIO_DDRIO_REG 0x0D02100C
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Cache Line Size Register
 */
typedef union {
  struct {
    UINT8 cacheline_size : 8;
    /* cacheline_size - Bits[7:0], RO, default = 8'b00000000 
       Size of Cacheline
     */
  } Bits;
  UINT8 Data;
} CLSR_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* PLAT_MCIO_DDRIO_REG supported on:                                          */
/*       IVT_EP (0x1018C00D)                                                  */
/*       IVT_EX (0x101FC00D)                                                  */
/*       HSX (0x101A400D)                                                     */
/*       BDX (0x101A400D)                                                     */
/* Register default value:              0x00                                  */
#define PLAT_MCIO_DDRIO_REG 0x0D02100D
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Latency Timer
 */
typedef union {
  struct {
    UINT8 primary_latency_timer : 8;
    /* primary_latency_timer - Bits[7:0], RO, default = 8'b00000000 
       Not applicable to PCI-Express. Hardwired to 00h.
     */
  } Bits;
  UINT8 Data;
} PLAT_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* HDR_MCIO_DDRIO_REG supported on:                                           */
/*       IVT_EP (0x1018C00E)                                                  */
/*       IVT_EX (0x101FC00E)                                                  */
/*       HSX (0x101A400E)                                                     */
/*       BDX (0x101A400E)                                                     */
/* Register default value:              0x80                                  */
#define HDR_MCIO_DDRIO_REG 0x0D02100E
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Header Type
 */
typedef union {
  struct {
    UINT8 configuration_layout : 7;
    /* configuration_layout - Bits[6:0], RO, default = 7'b0 
       Type 0 header
     */
    UINT8 multi_function_device : 1;
    /* multi_function_device - Bits[7:7], RO, default = 1'b1 
       This bit defaults to 1b since all these devices are multi-function
     */
  } Bits;
  UINT8 Data;
} HDR_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* BIST_MCIO_DDRIO_REG supported on:                                          */
/*       IVT_EP (0x1018C00F)                                                  */
/*       IVT_EX (0x101FC00F)                                                  */
/*       HSX (0x101A400F)                                                     */
/*       BDX (0x101A400F)                                                     */
/* Register default value:              0x00                                  */
#define BIST_MCIO_DDRIO_REG 0x0D02100F
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI BIST Register
 */
typedef union {
  struct {
    UINT8 bist_tests : 8;
    /* bist_tests - Bits[7:0], RO, default = 8'b0 
       Not supported. Hardwired to 00h
     */
  } Bits;
  UINT8 Data;
} BIST_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* CAPPTR_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x1018C034)                                                  */
/*       IVT_EX (0x101FC034)                                                  */
/*       HSX (0x101A4034)                                                     */
/*       BDX (0x101A4034)                                                     */
/* Register default value on IVT_EP:    0x40                                  */
/* Register default value on IVT_EX:    0x40                                  */
/* Register default value on HSX:       0x00                                  */
/* Register default value on BDX:       0x00                                  */
#define CAPPTR_MCIO_DDRIO_REG 0x0D021034
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Capability Pointer Register
 */
typedef union {
  struct {
    UINT8 capability_pointer : 8;
    /* capability_pointer - Bits[7:0], RO, default = 8'h0 
       Points to the first capability structure for the device which is the PCIe 
       capability. 
     */
  } Bits;
  UINT8 Data;
} CAPPTR_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* INTL_MCIO_DDRIO_REG supported on:                                          */
/*       IVT_EP (0x1018C03C)                                                  */
/*       IVT_EX (0x101FC03C)                                                  */
/*       HSX (0x101A403C)                                                     */
/*       BDX (0x101A403C)                                                     */
/* Register default value:              0x00                                  */
#define INTL_MCIO_DDRIO_REG 0x0D02103C
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Interrupt Line Register
 */
typedef union {
  struct {
    UINT8 interrupt_line : 8;
    /* interrupt_line - Bits[7:0], RO, default = 8'b0 
       N/A for these devices
     */
  } Bits;
  UINT8 Data;
} INTL_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* INTPIN_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x1018C03D)                                                  */
/*       IVT_EX (0x101FC03D)                                                  */
/*       HSX (0x101A403D)                                                     */
/*       BDX (0x101A403D)                                                     */
/* Register default value:              0x00                                  */
#define INTPIN_MCIO_DDRIO_REG 0x0D02103D
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Interrupt Pin Register
 */
typedef union {
  struct {
    UINT8 interrupt_pin : 8;
    /* interrupt_pin - Bits[7:0], RO, default = 8'b0 
       N/A since these devices do not generate any interrupt on their own
     */
  } Bits;
  UINT8 Data;
} INTPIN_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* MINGNT_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x1018C03E)                                                  */
/*       IVT_EX (0x101FC03E)                                                  */
/*       HSX (0x101A403E)                                                     */
/*       BDX (0x101A403E)                                                     */
/* Register default value:              0x00                                  */
#define MINGNT_MCIO_DDRIO_REG 0x0D02103E
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Min Grant Register
 */
typedef union {
  struct {
    UINT8 mgv : 8;
    /* mgv - Bits[7:0], RO, default = 8'b0 
       The device does not burst as a PCI compliant master.
     */
  } Bits;
  UINT8 Data;
} MINGNT_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* MAXLAT_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x1018C03F)                                                  */
/*       IVT_EX (0x101FC03F)                                                  */
/*       HSX (0x101A403F)                                                     */
/*       BDX (0x101A403F)                                                     */
/* Register default value:              0x00                                  */
#define MAXLAT_MCIO_DDRIO_REG 0x0D02103F
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * PCI Max Latency Register
 */
typedef union {
  struct {
    UINT8 mlv : 8;
    /* mlv - Bits[7:0], RO, default = 8'b00000000 
       The device has no specific requirements for how often it needs to access the PCI 
       bus. 
     */
  } Bits;
  UINT8 Data;
} MAXLAT_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */


/* RXGROUP0N0RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4200)                                                     */
/*       BDX (0x401A4200)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_0_MCIO_DDRIO_REG 0x0D024200

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4204)                                                     */
/*       BDX (0x401A4204)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_0_MCIO_DDRIO_REG 0x0D024204

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4208)                                                     */
/*       BDX (0x401A4208)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_0_MCIO_DDRIO_REG 0x0D024208

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A420C)                                                     */
/*       BDX (0x401A420C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_0_MCIO_DDRIO_REG 0x0D02420C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4210)                                                     */
/*       BDX (0x401A4210)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_0_MCIO_DDRIO_REG 0x0D024210

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4214)                                                     */
/*       BDX (0x401A4214)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_0_MCIO_DDRIO_REG 0x0D024214

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4218)                                                     */
/*       BDX (0x401A4218)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_0_MCIO_DDRIO_REG 0x0D024218

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A421C)                                                     */
/*       BDX (0x401A421C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_0_MCIO_DDRIO_REG 0x0D02421C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4220)                                                     */
/*       BDX (0x401A4220)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_0_MCIO_DDRIO_REG 0x0D024220

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4224)                                                     */
/*       BDX (0x401A4224)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_0_MCIO_DDRIO_REG 0x0D024224

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4228)                                                     */
/*       BDX (0x401A4228)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_0_MCIO_DDRIO_REG 0x0D024228

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A422C)                                                     */
/*       BDX (0x401A422C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_0_MCIO_DDRIO_REG 0x0D02422C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4230)                                                     */
/*       BDX (0x401A4230)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_0_MCIO_DDRIO_REG 0x0D024230

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4234)                                                     */
/*       BDX (0x401A4234)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_0_MCIO_DDRIO_REG 0x0D024234

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4238)                                                     */
/*       BDX (0x401A4238)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_0_MCIO_DDRIO_REG 0x0D024238

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A423C)                                                     */
/*       BDX (0x401A423C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_0_MCIO_DDRIO_REG 0x0D02423C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4240)                                                     */
/*       BDX (0x401A4240)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_0_MCIO_DDRIO_REG 0x0D024240
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4244)                                                     */
/*       BDX (0x401A4244)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_0_MCIO_DDRIO_REG 0x0D024244
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4248)                                                     */
/*       BDX (0x401A4248)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_0_MCIO_DDRIO_REG 0x0D024248
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A424C)                                                     */
/*       BDX (0x401A424C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_0_MCIO_DDRIO_REG 0x0D02424C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4250)                                                     */
/*       BDX (0x401A4250)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_0_MCIO_DDRIO_REG 0x0D024250
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4254)                                                     */
/*       BDX (0x401A4254)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_0_MCIO_DDRIO_REG 0x0D024254
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4258)                                                     */
/*       BDX (0x401A4258)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_0_MCIO_DDRIO_REG 0x0D024258
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A425C)                                                     */
/*       BDX (0x401A425C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_0_MCIO_DDRIO_REG 0x0D02425C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4260)                                                     */
/*       BDX (0x401A4260)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_0_MCIO_DDRIO_REG 0x0D024260

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4264)                                                     */
/*       BDX (0x401A4264)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_0_MCIO_DDRIO_REG 0x0D024264

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4268)                                                     */
/*       BDX (0x401A4268)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_0_MCIO_DDRIO_REG 0x0D024268

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A426C)                                                     */
/*       BDX (0x401A426C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_0_MCIO_DDRIO_REG 0x0D02426C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4270)                                                     */
/*       BDX (0x401A4270)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_0_MCIO_DDRIO_REG 0x0D024270

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4274)                                                     */
/*       BDX (0x401A4274)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_0_MCIO_DDRIO_REG 0x0D024274

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4278)                                                     */
/*       BDX (0x401A4278)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_0_MCIO_DDRIO_REG 0x0D024278

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A427C)                                                     */
/*       BDX (0x401A427C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_0_MCIO_DDRIO_REG 0x0D02427C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4280)                                                     */
/*       BDX (0x401A4280)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_0_MCIO_DDRIO_REG 0x0D024280

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4284)                                                     */
/*       BDX (0x401A4284)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_0_MCIO_DDRIO_REG 0x0D024284

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4288)                                                     */
/*       BDX (0x401A4288)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_0_MCIO_DDRIO_REG 0x0D024288

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A428C)                                                     */
/*       BDX (0x401A428C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_0_MCIO_DDRIO_REG 0x0D02428C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4290)                                                     */
/*       BDX (0x401A4290)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_0_MCIO_DDRIO_REG 0x0D024290

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4294)                                                     */
/*       BDX (0x401A4294)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_0_MCIO_DDRIO_REG 0x0D024294

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4298)                                                     */
/*       BDX (0x401A4298)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_0_MCIO_DDRIO_REG 0x0D024298

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A429C)                                                     */
/*       BDX (0x401A429C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_0_MCIO_DDRIO_REG 0x0D02429C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXXTALKN0_0_MCIO_DDRIO_REG supported on:                                   */
/*       HSX (0x401A42A0)                                                     */
/*       BDX (0x401A42A0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_0_MCIO_DDRIO_REG 0x0D0242A0

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * not used.
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXVREFCTRLN0_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A42A4)                                                     */
/*       BDX (0x401A42A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_0_MCIO_DDRIO_REG 0x0D0242A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_0_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A42A8)                                                     */
/*       BDX (0x401A42A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_0_MCIO_DDRIO_REG 0x0D0242A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A42AC)                                                     */
/*       BDX (0x401A42AC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_0_MCIO_DDRIO_REG 0x0D0242AC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_0_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A42CC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_0_MCIO_DDRIO_REG 0x0D0242CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_0_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A42D0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_0_MCIO_DDRIO_REG 0x0D0242D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* COMPDATA0_0_MCIO_DDRIO_REG supported on:                                   */
/*       HSX (0x401A42D4)                                                     */
/*       BDX (0x401A42D4)                                                     */
/* Register default value on HSX:       0x00000500                            */
/* Register default value on BDX:       0x00001480                            */
#define COMPDATA0_0_MCIO_DDRIO_REG 0x0D0242D4
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data Comp Values
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RW_L, default = 6'b0 
       Data Rcomp DrvUp Comp Value. can be overriden via message channel if periodical 
       retrain is disabled.  
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RW_L, default = 1'b0 
       Spare 
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RW_L, default = 1'b0 
       Data Rcomp DrvDown Comp Value. can be overriden via message channel if 
       periodical retrain is disabled. 
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RW_L, default = 5'b00101 
       VT Comp Values. can be overriden via message channel if periodical retrain is 
       disabled. 
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RW_L, default = 1'b0 
       Data TCO Comp Value. can be overriden via message channel if periodical retrain 
       is disabled. 
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RW_L, default = 1'b0 
       Data Slew Rate Comp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
  } Bits;
  UINT32 Data;
} COMPDATA0_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Comp Values
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RW_L, default = 6'b0 
       Data Rcomp DrvUp Comp Value. can be overriden via message channel if periodical 
       retrain is disabled.  
     */
    UINT32 levelshiftercomp : 3;
    /* levelshiftercomp - Bits[8:6], RW_L, default = 3'b010 
       Data Level-Shifter Comp Value.
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RW_L, default = 1'b0 
       Data Rcomp DrvDown Comp Value. can be overriden via message channel if 
       periodical retrain is disabled. 
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RW_L, default = 5'b00101 
       VT Comp Values. can be overriden via message channel if periodical retrain is 
       disabled. 
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RW_L, default = 1'b0 
       Data TCO Comp Value. can be overriden via message channel if periodical retrain 
       is disabled. 
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RW_L, default = 1'b0 
       Data Slew Rate Comp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
  } Bits;
  UINT32 Data;
} COMPDATA0_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* COMPDATA1_0_MCIO_DDRIO_REG supported on:                                   */
/*       HSX (0x401A42D8)                                                     */
/*       BDX (0x401A42D8)                                                     */
/* Register default value on HSX:       0x00044100                            */
/* Register default value on BDX:       0x00010040                            */
#define COMPDATA1_0_MCIO_DDRIO_REG 0x0D0242D8
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data Comp Values
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RW_L, default = 1'b0 
       Data Rcomp OdtUp Comp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RW_L, default = 1'b0 
       Spare
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[14:9], RW_L, default = 1'b0 
       Data Rcomp Odt-Down Comp Value. can be overriden via message channel if 
       periodical retrain is disabled. 
     */
    UINT32 spare1 : 1;
    /* spare1 - Bits[15:15], RW_L, default = 1'b0 
       Spare
     */
    UINT32 panicdrvdn : 6;
    /* panicdrvdn - Bits[21:16], RW_L, default = 6'b010000 
       Panic DrvDn RComp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
    UINT32 panicdrvup : 6;
    /* panicdrvup - Bits[27:22], RW_L, default = 6'b010000 
       Panic DrvUp RComp Comp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
    UINT32 levelshiftercomp : 3;
    /* levelshiftercomp - Bits[30:28], RW_L, default = 3'b100 
       not used.
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[31:31], RW_L, default = 1'b0 
       Spare
     */
  } Bits;
  UINT32 Data;
} COMPDATA1_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Comp Values
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RW_L, default = 1'b0 
       Data Rcomp OdtUp Comp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RW_L, default = 1'b0 
       Data Rcomp Odt-Down Comp Value. can be overriden via message channel if 
       periodical retrain is disabled. 
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RW_L, default = 10'b0000010000 
       Panic DrvDn RComp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RW_L, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value. can be overriden via message channel if periodical 
       retrain is disabled. 
     */
  } Bits;
  UINT32 Data;
} COMPDATA1_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATAOFFSETTRAIN_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A42DC)                                                     */
/*       BDX (0x401A42DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_0_MCIO_DDRIO_REG 0x0D0242DC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_0_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A42E4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_0_MCIO_DDRIO_REG 0x0D0242E4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A42E8)                                                     */
/*       BDX (0x401A42E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_0_MCIO_DDRIO_REG 0x0D0242E8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW_L, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode  
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW_L, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW_L, default = 1'b0 
       
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
               
     */
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 datavccddqhi : 1;
    /* datavccddqhi - Bits[19:19], RW_L, default = 1'b0 
       not used.
     */
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A42EC)                                                     */
/*       BDX (0x401A42EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_0_MCIO_DDRIO_REG 0x0D0242EC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A42F0)                                                     */
/*       BDX (0x401A42F0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_0_MCIO_DDRIO_REG 0x0D0242F0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A42F4)                                                     */
/*       BDX (0x401A42F4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_0_MCIO_DDRIO_REG 0x0D0242F4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 imodebiasdfxddr3legup : 1;
    /* imodebiasdfxddr3legup - Bits[18:18], RW_L, default = 3'b001 
       imodebias dfx control 
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW_L, default = 3'b001 
       imodebias dfx control 
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW_L, default = 3'b001 
       imodebias dfx control 
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_0_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A42F8)                                                     */
/*       BDX (0x401A42F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_0_MCIO_DDRIO_REG 0x0D0242F8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4300)                                                     */
/*       BDX (0x401A4300)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_0_MCIO_DDRIO_REG 0x0D024300

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4304)                                                     */
/*       BDX (0x401A4304)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_0_MCIO_DDRIO_REG 0x0D024304

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4308)                                                     */
/*       BDX (0x401A4308)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_0_MCIO_DDRIO_REG 0x0D024308

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A430C)                                                     */
/*       BDX (0x401A430C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_0_MCIO_DDRIO_REG 0x0D02430C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4310)                                                     */
/*       BDX (0x401A4310)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_0_MCIO_DDRIO_REG 0x0D024310

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4314)                                                     */
/*       BDX (0x401A4314)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_0_MCIO_DDRIO_REG 0x0D024314

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4318)                                                     */
/*       BDX (0x401A4318)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_0_MCIO_DDRIO_REG 0x0D024318

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A431C)                                                     */
/*       BDX (0x401A431C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_0_MCIO_DDRIO_REG 0x0D02431C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4320)                                                     */
/*       BDX (0x401A4320)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_0_MCIO_DDRIO_REG 0x0D024320

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4324)                                                     */
/*       BDX (0x401A4324)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_0_MCIO_DDRIO_REG 0x0D024324

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4328)                                                     */
/*       BDX (0x401A4328)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_0_MCIO_DDRIO_REG 0x0D024328

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A432C)                                                     */
/*       BDX (0x401A432C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_0_MCIO_DDRIO_REG 0x0D02432C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4330)                                                     */
/*       BDX (0x401A4330)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_0_MCIO_DDRIO_REG 0x0D024330

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4334)                                                     */
/*       BDX (0x401A4334)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_0_MCIO_DDRIO_REG 0x0D024334

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4338)                                                     */
/*       BDX (0x401A4338)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_0_MCIO_DDRIO_REG 0x0D024338

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A433C)                                                     */
/*       BDX (0x401A433C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_0_MCIO_DDRIO_REG 0x0D02433C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4340)                                                     */
/*       BDX (0x401A4340)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_0_MCIO_DDRIO_REG 0x0D024340
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4344)                                                     */
/*       BDX (0x401A4344)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_0_MCIO_DDRIO_REG 0x0D024344
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4348)                                                     */
/*       BDX (0x401A4348)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_0_MCIO_DDRIO_REG 0x0D024348
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A434C)                                                     */
/*       BDX (0x401A434C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_0_MCIO_DDRIO_REG 0x0D02434C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4350)                                                     */
/*       BDX (0x401A4350)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_0_MCIO_DDRIO_REG 0x0D024350
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4354)                                                     */
/*       BDX (0x401A4354)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_0_MCIO_DDRIO_REG 0x0D024354
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4358)                                                     */
/*       BDX (0x401A4358)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_0_MCIO_DDRIO_REG 0x0D024358
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A435C)                                                     */
/*       BDX (0x401A435C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_0_MCIO_DDRIO_REG 0x0D02435C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_0_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_0_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4360)                                                     */
/*       BDX (0x401A4360)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_0_MCIO_DDRIO_REG 0x0D024360

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4364)                                                     */
/*       BDX (0x401A4364)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_0_MCIO_DDRIO_REG 0x0D024364

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4368)                                                     */
/*       BDX (0x401A4368)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_0_MCIO_DDRIO_REG 0x0D024368

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A436C)                                                     */
/*       BDX (0x401A436C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_0_MCIO_DDRIO_REG 0x0D02436C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4370)                                                     */
/*       BDX (0x401A4370)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_0_MCIO_DDRIO_REG 0x0D024370

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4374)                                                     */
/*       BDX (0x401A4374)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_0_MCIO_DDRIO_REG 0x0D024374

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4378)                                                     */
/*       BDX (0x401A4378)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_0_MCIO_DDRIO_REG 0x0D024378

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A437C)                                                     */
/*       BDX (0x401A437C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_0_MCIO_DDRIO_REG 0x0D02437C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4380)                                                     */
/*       BDX (0x401A4380)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_0_MCIO_DDRIO_REG 0x0D024380

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4384)                                                     */
/*       BDX (0x401A4384)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_0_MCIO_DDRIO_REG 0x0D024384

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4388)                                                     */
/*       BDX (0x401A4388)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_0_MCIO_DDRIO_REG 0x0D024388

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A438C)                                                     */
/*       BDX (0x401A438C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_0_MCIO_DDRIO_REG 0x0D02438C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4390)                                                     */
/*       BDX (0x401A4390)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_0_MCIO_DDRIO_REG 0x0D024390

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4394)                                                     */
/*       BDX (0x401A4394)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_0_MCIO_DDRIO_REG 0x0D024394

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4398)                                                     */
/*       BDX (0x401A4398)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_0_MCIO_DDRIO_REG 0x0D024398

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_0_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A439C)                                                     */
/*       BDX (0x401A439C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_0_MCIO_DDRIO_REG 0x0D02439C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXXTALKN1_0_MCIO_DDRIO_REG supported on:                                   */
/*       HSX (0x401A43A0)                                                     */
/*       BDX (0x401A43A0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN1_0_MCIO_DDRIO_REG 0x0D0243A0

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * not used.
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW_L, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXVREFCTRLN1_0_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A43A4)                                                     */
/*       BDX (0x401A43A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_0_MCIO_DDRIO_REG 0x0D0243A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_0_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A43A8)                                                     */
/*       BDX (0x401A43A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_0_MCIO_DDRIO_REG 0x0D0243A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43AC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_0_MCIO_DDRIO_REG 0x0D0243AC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43B0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_0_MCIO_DDRIO_REG 0x0D0243B0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43B4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_0_MCIO_DDRIO_REG 0x0D0243B4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43B8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_0_MCIO_DDRIO_REG 0x0D0243B8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43BC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_0_MCIO_DDRIO_REG 0x0D0243BC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43C0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_0_MCIO_DDRIO_REG 0x0D0243C0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43C4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_0_MCIO_DDRIO_REG 0x0D0243C4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43C8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_0_MCIO_DDRIO_REG 0x0D0243C8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43CC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_0_MCIO_DDRIO_REG 0x0D0243CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_0_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A43D0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_0_MCIO_DDRIO_REG 0x0D0243D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_0_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* RXGROUP0N0RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4400)                                                     */
/*       BDX (0x401A4400)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_1_MCIO_DDRIO_REG 0x0D024400

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4404)                                                     */
/*       BDX (0x401A4404)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_1_MCIO_DDRIO_REG 0x0D024404

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4408)                                                     */
/*       BDX (0x401A4408)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_1_MCIO_DDRIO_REG 0x0D024408

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A440C)                                                     */
/*       BDX (0x401A440C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_1_MCIO_DDRIO_REG 0x0D02440C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4410)                                                     */
/*       BDX (0x401A4410)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_1_MCIO_DDRIO_REG 0x0D024410

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4414)                                                     */
/*       BDX (0x401A4414)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_1_MCIO_DDRIO_REG 0x0D024414

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4418)                                                     */
/*       BDX (0x401A4418)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_1_MCIO_DDRIO_REG 0x0D024418

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A441C)                                                     */
/*       BDX (0x401A441C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_1_MCIO_DDRIO_REG 0x0D02441C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4420)                                                     */
/*       BDX (0x401A4420)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_1_MCIO_DDRIO_REG 0x0D024420

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4424)                                                     */
/*       BDX (0x401A4424)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_1_MCIO_DDRIO_REG 0x0D024424

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4428)                                                     */
/*       BDX (0x401A4428)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_1_MCIO_DDRIO_REG 0x0D024428

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A442C)                                                     */
/*       BDX (0x401A442C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_1_MCIO_DDRIO_REG 0x0D02442C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4430)                                                     */
/*       BDX (0x401A4430)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_1_MCIO_DDRIO_REG 0x0D024430

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4434)                                                     */
/*       BDX (0x401A4434)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_1_MCIO_DDRIO_REG 0x0D024434

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4438)                                                     */
/*       BDX (0x401A4438)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_1_MCIO_DDRIO_REG 0x0D024438

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A443C)                                                     */
/*       BDX (0x401A443C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_1_MCIO_DDRIO_REG 0x0D02443C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4440)                                                     */
/*       BDX (0x401A4440)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_1_MCIO_DDRIO_REG 0x0D024440
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4444)                                                     */
/*       BDX (0x401A4444)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_1_MCIO_DDRIO_REG 0x0D024444
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4448)                                                     */
/*       BDX (0x401A4448)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_1_MCIO_DDRIO_REG 0x0D024448
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A444C)                                                     */
/*       BDX (0x401A444C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_1_MCIO_DDRIO_REG 0x0D02444C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4450)                                                     */
/*       BDX (0x401A4450)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_1_MCIO_DDRIO_REG 0x0D024450
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4454)                                                     */
/*       BDX (0x401A4454)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_1_MCIO_DDRIO_REG 0x0D024454
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4458)                                                     */
/*       BDX (0x401A4458)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_1_MCIO_DDRIO_REG 0x0D024458
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A445C)                                                     */
/*       BDX (0x401A445C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_1_MCIO_DDRIO_REG 0x0D02445C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4460)                                                     */
/*       BDX (0x401A4460)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_1_MCIO_DDRIO_REG 0x0D024460

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4464)                                                     */
/*       BDX (0x401A4464)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_1_MCIO_DDRIO_REG 0x0D024464

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4468)                                                     */
/*       BDX (0x401A4468)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_1_MCIO_DDRIO_REG 0x0D024468

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A446C)                                                     */
/*       BDX (0x401A446C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_1_MCIO_DDRIO_REG 0x0D02446C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4470)                                                     */
/*       BDX (0x401A4470)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_1_MCIO_DDRIO_REG 0x0D024470

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4474)                                                     */
/*       BDX (0x401A4474)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_1_MCIO_DDRIO_REG 0x0D024474

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4478)                                                     */
/*       BDX (0x401A4478)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_1_MCIO_DDRIO_REG 0x0D024478

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A447C)                                                     */
/*       BDX (0x401A447C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_1_MCIO_DDRIO_REG 0x0D02447C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4480)                                                     */
/*       BDX (0x401A4480)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_1_MCIO_DDRIO_REG 0x0D024480

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4484)                                                     */
/*       BDX (0x401A4484)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_1_MCIO_DDRIO_REG 0x0D024484

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4488)                                                     */
/*       BDX (0x401A4488)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_1_MCIO_DDRIO_REG 0x0D024488

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A448C)                                                     */
/*       BDX (0x401A448C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_1_MCIO_DDRIO_REG 0x0D02448C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4490)                                                     */
/*       BDX (0x401A4490)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_1_MCIO_DDRIO_REG 0x0D024490

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4494)                                                     */
/*       BDX (0x401A4494)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_1_MCIO_DDRIO_REG 0x0D024494

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4498)                                                     */
/*       BDX (0x401A4498)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_1_MCIO_DDRIO_REG 0x0D024498

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A449C)                                                     */
/*       BDX (0x401A449C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_1_MCIO_DDRIO_REG 0x0D02449C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN0_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A44A4)                                                     */
/*       BDX (0x401A44A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_1_MCIO_DDRIO_REG 0x0D0244A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_1_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A44A8)                                                     */
/*       BDX (0x401A44A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_1_MCIO_DDRIO_REG 0x0D0244A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A44AC)                                                     */
/*       BDX (0x401A44AC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_1_MCIO_DDRIO_REG 0x0D0244AC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_1_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A44CC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_1_MCIO_DDRIO_REG 0x0D0244CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_1_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A44D0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_1_MCIO_DDRIO_REG 0x0D0244D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */






/* DATAOFFSETTRAIN_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A44DC)                                                     */
/*       BDX (0x401A44DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_1_MCIO_DDRIO_REG 0x0D0244DC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_1_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A44E4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_1_MCIO_DDRIO_REG 0x0D0244E4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A44E8)                                                     */
/*       BDX (0x401A44E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_1_MCIO_DDRIO_REG 0x0D0244E8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 rsvd_4 : 1;
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rsvd_6 : 1;
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 rsvd_8 : 1;
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A44EC)                                                     */
/*       BDX (0x401A44EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_1_MCIO_DDRIO_REG 0x0D0244EC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A44F0)                                                     */
/*       BDX (0x401A44F0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_1_MCIO_DDRIO_REG 0x0D0244F0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A44F4)                                                     */
/*       BDX (0x401A44F4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_1_MCIO_DDRIO_REG 0x0D0244F4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 rsvd_18 : 3;
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_1_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A44F8)                                                     */
/*       BDX (0x401A44F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_1_MCIO_DDRIO_REG 0x0D0244F8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4500)                                                     */
/*       BDX (0x401A4500)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_1_MCIO_DDRIO_REG 0x0D024500

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4504)                                                     */
/*       BDX (0x401A4504)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_1_MCIO_DDRIO_REG 0x0D024504

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4508)                                                     */
/*       BDX (0x401A4508)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_1_MCIO_DDRIO_REG 0x0D024508

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A450C)                                                     */
/*       BDX (0x401A450C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_1_MCIO_DDRIO_REG 0x0D02450C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4510)                                                     */
/*       BDX (0x401A4510)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_1_MCIO_DDRIO_REG 0x0D024510

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4514)                                                     */
/*       BDX (0x401A4514)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_1_MCIO_DDRIO_REG 0x0D024514

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4518)                                                     */
/*       BDX (0x401A4518)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_1_MCIO_DDRIO_REG 0x0D024518

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A451C)                                                     */
/*       BDX (0x401A451C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_1_MCIO_DDRIO_REG 0x0D02451C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4520)                                                     */
/*       BDX (0x401A4520)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_1_MCIO_DDRIO_REG 0x0D024520

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4524)                                                     */
/*       BDX (0x401A4524)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_1_MCIO_DDRIO_REG 0x0D024524

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4528)                                                     */
/*       BDX (0x401A4528)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_1_MCIO_DDRIO_REG 0x0D024528

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A452C)                                                     */
/*       BDX (0x401A452C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_1_MCIO_DDRIO_REG 0x0D02452C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4530)                                                     */
/*       BDX (0x401A4530)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_1_MCIO_DDRIO_REG 0x0D024530

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4534)                                                     */
/*       BDX (0x401A4534)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_1_MCIO_DDRIO_REG 0x0D024534

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4538)                                                     */
/*       BDX (0x401A4538)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_1_MCIO_DDRIO_REG 0x0D024538

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A453C)                                                     */
/*       BDX (0x401A453C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_1_MCIO_DDRIO_REG 0x0D02453C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4540)                                                     */
/*       BDX (0x401A4540)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_1_MCIO_DDRIO_REG 0x0D024540
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4544)                                                     */
/*       BDX (0x401A4544)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_1_MCIO_DDRIO_REG 0x0D024544
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4548)                                                     */
/*       BDX (0x401A4548)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_1_MCIO_DDRIO_REG 0x0D024548
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A454C)                                                     */
/*       BDX (0x401A454C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_1_MCIO_DDRIO_REG 0x0D02454C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4550)                                                     */
/*       BDX (0x401A4550)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_1_MCIO_DDRIO_REG 0x0D024550
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4554)                                                     */
/*       BDX (0x401A4554)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_1_MCIO_DDRIO_REG 0x0D024554
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4558)                                                     */
/*       BDX (0x401A4558)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_1_MCIO_DDRIO_REG 0x0D024558
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A455C)                                                     */
/*       BDX (0x401A455C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_1_MCIO_DDRIO_REG 0x0D02455C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_1_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_1_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4560)                                                     */
/*       BDX (0x401A4560)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_1_MCIO_DDRIO_REG 0x0D024560

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4564)                                                     */
/*       BDX (0x401A4564)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_1_MCIO_DDRIO_REG 0x0D024564

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4568)                                                     */
/*       BDX (0x401A4568)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_1_MCIO_DDRIO_REG 0x0D024568

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A456C)                                                     */
/*       BDX (0x401A456C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_1_MCIO_DDRIO_REG 0x0D02456C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4570)                                                     */
/*       BDX (0x401A4570)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_1_MCIO_DDRIO_REG 0x0D024570

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4574)                                                     */
/*       BDX (0x401A4574)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_1_MCIO_DDRIO_REG 0x0D024574

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4578)                                                     */
/*       BDX (0x401A4578)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_1_MCIO_DDRIO_REG 0x0D024578

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A457C)                                                     */
/*       BDX (0x401A457C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_1_MCIO_DDRIO_REG 0x0D02457C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4580)                                                     */
/*       BDX (0x401A4580)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_1_MCIO_DDRIO_REG 0x0D024580

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4584)                                                     */
/*       BDX (0x401A4584)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_1_MCIO_DDRIO_REG 0x0D024584

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4588)                                                     */
/*       BDX (0x401A4588)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_1_MCIO_DDRIO_REG 0x0D024588

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A458C)                                                     */
/*       BDX (0x401A458C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_1_MCIO_DDRIO_REG 0x0D02458C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4590)                                                     */
/*       BDX (0x401A4590)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_1_MCIO_DDRIO_REG 0x0D024590

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4594)                                                     */
/*       BDX (0x401A4594)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_1_MCIO_DDRIO_REG 0x0D024594

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4598)                                                     */
/*       BDX (0x401A4598)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_1_MCIO_DDRIO_REG 0x0D024598

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_1_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A459C)                                                     */
/*       BDX (0x401A459C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_1_MCIO_DDRIO_REG 0x0D02459C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN1_1_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A45A4)                                                     */
/*       BDX (0x401A45A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_1_MCIO_DDRIO_REG 0x0D0245A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_1_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A45A8)                                                     */
/*       BDX (0x401A45A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_1_MCIO_DDRIO_REG 0x0D0245A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45AC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_1_MCIO_DDRIO_REG 0x0D0245AC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45B0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_1_MCIO_DDRIO_REG 0x0D0245B0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45B4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_1_MCIO_DDRIO_REG 0x0D0245B4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45B8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_1_MCIO_DDRIO_REG 0x0D0245B8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45BC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_1_MCIO_DDRIO_REG 0x0D0245BC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45C0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_1_MCIO_DDRIO_REG 0x0D0245C0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45C4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_1_MCIO_DDRIO_REG 0x0D0245C4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45C8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_1_MCIO_DDRIO_REG 0x0D0245C8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45CC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_1_MCIO_DDRIO_REG 0x0D0245CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_1_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A45D0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_1_MCIO_DDRIO_REG 0x0D0245D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_1_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* RXGROUP0N0RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4600)                                                     */
/*       BDX (0x401A4600)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_2_MCIO_DDRIO_REG 0x0D024600

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4604)                                                     */
/*       BDX (0x401A4604)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_2_MCIO_DDRIO_REG 0x0D024604

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4608)                                                     */
/*       BDX (0x401A4608)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_2_MCIO_DDRIO_REG 0x0D024608

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A460C)                                                     */
/*       BDX (0x401A460C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_2_MCIO_DDRIO_REG 0x0D02460C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4610)                                                     */
/*       BDX (0x401A4610)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_2_MCIO_DDRIO_REG 0x0D024610

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4614)                                                     */
/*       BDX (0x401A4614)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_2_MCIO_DDRIO_REG 0x0D024614

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4618)                                                     */
/*       BDX (0x401A4618)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_2_MCIO_DDRIO_REG 0x0D024618

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A461C)                                                     */
/*       BDX (0x401A461C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_2_MCIO_DDRIO_REG 0x0D02461C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4620)                                                     */
/*       BDX (0x401A4620)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_2_MCIO_DDRIO_REG 0x0D024620

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4624)                                                     */
/*       BDX (0x401A4624)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_2_MCIO_DDRIO_REG 0x0D024624

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4628)                                                     */
/*       BDX (0x401A4628)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_2_MCIO_DDRIO_REG 0x0D024628

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A462C)                                                     */
/*       BDX (0x401A462C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_2_MCIO_DDRIO_REG 0x0D02462C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4630)                                                     */
/*       BDX (0x401A4630)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_2_MCIO_DDRIO_REG 0x0D024630

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4634)                                                     */
/*       BDX (0x401A4634)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_2_MCIO_DDRIO_REG 0x0D024634

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4638)                                                     */
/*       BDX (0x401A4638)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_2_MCIO_DDRIO_REG 0x0D024638

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A463C)                                                     */
/*       BDX (0x401A463C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_2_MCIO_DDRIO_REG 0x0D02463C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4640)                                                     */
/*       BDX (0x401A4640)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_2_MCIO_DDRIO_REG 0x0D024640
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4644)                                                     */
/*       BDX (0x401A4644)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_2_MCIO_DDRIO_REG 0x0D024644
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4648)                                                     */
/*       BDX (0x401A4648)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_2_MCIO_DDRIO_REG 0x0D024648
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A464C)                                                     */
/*       BDX (0x401A464C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_2_MCIO_DDRIO_REG 0x0D02464C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4650)                                                     */
/*       BDX (0x401A4650)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_2_MCIO_DDRIO_REG 0x0D024650
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4654)                                                     */
/*       BDX (0x401A4654)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_2_MCIO_DDRIO_REG 0x0D024654
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4658)                                                     */
/*       BDX (0x401A4658)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_2_MCIO_DDRIO_REG 0x0D024658
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A465C)                                                     */
/*       BDX (0x401A465C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_2_MCIO_DDRIO_REG 0x0D02465C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4660)                                                     */
/*       BDX (0x401A4660)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_2_MCIO_DDRIO_REG 0x0D024660

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4664)                                                     */
/*       BDX (0x401A4664)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_2_MCIO_DDRIO_REG 0x0D024664

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4668)                                                     */
/*       BDX (0x401A4668)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_2_MCIO_DDRIO_REG 0x0D024668

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A466C)                                                     */
/*       BDX (0x401A466C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_2_MCIO_DDRIO_REG 0x0D02466C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4670)                                                     */
/*       BDX (0x401A4670)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_2_MCIO_DDRIO_REG 0x0D024670

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4674)                                                     */
/*       BDX (0x401A4674)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_2_MCIO_DDRIO_REG 0x0D024674

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4678)                                                     */
/*       BDX (0x401A4678)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_2_MCIO_DDRIO_REG 0x0D024678

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A467C)                                                     */
/*       BDX (0x401A467C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_2_MCIO_DDRIO_REG 0x0D02467C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4680)                                                     */
/*       BDX (0x401A4680)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_2_MCIO_DDRIO_REG 0x0D024680

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4684)                                                     */
/*       BDX (0x401A4684)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_2_MCIO_DDRIO_REG 0x0D024684

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4688)                                                     */
/*       BDX (0x401A4688)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_2_MCIO_DDRIO_REG 0x0D024688

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A468C)                                                     */
/*       BDX (0x401A468C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_2_MCIO_DDRIO_REG 0x0D02468C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4690)                                                     */
/*       BDX (0x401A4690)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_2_MCIO_DDRIO_REG 0x0D024690

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4694)                                                     */
/*       BDX (0x401A4694)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_2_MCIO_DDRIO_REG 0x0D024694

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4698)                                                     */
/*       BDX (0x401A4698)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_2_MCIO_DDRIO_REG 0x0D024698

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A469C)                                                     */
/*       BDX (0x401A469C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_2_MCIO_DDRIO_REG 0x0D02469C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN0_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A46A4)                                                     */
/*       BDX (0x401A46A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_2_MCIO_DDRIO_REG 0x0D0246A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_2_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A46A8)                                                     */
/*       BDX (0x401A46A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_2_MCIO_DDRIO_REG 0x0D0246A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A46AC)                                                     */
/*       BDX (0x401A46AC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_2_MCIO_DDRIO_REG 0x0D0246AC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_2_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A46CC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_2_MCIO_DDRIO_REG 0x0D0246CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_2_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A46D0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_2_MCIO_DDRIO_REG 0x0D0246D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */






/* DATAOFFSETTRAIN_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A46DC)                                                     */
/*       BDX (0x401A46DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_2_MCIO_DDRIO_REG 0x0D0246DC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_2_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A46E4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_2_MCIO_DDRIO_REG 0x0D0246E4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A46E8)                                                     */
/*       BDX (0x401A46E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_2_MCIO_DDRIO_REG 0x0D0246E8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 rsvd_4 : 1;
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rsvd_6 : 1;
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 rsvd_8 : 1;
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A46EC)                                                     */
/*       BDX (0x401A46EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_2_MCIO_DDRIO_REG 0x0D0246EC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A46F0)                                                     */
/*       BDX (0x401A46F0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_2_MCIO_DDRIO_REG 0x0D0246F0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A46F4)                                                     */
/*       BDX (0x401A46F4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_2_MCIO_DDRIO_REG 0x0D0246F4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 rsvd_18 : 3;
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_2_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A46F8)                                                     */
/*       BDX (0x401A46F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_2_MCIO_DDRIO_REG 0x0D0246F8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4700)                                                     */
/*       BDX (0x401A4700)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_2_MCIO_DDRIO_REG 0x0D024700

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4704)                                                     */
/*       BDX (0x401A4704)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_2_MCIO_DDRIO_REG 0x0D024704

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4708)                                                     */
/*       BDX (0x401A4708)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_2_MCIO_DDRIO_REG 0x0D024708

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A470C)                                                     */
/*       BDX (0x401A470C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_2_MCIO_DDRIO_REG 0x0D02470C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4710)                                                     */
/*       BDX (0x401A4710)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_2_MCIO_DDRIO_REG 0x0D024710

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4714)                                                     */
/*       BDX (0x401A4714)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_2_MCIO_DDRIO_REG 0x0D024714

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4718)                                                     */
/*       BDX (0x401A4718)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_2_MCIO_DDRIO_REG 0x0D024718

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A471C)                                                     */
/*       BDX (0x401A471C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_2_MCIO_DDRIO_REG 0x0D02471C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4720)                                                     */
/*       BDX (0x401A4720)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_2_MCIO_DDRIO_REG 0x0D024720

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4724)                                                     */
/*       BDX (0x401A4724)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_2_MCIO_DDRIO_REG 0x0D024724

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4728)                                                     */
/*       BDX (0x401A4728)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_2_MCIO_DDRIO_REG 0x0D024728

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A472C)                                                     */
/*       BDX (0x401A472C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_2_MCIO_DDRIO_REG 0x0D02472C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4730)                                                     */
/*       BDX (0x401A4730)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_2_MCIO_DDRIO_REG 0x0D024730

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4734)                                                     */
/*       BDX (0x401A4734)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_2_MCIO_DDRIO_REG 0x0D024734

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4738)                                                     */
/*       BDX (0x401A4738)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_2_MCIO_DDRIO_REG 0x0D024738

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A473C)                                                     */
/*       BDX (0x401A473C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_2_MCIO_DDRIO_REG 0x0D02473C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4740)                                                     */
/*       BDX (0x401A4740)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_2_MCIO_DDRIO_REG 0x0D024740
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4744)                                                     */
/*       BDX (0x401A4744)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_2_MCIO_DDRIO_REG 0x0D024744
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4748)                                                     */
/*       BDX (0x401A4748)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_2_MCIO_DDRIO_REG 0x0D024748
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A474C)                                                     */
/*       BDX (0x401A474C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_2_MCIO_DDRIO_REG 0x0D02474C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4750)                                                     */
/*       BDX (0x401A4750)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_2_MCIO_DDRIO_REG 0x0D024750
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4754)                                                     */
/*       BDX (0x401A4754)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_2_MCIO_DDRIO_REG 0x0D024754
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4758)                                                     */
/*       BDX (0x401A4758)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_2_MCIO_DDRIO_REG 0x0D024758
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A475C)                                                     */
/*       BDX (0x401A475C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_2_MCIO_DDRIO_REG 0x0D02475C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_2_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_2_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4760)                                                     */
/*       BDX (0x401A4760)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_2_MCIO_DDRIO_REG 0x0D024760

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4764)                                                     */
/*       BDX (0x401A4764)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_2_MCIO_DDRIO_REG 0x0D024764

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4768)                                                     */
/*       BDX (0x401A4768)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_2_MCIO_DDRIO_REG 0x0D024768

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A476C)                                                     */
/*       BDX (0x401A476C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_2_MCIO_DDRIO_REG 0x0D02476C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4770)                                                     */
/*       BDX (0x401A4770)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_2_MCIO_DDRIO_REG 0x0D024770

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4774)                                                     */
/*       BDX (0x401A4774)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_2_MCIO_DDRIO_REG 0x0D024774

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4778)                                                     */
/*       BDX (0x401A4778)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_2_MCIO_DDRIO_REG 0x0D024778

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A477C)                                                     */
/*       BDX (0x401A477C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_2_MCIO_DDRIO_REG 0x0D02477C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4780)                                                     */
/*       BDX (0x401A4780)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_2_MCIO_DDRIO_REG 0x0D024780

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4784)                                                     */
/*       BDX (0x401A4784)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_2_MCIO_DDRIO_REG 0x0D024784

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4788)                                                     */
/*       BDX (0x401A4788)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_2_MCIO_DDRIO_REG 0x0D024788

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A478C)                                                     */
/*       BDX (0x401A478C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_2_MCIO_DDRIO_REG 0x0D02478C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4790)                                                     */
/*       BDX (0x401A4790)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_2_MCIO_DDRIO_REG 0x0D024790

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4794)                                                     */
/*       BDX (0x401A4794)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_2_MCIO_DDRIO_REG 0x0D024794

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4798)                                                     */
/*       BDX (0x401A4798)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_2_MCIO_DDRIO_REG 0x0D024798

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_2_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A479C)                                                     */
/*       BDX (0x401A479C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_2_MCIO_DDRIO_REG 0x0D02479C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN1_2_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A47A4)                                                     */
/*       BDX (0x401A47A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_2_MCIO_DDRIO_REG 0x0D0247A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_2_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A47A8)                                                     */
/*       BDX (0x401A47A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_2_MCIO_DDRIO_REG 0x0D0247A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47AC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_2_MCIO_DDRIO_REG 0x0D0247AC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47B0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_2_MCIO_DDRIO_REG 0x0D0247B0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47B4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_2_MCIO_DDRIO_REG 0x0D0247B4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47B8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_2_MCIO_DDRIO_REG 0x0D0247B8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47BC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_2_MCIO_DDRIO_REG 0x0D0247BC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47C0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_2_MCIO_DDRIO_REG 0x0D0247C0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47C4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_2_MCIO_DDRIO_REG 0x0D0247C4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47C8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_2_MCIO_DDRIO_REG 0x0D0247C8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47CC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_2_MCIO_DDRIO_REG 0x0D0247CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_2_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A47D0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_2_MCIO_DDRIO_REG 0x0D0247D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_2_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* RXGROUP0N0RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4800)                                                     */
/*       BDX (0x401A4800)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_3_MCIO_DDRIO_REG 0x0D024800

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4804)                                                     */
/*       BDX (0x401A4804)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_3_MCIO_DDRIO_REG 0x0D024804

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4808)                                                     */
/*       BDX (0x401A4808)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_3_MCIO_DDRIO_REG 0x0D024808

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A480C)                                                     */
/*       BDX (0x401A480C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_3_MCIO_DDRIO_REG 0x0D02480C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4810)                                                     */
/*       BDX (0x401A4810)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_3_MCIO_DDRIO_REG 0x0D024810

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4814)                                                     */
/*       BDX (0x401A4814)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_3_MCIO_DDRIO_REG 0x0D024814

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4818)                                                     */
/*       BDX (0x401A4818)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_3_MCIO_DDRIO_REG 0x0D024818

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A481C)                                                     */
/*       BDX (0x401A481C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_3_MCIO_DDRIO_REG 0x0D02481C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4820)                                                     */
/*       BDX (0x401A4820)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_3_MCIO_DDRIO_REG 0x0D024820

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4824)                                                     */
/*       BDX (0x401A4824)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_3_MCIO_DDRIO_REG 0x0D024824

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4828)                                                     */
/*       BDX (0x401A4828)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_3_MCIO_DDRIO_REG 0x0D024828

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A482C)                                                     */
/*       BDX (0x401A482C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_3_MCIO_DDRIO_REG 0x0D02482C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4830)                                                     */
/*       BDX (0x401A4830)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_3_MCIO_DDRIO_REG 0x0D024830

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4834)                                                     */
/*       BDX (0x401A4834)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_3_MCIO_DDRIO_REG 0x0D024834

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4838)                                                     */
/*       BDX (0x401A4838)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_3_MCIO_DDRIO_REG 0x0D024838

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A483C)                                                     */
/*       BDX (0x401A483C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_3_MCIO_DDRIO_REG 0x0D02483C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4840)                                                     */
/*       BDX (0x401A4840)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_3_MCIO_DDRIO_REG 0x0D024840
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4844)                                                     */
/*       BDX (0x401A4844)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_3_MCIO_DDRIO_REG 0x0D024844
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4848)                                                     */
/*       BDX (0x401A4848)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_3_MCIO_DDRIO_REG 0x0D024848
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A484C)                                                     */
/*       BDX (0x401A484C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_3_MCIO_DDRIO_REG 0x0D02484C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4850)                                                     */
/*       BDX (0x401A4850)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_3_MCIO_DDRIO_REG 0x0D024850
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4854)                                                     */
/*       BDX (0x401A4854)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_3_MCIO_DDRIO_REG 0x0D024854
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4858)                                                     */
/*       BDX (0x401A4858)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_3_MCIO_DDRIO_REG 0x0D024858
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A485C)                                                     */
/*       BDX (0x401A485C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_3_MCIO_DDRIO_REG 0x0D02485C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4860)                                                     */
/*       BDX (0x401A4860)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_3_MCIO_DDRIO_REG 0x0D024860

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4864)                                                     */
/*       BDX (0x401A4864)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_3_MCIO_DDRIO_REG 0x0D024864

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4868)                                                     */
/*       BDX (0x401A4868)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_3_MCIO_DDRIO_REG 0x0D024868

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A486C)                                                     */
/*       BDX (0x401A486C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_3_MCIO_DDRIO_REG 0x0D02486C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4870)                                                     */
/*       BDX (0x401A4870)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_3_MCIO_DDRIO_REG 0x0D024870

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4874)                                                     */
/*       BDX (0x401A4874)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_3_MCIO_DDRIO_REG 0x0D024874

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4878)                                                     */
/*       BDX (0x401A4878)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_3_MCIO_DDRIO_REG 0x0D024878

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A487C)                                                     */
/*       BDX (0x401A487C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_3_MCIO_DDRIO_REG 0x0D02487C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4880)                                                     */
/*       BDX (0x401A4880)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_3_MCIO_DDRIO_REG 0x0D024880

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4884)                                                     */
/*       BDX (0x401A4884)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_3_MCIO_DDRIO_REG 0x0D024884

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4888)                                                     */
/*       BDX (0x401A4888)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_3_MCIO_DDRIO_REG 0x0D024888

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A488C)                                                     */
/*       BDX (0x401A488C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_3_MCIO_DDRIO_REG 0x0D02488C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4890)                                                     */
/*       BDX (0x401A4890)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_3_MCIO_DDRIO_REG 0x0D024890

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4894)                                                     */
/*       BDX (0x401A4894)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_3_MCIO_DDRIO_REG 0x0D024894

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4898)                                                     */
/*       BDX (0x401A4898)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_3_MCIO_DDRIO_REG 0x0D024898

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A489C)                                                     */
/*       BDX (0x401A489C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_3_MCIO_DDRIO_REG 0x0D02489C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN0_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A48A4)                                                     */
/*       BDX (0x401A48A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_3_MCIO_DDRIO_REG 0x0D0248A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_3_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A48A8)                                                     */
/*       BDX (0x401A48A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_3_MCIO_DDRIO_REG 0x0D0248A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A48AC)                                                     */
/*       BDX (0x401A48AC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_3_MCIO_DDRIO_REG 0x0D0248AC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_3_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A48CC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_3_MCIO_DDRIO_REG 0x0D0248CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_3_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A48D0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_3_MCIO_DDRIO_REG 0x0D0248D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */






/* DATAOFFSETTRAIN_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A48DC)                                                     */
/*       BDX (0x401A48DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_3_MCIO_DDRIO_REG 0x0D0248DC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_3_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A48E4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_3_MCIO_DDRIO_REG 0x0D0248E4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A48E8)                                                     */
/*       BDX (0x401A48E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_3_MCIO_DDRIO_REG 0x0D0248E8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 rsvd_4 : 1;
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rsvd_6 : 1;
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 rsvd_8 : 1;
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A48EC)                                                     */
/*       BDX (0x401A48EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_3_MCIO_DDRIO_REG 0x0D0248EC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A48F0)                                                     */
/*       BDX (0x401A48F0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_3_MCIO_DDRIO_REG 0x0D0248F0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A48F4)                                                     */
/*       BDX (0x401A48F4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_3_MCIO_DDRIO_REG 0x0D0248F4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 rsvd_18 : 3;
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_3_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A48F8)                                                     */
/*       BDX (0x401A48F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_3_MCIO_DDRIO_REG 0x0D0248F8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4900)                                                     */
/*       BDX (0x401A4900)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_3_MCIO_DDRIO_REG 0x0D024900

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4904)                                                     */
/*       BDX (0x401A4904)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_3_MCIO_DDRIO_REG 0x0D024904

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4908)                                                     */
/*       BDX (0x401A4908)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_3_MCIO_DDRIO_REG 0x0D024908

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A490C)                                                     */
/*       BDX (0x401A490C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_3_MCIO_DDRIO_REG 0x0D02490C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4910)                                                     */
/*       BDX (0x401A4910)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_3_MCIO_DDRIO_REG 0x0D024910

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4914)                                                     */
/*       BDX (0x401A4914)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_3_MCIO_DDRIO_REG 0x0D024914

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4918)                                                     */
/*       BDX (0x401A4918)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_3_MCIO_DDRIO_REG 0x0D024918

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A491C)                                                     */
/*       BDX (0x401A491C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_3_MCIO_DDRIO_REG 0x0D02491C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4920)                                                     */
/*       BDX (0x401A4920)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_3_MCIO_DDRIO_REG 0x0D024920

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4924)                                                     */
/*       BDX (0x401A4924)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_3_MCIO_DDRIO_REG 0x0D024924

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4928)                                                     */
/*       BDX (0x401A4928)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_3_MCIO_DDRIO_REG 0x0D024928

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A492C)                                                     */
/*       BDX (0x401A492C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_3_MCIO_DDRIO_REG 0x0D02492C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4930)                                                     */
/*       BDX (0x401A4930)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_3_MCIO_DDRIO_REG 0x0D024930

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4934)                                                     */
/*       BDX (0x401A4934)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_3_MCIO_DDRIO_REG 0x0D024934

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4938)                                                     */
/*       BDX (0x401A4938)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_3_MCIO_DDRIO_REG 0x0D024938

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A493C)                                                     */
/*       BDX (0x401A493C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_3_MCIO_DDRIO_REG 0x0D02493C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4940)                                                     */
/*       BDX (0x401A4940)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_3_MCIO_DDRIO_REG 0x0D024940
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4944)                                                     */
/*       BDX (0x401A4944)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_3_MCIO_DDRIO_REG 0x0D024944
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4948)                                                     */
/*       BDX (0x401A4948)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_3_MCIO_DDRIO_REG 0x0D024948
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A494C)                                                     */
/*       BDX (0x401A494C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_3_MCIO_DDRIO_REG 0x0D02494C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4950)                                                     */
/*       BDX (0x401A4950)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_3_MCIO_DDRIO_REG 0x0D024950
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4954)                                                     */
/*       BDX (0x401A4954)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_3_MCIO_DDRIO_REG 0x0D024954
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4958)                                                     */
/*       BDX (0x401A4958)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_3_MCIO_DDRIO_REG 0x0D024958
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A495C)                                                     */
/*       BDX (0x401A495C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_3_MCIO_DDRIO_REG 0x0D02495C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_3_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_3_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4960)                                                     */
/*       BDX (0x401A4960)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_3_MCIO_DDRIO_REG 0x0D024960

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4964)                                                     */
/*       BDX (0x401A4964)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_3_MCIO_DDRIO_REG 0x0D024964

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4968)                                                     */
/*       BDX (0x401A4968)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_3_MCIO_DDRIO_REG 0x0D024968

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A496C)                                                     */
/*       BDX (0x401A496C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_3_MCIO_DDRIO_REG 0x0D02496C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4970)                                                     */
/*       BDX (0x401A4970)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_3_MCIO_DDRIO_REG 0x0D024970

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4974)                                                     */
/*       BDX (0x401A4974)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_3_MCIO_DDRIO_REG 0x0D024974

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4978)                                                     */
/*       BDX (0x401A4978)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_3_MCIO_DDRIO_REG 0x0D024978

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A497C)                                                     */
/*       BDX (0x401A497C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_3_MCIO_DDRIO_REG 0x0D02497C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4980)                                                     */
/*       BDX (0x401A4980)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_3_MCIO_DDRIO_REG 0x0D024980

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4984)                                                     */
/*       BDX (0x401A4984)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_3_MCIO_DDRIO_REG 0x0D024984

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4988)                                                     */
/*       BDX (0x401A4988)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_3_MCIO_DDRIO_REG 0x0D024988

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A498C)                                                     */
/*       BDX (0x401A498C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_3_MCIO_DDRIO_REG 0x0D02498C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4990)                                                     */
/*       BDX (0x401A4990)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_3_MCIO_DDRIO_REG 0x0D024990

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4994)                                                     */
/*       BDX (0x401A4994)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_3_MCIO_DDRIO_REG 0x0D024994

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4998)                                                     */
/*       BDX (0x401A4998)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_3_MCIO_DDRIO_REG 0x0D024998

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_3_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A499C)                                                     */
/*       BDX (0x401A499C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_3_MCIO_DDRIO_REG 0x0D02499C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN1_3_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A49A4)                                                     */
/*       BDX (0x401A49A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_3_MCIO_DDRIO_REG 0x0D0249A4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_3_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A49A8)                                                     */
/*       BDX (0x401A49A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_3_MCIO_DDRIO_REG 0x0D0249A8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49AC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_3_MCIO_DDRIO_REG 0x0D0249AC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49B0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_3_MCIO_DDRIO_REG 0x0D0249B0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49B4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_3_MCIO_DDRIO_REG 0x0D0249B4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49B8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_3_MCIO_DDRIO_REG 0x0D0249B8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49BC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_3_MCIO_DDRIO_REG 0x0D0249BC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49C0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_3_MCIO_DDRIO_REG 0x0D0249C0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49C4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_3_MCIO_DDRIO_REG 0x0D0249C4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49C8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_3_MCIO_DDRIO_REG 0x0D0249C8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49CC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_3_MCIO_DDRIO_REG 0x0D0249CC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_3_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A49D0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_3_MCIO_DDRIO_REG 0x0D0249D0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_3_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* RXGROUP0N0RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A00)                                                     */
/*       BDX (0x401A4A00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_4_MCIO_DDRIO_REG 0x0D024A00

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A04)                                                     */
/*       BDX (0x401A4A04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_4_MCIO_DDRIO_REG 0x0D024A04

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A08)                                                     */
/*       BDX (0x401A4A08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_4_MCIO_DDRIO_REG 0x0D024A08

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A0C)                                                     */
/*       BDX (0x401A4A0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_4_MCIO_DDRIO_REG 0x0D024A0C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A10)                                                     */
/*       BDX (0x401A4A10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_4_MCIO_DDRIO_REG 0x0D024A10

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A14)                                                     */
/*       BDX (0x401A4A14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_4_MCIO_DDRIO_REG 0x0D024A14

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A18)                                                     */
/*       BDX (0x401A4A18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_4_MCIO_DDRIO_REG 0x0D024A18

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A1C)                                                     */
/*       BDX (0x401A4A1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_4_MCIO_DDRIO_REG 0x0D024A1C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A20)                                                     */
/*       BDX (0x401A4A20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_4_MCIO_DDRIO_REG 0x0D024A20

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A24)                                                     */
/*       BDX (0x401A4A24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_4_MCIO_DDRIO_REG 0x0D024A24

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A28)                                                     */
/*       BDX (0x401A4A28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_4_MCIO_DDRIO_REG 0x0D024A28

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A2C)                                                     */
/*       BDX (0x401A4A2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_4_MCIO_DDRIO_REG 0x0D024A2C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A30)                                                     */
/*       BDX (0x401A4A30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_4_MCIO_DDRIO_REG 0x0D024A30

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A34)                                                     */
/*       BDX (0x401A4A34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_4_MCIO_DDRIO_REG 0x0D024A34

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A38)                                                     */
/*       BDX (0x401A4A38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_4_MCIO_DDRIO_REG 0x0D024A38

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A3C)                                                     */
/*       BDX (0x401A4A3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_4_MCIO_DDRIO_REG 0x0D024A3C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A40)                                                     */
/*       BDX (0x401A4A40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_4_MCIO_DDRIO_REG 0x0D024A40
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A44)                                                     */
/*       BDX (0x401A4A44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_4_MCIO_DDRIO_REG 0x0D024A44
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A48)                                                     */
/*       BDX (0x401A4A48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_4_MCIO_DDRIO_REG 0x0D024A48
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A4C)                                                     */
/*       BDX (0x401A4A4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_4_MCIO_DDRIO_REG 0x0D024A4C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A50)                                                     */
/*       BDX (0x401A4A50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_4_MCIO_DDRIO_REG 0x0D024A50
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A54)                                                     */
/*       BDX (0x401A4A54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_4_MCIO_DDRIO_REG 0x0D024A54
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A58)                                                     */
/*       BDX (0x401A4A58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_4_MCIO_DDRIO_REG 0x0D024A58
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A5C)                                                     */
/*       BDX (0x401A4A5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_4_MCIO_DDRIO_REG 0x0D024A5C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A60)                                                     */
/*       BDX (0x401A4A60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_4_MCIO_DDRIO_REG 0x0D024A60

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A64)                                                     */
/*       BDX (0x401A4A64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_4_MCIO_DDRIO_REG 0x0D024A64

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A68)                                                     */
/*       BDX (0x401A4A68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_4_MCIO_DDRIO_REG 0x0D024A68

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A6C)                                                     */
/*       BDX (0x401A4A6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_4_MCIO_DDRIO_REG 0x0D024A6C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A70)                                                     */
/*       BDX (0x401A4A70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_4_MCIO_DDRIO_REG 0x0D024A70

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A74)                                                     */
/*       BDX (0x401A4A74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_4_MCIO_DDRIO_REG 0x0D024A74

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A78)                                                     */
/*       BDX (0x401A4A78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_4_MCIO_DDRIO_REG 0x0D024A78

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A7C)                                                     */
/*       BDX (0x401A4A7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_4_MCIO_DDRIO_REG 0x0D024A7C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A80)                                                     */
/*       BDX (0x401A4A80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_4_MCIO_DDRIO_REG 0x0D024A80

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A84)                                                     */
/*       BDX (0x401A4A84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_4_MCIO_DDRIO_REG 0x0D024A84

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A88)                                                     */
/*       BDX (0x401A4A88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_4_MCIO_DDRIO_REG 0x0D024A88

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A8C)                                                     */
/*       BDX (0x401A4A8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_4_MCIO_DDRIO_REG 0x0D024A8C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A90)                                                     */
/*       BDX (0x401A4A90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_4_MCIO_DDRIO_REG 0x0D024A90

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A94)                                                     */
/*       BDX (0x401A4A94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_4_MCIO_DDRIO_REG 0x0D024A94

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A98)                                                     */
/*       BDX (0x401A4A98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_4_MCIO_DDRIO_REG 0x0D024A98

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4A9C)                                                     */
/*       BDX (0x401A4A9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_4_MCIO_DDRIO_REG 0x0D024A9C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN0_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4AA4)                                                     */
/*       BDX (0x401A4AA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_4_MCIO_DDRIO_REG 0x0D024AA4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_4_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A4AA8)                                                     */
/*       BDX (0x401A4AA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_4_MCIO_DDRIO_REG 0x0D024AA8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4AAC)                                                     */
/*       BDX (0x401A4AAC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_4_MCIO_DDRIO_REG 0x0D024AAC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_4_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A4ACC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_4_MCIO_DDRIO_REG 0x0D024ACC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_4_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A4AD0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_4_MCIO_DDRIO_REG 0x0D024AD0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */






/* DATAOFFSETTRAIN_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4ADC)                                                     */
/*       BDX (0x401A4ADC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_4_MCIO_DDRIO_REG 0x0D024ADC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_4_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A4AE4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_4_MCIO_DDRIO_REG 0x0D024AE4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4AE8)                                                     */
/*       BDX (0x401A4AE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_4_MCIO_DDRIO_REG 0x0D024AE8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 rsvd_4 : 1;
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rsvd_6 : 1;
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 rsvd_8 : 1;
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4AEC)                                                     */
/*       BDX (0x401A4AEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_4_MCIO_DDRIO_REG 0x0D024AEC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4AF0)                                                     */
/*       BDX (0x401A4AF0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_4_MCIO_DDRIO_REG 0x0D024AF0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4AF4)                                                     */
/*       BDX (0x401A4AF4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_4_MCIO_DDRIO_REG 0x0D024AF4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 rsvd_18 : 3;
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_4_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A4AF8)                                                     */
/*       BDX (0x401A4AF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_4_MCIO_DDRIO_REG 0x0D024AF8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B00)                                                     */
/*       BDX (0x401A4B00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_4_MCIO_DDRIO_REG 0x0D024B00

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B04)                                                     */
/*       BDX (0x401A4B04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_4_MCIO_DDRIO_REG 0x0D024B04

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B08)                                                     */
/*       BDX (0x401A4B08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_4_MCIO_DDRIO_REG 0x0D024B08

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B0C)                                                     */
/*       BDX (0x401A4B0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_4_MCIO_DDRIO_REG 0x0D024B0C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B10)                                                     */
/*       BDX (0x401A4B10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_4_MCIO_DDRIO_REG 0x0D024B10

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B14)                                                     */
/*       BDX (0x401A4B14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_4_MCIO_DDRIO_REG 0x0D024B14

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B18)                                                     */
/*       BDX (0x401A4B18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_4_MCIO_DDRIO_REG 0x0D024B18

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B1C)                                                     */
/*       BDX (0x401A4B1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_4_MCIO_DDRIO_REG 0x0D024B1C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B20)                                                     */
/*       BDX (0x401A4B20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_4_MCIO_DDRIO_REG 0x0D024B20

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B24)                                                     */
/*       BDX (0x401A4B24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_4_MCIO_DDRIO_REG 0x0D024B24

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B28)                                                     */
/*       BDX (0x401A4B28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_4_MCIO_DDRIO_REG 0x0D024B28

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B2C)                                                     */
/*       BDX (0x401A4B2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_4_MCIO_DDRIO_REG 0x0D024B2C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B30)                                                     */
/*       BDX (0x401A4B30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_4_MCIO_DDRIO_REG 0x0D024B30

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B34)                                                     */
/*       BDX (0x401A4B34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_4_MCIO_DDRIO_REG 0x0D024B34

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B38)                                                     */
/*       BDX (0x401A4B38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_4_MCIO_DDRIO_REG 0x0D024B38

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B3C)                                                     */
/*       BDX (0x401A4B3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_4_MCIO_DDRIO_REG 0x0D024B3C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B40)                                                     */
/*       BDX (0x401A4B40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_4_MCIO_DDRIO_REG 0x0D024B40
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B44)                                                     */
/*       BDX (0x401A4B44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_4_MCIO_DDRIO_REG 0x0D024B44
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B48)                                                     */
/*       BDX (0x401A4B48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_4_MCIO_DDRIO_REG 0x0D024B48
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B4C)                                                     */
/*       BDX (0x401A4B4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_4_MCIO_DDRIO_REG 0x0D024B4C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B50)                                                     */
/*       BDX (0x401A4B50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_4_MCIO_DDRIO_REG 0x0D024B50
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B54)                                                     */
/*       BDX (0x401A4B54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_4_MCIO_DDRIO_REG 0x0D024B54
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B58)                                                     */
/*       BDX (0x401A4B58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_4_MCIO_DDRIO_REG 0x0D024B58
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B5C)                                                     */
/*       BDX (0x401A4B5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_4_MCIO_DDRIO_REG 0x0D024B5C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_4_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_4_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B60)                                                     */
/*       BDX (0x401A4B60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_4_MCIO_DDRIO_REG 0x0D024B60

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B64)                                                     */
/*       BDX (0x401A4B64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_4_MCIO_DDRIO_REG 0x0D024B64

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B68)                                                     */
/*       BDX (0x401A4B68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_4_MCIO_DDRIO_REG 0x0D024B68

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B6C)                                                     */
/*       BDX (0x401A4B6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_4_MCIO_DDRIO_REG 0x0D024B6C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B70)                                                     */
/*       BDX (0x401A4B70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_4_MCIO_DDRIO_REG 0x0D024B70

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B74)                                                     */
/*       BDX (0x401A4B74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_4_MCIO_DDRIO_REG 0x0D024B74

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B78)                                                     */
/*       BDX (0x401A4B78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_4_MCIO_DDRIO_REG 0x0D024B78

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B7C)                                                     */
/*       BDX (0x401A4B7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_4_MCIO_DDRIO_REG 0x0D024B7C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B80)                                                     */
/*       BDX (0x401A4B80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_4_MCIO_DDRIO_REG 0x0D024B80

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B84)                                                     */
/*       BDX (0x401A4B84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_4_MCIO_DDRIO_REG 0x0D024B84

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B88)                                                     */
/*       BDX (0x401A4B88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_4_MCIO_DDRIO_REG 0x0D024B88

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B8C)                                                     */
/*       BDX (0x401A4B8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_4_MCIO_DDRIO_REG 0x0D024B8C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B90)                                                     */
/*       BDX (0x401A4B90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_4_MCIO_DDRIO_REG 0x0D024B90

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B94)                                                     */
/*       BDX (0x401A4B94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_4_MCIO_DDRIO_REG 0x0D024B94

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B98)                                                     */
/*       BDX (0x401A4B98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_4_MCIO_DDRIO_REG 0x0D024B98

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_4_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4B9C)                                                     */
/*       BDX (0x401A4B9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_4_MCIO_DDRIO_REG 0x0D024B9C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN1_4_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4BA4)                                                     */
/*       BDX (0x401A4BA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_4_MCIO_DDRIO_REG 0x0D024BA4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_4_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A4BA8)                                                     */
/*       BDX (0x401A4BA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_4_MCIO_DDRIO_REG 0x0D024BA8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BAC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_4_MCIO_DDRIO_REG 0x0D024BAC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BB0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_4_MCIO_DDRIO_REG 0x0D024BB0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BB4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_4_MCIO_DDRIO_REG 0x0D024BB4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BB8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_4_MCIO_DDRIO_REG 0x0D024BB8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BBC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_4_MCIO_DDRIO_REG 0x0D024BBC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BC0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_4_MCIO_DDRIO_REG 0x0D024BC0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BC4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_4_MCIO_DDRIO_REG 0x0D024BC4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BC8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_4_MCIO_DDRIO_REG 0x0D024BC8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BCC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_4_MCIO_DDRIO_REG 0x0D024BCC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_4_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4BD0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_4_MCIO_DDRIO_REG 0x0D024BD0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_4_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* RXGROUP0N0RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C00)                                                     */
/*       BDX (0x401A4C00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_5_MCIO_DDRIO_REG 0x0D024C00

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C04)                                                     */
/*       BDX (0x401A4C04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_5_MCIO_DDRIO_REG 0x0D024C04

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C08)                                                     */
/*       BDX (0x401A4C08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_5_MCIO_DDRIO_REG 0x0D024C08

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C0C)                                                     */
/*       BDX (0x401A4C0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_5_MCIO_DDRIO_REG 0x0D024C0C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C10)                                                     */
/*       BDX (0x401A4C10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_5_MCIO_DDRIO_REG 0x0D024C10

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C14)                                                     */
/*       BDX (0x401A4C14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_5_MCIO_DDRIO_REG 0x0D024C14

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C18)                                                     */
/*       BDX (0x401A4C18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_5_MCIO_DDRIO_REG 0x0D024C18

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C1C)                                                     */
/*       BDX (0x401A4C1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_5_MCIO_DDRIO_REG 0x0D024C1C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C20)                                                     */
/*       BDX (0x401A4C20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_5_MCIO_DDRIO_REG 0x0D024C20

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C24)                                                     */
/*       BDX (0x401A4C24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_5_MCIO_DDRIO_REG 0x0D024C24

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C28)                                                     */
/*       BDX (0x401A4C28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_5_MCIO_DDRIO_REG 0x0D024C28

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C2C)                                                     */
/*       BDX (0x401A4C2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_5_MCIO_DDRIO_REG 0x0D024C2C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C30)                                                     */
/*       BDX (0x401A4C30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_5_MCIO_DDRIO_REG 0x0D024C30

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C34)                                                     */
/*       BDX (0x401A4C34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_5_MCIO_DDRIO_REG 0x0D024C34

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C38)                                                     */
/*       BDX (0x401A4C38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_5_MCIO_DDRIO_REG 0x0D024C38

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C3C)                                                     */
/*       BDX (0x401A4C3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_5_MCIO_DDRIO_REG 0x0D024C3C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C40)                                                     */
/*       BDX (0x401A4C40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_5_MCIO_DDRIO_REG 0x0D024C40
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C44)                                                     */
/*       BDX (0x401A4C44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_5_MCIO_DDRIO_REG 0x0D024C44
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C48)                                                     */
/*       BDX (0x401A4C48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_5_MCIO_DDRIO_REG 0x0D024C48
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C4C)                                                     */
/*       BDX (0x401A4C4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_5_MCIO_DDRIO_REG 0x0D024C4C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C50)                                                     */
/*       BDX (0x401A4C50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_5_MCIO_DDRIO_REG 0x0D024C50
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C54)                                                     */
/*       BDX (0x401A4C54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_5_MCIO_DDRIO_REG 0x0D024C54
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C58)                                                     */
/*       BDX (0x401A4C58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_5_MCIO_DDRIO_REG 0x0D024C58
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C5C)                                                     */
/*       BDX (0x401A4C5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_5_MCIO_DDRIO_REG 0x0D024C5C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C60)                                                     */
/*       BDX (0x401A4C60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_5_MCIO_DDRIO_REG 0x0D024C60

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C64)                                                     */
/*       BDX (0x401A4C64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_5_MCIO_DDRIO_REG 0x0D024C64

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C68)                                                     */
/*       BDX (0x401A4C68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_5_MCIO_DDRIO_REG 0x0D024C68

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C6C)                                                     */
/*       BDX (0x401A4C6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_5_MCIO_DDRIO_REG 0x0D024C6C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C70)                                                     */
/*       BDX (0x401A4C70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_5_MCIO_DDRIO_REG 0x0D024C70

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C74)                                                     */
/*       BDX (0x401A4C74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_5_MCIO_DDRIO_REG 0x0D024C74

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C78)                                                     */
/*       BDX (0x401A4C78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_5_MCIO_DDRIO_REG 0x0D024C78

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C7C)                                                     */
/*       BDX (0x401A4C7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_5_MCIO_DDRIO_REG 0x0D024C7C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C80)                                                     */
/*       BDX (0x401A4C80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_5_MCIO_DDRIO_REG 0x0D024C80

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C84)                                                     */
/*       BDX (0x401A4C84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_5_MCIO_DDRIO_REG 0x0D024C84

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C88)                                                     */
/*       BDX (0x401A4C88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_5_MCIO_DDRIO_REG 0x0D024C88

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C8C)                                                     */
/*       BDX (0x401A4C8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_5_MCIO_DDRIO_REG 0x0D024C8C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C90)                                                     */
/*       BDX (0x401A4C90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_5_MCIO_DDRIO_REG 0x0D024C90

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C94)                                                     */
/*       BDX (0x401A4C94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_5_MCIO_DDRIO_REG 0x0D024C94

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C98)                                                     */
/*       BDX (0x401A4C98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_5_MCIO_DDRIO_REG 0x0D024C98

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4C9C)                                                     */
/*       BDX (0x401A4C9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_5_MCIO_DDRIO_REG 0x0D024C9C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN0_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4CA4)                                                     */
/*       BDX (0x401A4CA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_5_MCIO_DDRIO_REG 0x0D024CA4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_5_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A4CA8)                                                     */
/*       BDX (0x401A4CA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_5_MCIO_DDRIO_REG 0x0D024CA8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4CAC)                                                     */
/*       BDX (0x401A4CAC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_5_MCIO_DDRIO_REG 0x0D024CAC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_5_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A4CCC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_5_MCIO_DDRIO_REG 0x0D024CCC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_5_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A4CD0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_5_MCIO_DDRIO_REG 0x0D024CD0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */






/* DATAOFFSETTRAIN_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4CDC)                                                     */
/*       BDX (0x401A4CDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_5_MCIO_DDRIO_REG 0x0D024CDC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_5_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A4CE4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_5_MCIO_DDRIO_REG 0x0D024CE4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4CE8)                                                     */
/*       BDX (0x401A4CE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_5_MCIO_DDRIO_REG 0x0D024CE8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 rsvd_4 : 1;
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rsvd_6 : 1;
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 rsvd_8 : 1;
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4CEC)                                                     */
/*       BDX (0x401A4CEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_5_MCIO_DDRIO_REG 0x0D024CEC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4CF0)                                                     */
/*       BDX (0x401A4CF0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_5_MCIO_DDRIO_REG 0x0D024CF0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4CF4)                                                     */
/*       BDX (0x401A4CF4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_5_MCIO_DDRIO_REG 0x0D024CF4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 rsvd_18 : 3;
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_5_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A4CF8)                                                     */
/*       BDX (0x401A4CF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_5_MCIO_DDRIO_REG 0x0D024CF8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D00)                                                     */
/*       BDX (0x401A4D00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_5_MCIO_DDRIO_REG 0x0D024D00

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D04)                                                     */
/*       BDX (0x401A4D04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_5_MCIO_DDRIO_REG 0x0D024D04

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D08)                                                     */
/*       BDX (0x401A4D08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_5_MCIO_DDRIO_REG 0x0D024D08

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D0C)                                                     */
/*       BDX (0x401A4D0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_5_MCIO_DDRIO_REG 0x0D024D0C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D10)                                                     */
/*       BDX (0x401A4D10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_5_MCIO_DDRIO_REG 0x0D024D10

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D14)                                                     */
/*       BDX (0x401A4D14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_5_MCIO_DDRIO_REG 0x0D024D14

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D18)                                                     */
/*       BDX (0x401A4D18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_5_MCIO_DDRIO_REG 0x0D024D18

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D1C)                                                     */
/*       BDX (0x401A4D1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_5_MCIO_DDRIO_REG 0x0D024D1C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D20)                                                     */
/*       BDX (0x401A4D20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_5_MCIO_DDRIO_REG 0x0D024D20

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D24)                                                     */
/*       BDX (0x401A4D24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_5_MCIO_DDRIO_REG 0x0D024D24

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D28)                                                     */
/*       BDX (0x401A4D28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_5_MCIO_DDRIO_REG 0x0D024D28

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D2C)                                                     */
/*       BDX (0x401A4D2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_5_MCIO_DDRIO_REG 0x0D024D2C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D30)                                                     */
/*       BDX (0x401A4D30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_5_MCIO_DDRIO_REG 0x0D024D30

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D34)                                                     */
/*       BDX (0x401A4D34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_5_MCIO_DDRIO_REG 0x0D024D34

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D38)                                                     */
/*       BDX (0x401A4D38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_5_MCIO_DDRIO_REG 0x0D024D38

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D3C)                                                     */
/*       BDX (0x401A4D3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_5_MCIO_DDRIO_REG 0x0D024D3C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D40)                                                     */
/*       BDX (0x401A4D40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_5_MCIO_DDRIO_REG 0x0D024D40
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D44)                                                     */
/*       BDX (0x401A4D44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_5_MCIO_DDRIO_REG 0x0D024D44
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D48)                                                     */
/*       BDX (0x401A4D48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_5_MCIO_DDRIO_REG 0x0D024D48
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D4C)                                                     */
/*       BDX (0x401A4D4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_5_MCIO_DDRIO_REG 0x0D024D4C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D50)                                                     */
/*       BDX (0x401A4D50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_5_MCIO_DDRIO_REG 0x0D024D50
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D54)                                                     */
/*       BDX (0x401A4D54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_5_MCIO_DDRIO_REG 0x0D024D54
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D58)                                                     */
/*       BDX (0x401A4D58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_5_MCIO_DDRIO_REG 0x0D024D58
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D5C)                                                     */
/*       BDX (0x401A4D5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_5_MCIO_DDRIO_REG 0x0D024D5C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_5_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_5_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D60)                                                     */
/*       BDX (0x401A4D60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_5_MCIO_DDRIO_REG 0x0D024D60

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D64)                                                     */
/*       BDX (0x401A4D64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_5_MCIO_DDRIO_REG 0x0D024D64

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D68)                                                     */
/*       BDX (0x401A4D68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_5_MCIO_DDRIO_REG 0x0D024D68

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D6C)                                                     */
/*       BDX (0x401A4D6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_5_MCIO_DDRIO_REG 0x0D024D6C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D70)                                                     */
/*       BDX (0x401A4D70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_5_MCIO_DDRIO_REG 0x0D024D70

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D74)                                                     */
/*       BDX (0x401A4D74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_5_MCIO_DDRIO_REG 0x0D024D74

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D78)                                                     */
/*       BDX (0x401A4D78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_5_MCIO_DDRIO_REG 0x0D024D78

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D7C)                                                     */
/*       BDX (0x401A4D7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_5_MCIO_DDRIO_REG 0x0D024D7C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D80)                                                     */
/*       BDX (0x401A4D80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_5_MCIO_DDRIO_REG 0x0D024D80

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D84)                                                     */
/*       BDX (0x401A4D84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_5_MCIO_DDRIO_REG 0x0D024D84

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D88)                                                     */
/*       BDX (0x401A4D88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_5_MCIO_DDRIO_REG 0x0D024D88

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D8C)                                                     */
/*       BDX (0x401A4D8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_5_MCIO_DDRIO_REG 0x0D024D8C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D90)                                                     */
/*       BDX (0x401A4D90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_5_MCIO_DDRIO_REG 0x0D024D90

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D94)                                                     */
/*       BDX (0x401A4D94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_5_MCIO_DDRIO_REG 0x0D024D94

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D98)                                                     */
/*       BDX (0x401A4D98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_5_MCIO_DDRIO_REG 0x0D024D98

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_5_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4D9C)                                                     */
/*       BDX (0x401A4D9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_5_MCIO_DDRIO_REG 0x0D024D9C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN1_5_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4DA4)                                                     */
/*       BDX (0x401A4DA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_5_MCIO_DDRIO_REG 0x0D024DA4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_5_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A4DA8)                                                     */
/*       BDX (0x401A4DA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_5_MCIO_DDRIO_REG 0x0D024DA8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DAC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_5_MCIO_DDRIO_REG 0x0D024DAC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DB0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_5_MCIO_DDRIO_REG 0x0D024DB0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DB4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_5_MCIO_DDRIO_REG 0x0D024DB4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DB8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_5_MCIO_DDRIO_REG 0x0D024DB8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DBC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_5_MCIO_DDRIO_REG 0x0D024DBC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DC0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_5_MCIO_DDRIO_REG 0x0D024DC0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DC4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_5_MCIO_DDRIO_REG 0x0D024DC4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DC8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_5_MCIO_DDRIO_REG 0x0D024DC8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DCC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_5_MCIO_DDRIO_REG 0x0D024DCC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_5_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4DD0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_5_MCIO_DDRIO_REG 0x0D024DD0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_5_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* RXGROUP0N0RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E00)                                                     */
/*       BDX (0x401A4E00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_6_MCIO_DDRIO_REG 0x0D024E00

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset,  
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E04)                                                     */
/*       BDX (0x401A4E04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_6_MCIO_DDRIO_REG 0x0D024E04

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E08)                                                     */
/*       BDX (0x401A4E08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_6_MCIO_DDRIO_REG 0x0D024E08

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E0C)                                                     */
/*       BDX (0x401A4E0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_6_MCIO_DDRIO_REG 0x0D024E0C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E10)                                                     */
/*       BDX (0x401A4E10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_6_MCIO_DDRIO_REG 0x0D024E10

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E14)                                                     */
/*       BDX (0x401A4E14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_6_MCIO_DDRIO_REG 0x0D024E14

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E18)                                                     */
/*       BDX (0x401A4E18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_6_MCIO_DDRIO_REG 0x0D024E18

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N0RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E1C)                                                     */
/*       BDX (0x401A4E1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_6_MCIO_DDRIO_REG 0x0D024E1C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E20)                                                     */
/*       BDX (0x401A4E20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_6_MCIO_DDRIO_REG 0x0D024E20

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E24)                                                     */
/*       BDX (0x401A4E24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_6_MCIO_DDRIO_REG 0x0D024E24

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E28)                                                     */
/*       BDX (0x401A4E28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_6_MCIO_DDRIO_REG 0x0D024E28

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E2C)                                                     */
/*       BDX (0x401A4E2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_6_MCIO_DDRIO_REG 0x0D024E2C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E30)                                                     */
/*       BDX (0x401A4E30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_6_MCIO_DDRIO_REG 0x0D024E30

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E34)                                                     */
/*       BDX (0x401A4E34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_6_MCIO_DDRIO_REG 0x0D024E34

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E38)                                                     */
/*       BDX (0x401A4E38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_6_MCIO_DDRIO_REG 0x0D024E38

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N0RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E3C)                                                     */
/*       BDX (0x401A4E3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_6_MCIO_DDRIO_REG 0x0D024E3C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N0RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E40)                                                     */
/*       BDX (0x401A4E40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_6_MCIO_DDRIO_REG 0x0D024E40
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E44)                                                     */
/*       BDX (0x401A4E44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_6_MCIO_DDRIO_REG 0x0D024E44
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E48)                                                     */
/*       BDX (0x401A4E48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_6_MCIO_DDRIO_REG 0x0D024E48
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on. 
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E4C)                                                     */
/*       BDX (0x401A4E4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_6_MCIO_DDRIO_REG 0x0D024E4C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E50)                                                     */
/*       BDX (0x401A4E50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_6_MCIO_DDRIO_REG 0x0D024E50
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E54)                                                     */
/*       BDX (0x401A4E54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_6_MCIO_DDRIO_REG 0x0D024E54
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E58)                                                     */
/*       BDX (0x401A4E58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_6_MCIO_DDRIO_REG 0x0D024E58
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N0RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E5C)                                                     */
/*       BDX (0x401A4E5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_6_MCIO_DDRIO_REG 0x0D024E5C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N0RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E60)                                                     */
/*       BDX (0x401A4E60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_6_MCIO_DDRIO_REG 0x0D024E60

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E64)                                                     */
/*       BDX (0x401A4E64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_6_MCIO_DDRIO_REG 0x0D024E64

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E68)                                                     */
/*       BDX (0x401A4E68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_6_MCIO_DDRIO_REG 0x0D024E68

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E6C)                                                     */
/*       BDX (0x401A4E6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_6_MCIO_DDRIO_REG 0x0D024E6C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E70)                                                     */
/*       BDX (0x401A4E70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_6_MCIO_DDRIO_REG 0x0D024E70

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E74)                                                     */
/*       BDX (0x401A4E74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_6_MCIO_DDRIO_REG 0x0D024E74

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E78)                                                     */
/*       BDX (0x401A4E78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_6_MCIO_DDRIO_REG 0x0D024E78

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N0RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E7C)                                                     */
/*       BDX (0x401A4E7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_6_MCIO_DDRIO_REG 0x0D024E7C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E80)                                                     */
/*       BDX (0x401A4E80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_6_MCIO_DDRIO_REG 0x0D024E80

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E84)                                                     */
/*       BDX (0x401A4E84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_6_MCIO_DDRIO_REG 0x0D024E84

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E88)                                                     */
/*       BDX (0x401A4E88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_6_MCIO_DDRIO_REG 0x0D024E88

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E8C)                                                     */
/*       BDX (0x401A4E8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_6_MCIO_DDRIO_REG 0x0D024E8C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E90)                                                     */
/*       BDX (0x401A4E90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_6_MCIO_DDRIO_REG 0x0D024E90

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E94)                                                     */
/*       BDX (0x401A4E94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_6_MCIO_DDRIO_REG 0x0D024E94

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E98)                                                     */
/*       BDX (0x401A4E98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_6_MCIO_DDRIO_REG 0x0D024E98

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN0RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4E9C)                                                     */
/*       BDX (0x401A4E9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_6_MCIO_DDRIO_REG 0x0D024E9C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN0_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4EA4)                                                     */
/*       BDX (0x401A4EA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_6_MCIO_DDRIO_REG 0x0D024EA4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN0_6_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A4EA8)                                                     */
/*       BDX (0x401A4EA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_6_MCIO_DDRIO_REG 0x0D024EA8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 18;
    /* datatrainfeedback - Bits[17:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
       
               DataTrainFeedback Description:
                Training Step    Bits    Nibble    Description
               --------------    ----    -------  
       -------------------------------------------------------------------------------------------------------------------------------------------------------- 
               Cross Over Cal     0      0        Tx Dqs Phase Detection
               Cross Over Cal     1      0        Tx Dq Phase Detection
               Cross Over Cal     2      0        Rec En Phase Detection
               RcvEn              8:0    0        Byte detection
               Rx Dq-Dqs          0      0        Pass/fail
               Wr Leveling        8:0    0        Byte detection
               Cross Over Cal     3      1        Tx Dqs Phase Detection
               Cross Over Cal     4      1        Tx Dq Phase Detection
               Cross Over Cal     5      1        Rec En Phase Detection
               RcvEn             17:9    1        Byte detection
               Rx Dq-Dqs          1      1        Pass/fail
               Wr Leveling       17:9    1        Byte detection
               
     */
    UINT32 rsvd_18 : 14;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL4_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4EAC)                                                     */
/*       BDX (0x401A4EAC)                                                     */
/* Register default value on HSX:       0x00000000                            */
/* Register default value on BDX:       <could not determine>                 */
#define DATACONTROL4_6_MCIO_DDRIO_REG 0x0D024EAC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 rsvd_23 : 9;
  } Bits;
  UINT32 Data;
} DATACONTROL4_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 gqclkdivenable : 1;
    /* gqclkdivenable - Bits[0:0], RW_L, default = None 
       enable grid clock divider in xover. used in native ddr mode for data rate 
       greater than 1867MT/s 
     */
    UINT32 pirefclkdivenable : 1;
    /* pirefclkdivenable - Bits[1:1], RW_L, default = None 
       enable PiRef clock divider in xover. used in vmse2to2mode, or whenever data rate 
       greater than 1867MT/s 
     */
    UINT32 xoveropmode : 1;
    /* xoveropmode - Bits[2:2], RW_L, default = None 
       enable extra pipestage in xover. POR setting = 1
     */
    UINT32 vmsehalfwidthmode : 1;
    /* vmsehalfwidthmode - Bits[3:3], RW_L, default = None 
       gate ClkPi when the nibble is disabled in VMSE half-width mode
     */
    UINT32 disablercvenextension : 1;
    /* disablercvenextension - Bits[4:4], RW_L, default = None 
       By default receive enable extension will be bypassed in VMSE2to1 mode. Setting 
       this to 1 in VMSE mode will use DDR to extend the rcven. VMSE ACIO LB use case 
       when only one scheduler is used. 
     */
    UINT32 ddrcrinvertpiclk : 2;
    /* ddrcrinvertpiclk - Bits[6:5], RW_L, default = 2'b00 
       invert ClkPiRef (per nibble) in 2:2 and 2:1 mode to extend the ClkPiRefDiv2 
       phase. 
     */
    UINT32 dqvmselogicdelay : 8;
    /* dqvmselogicdelay - Bits[14:7], RW_L, default = 1'b0 
       DqVmseLogicDelay: If set add one UI delay to the Tx Fifo Read and DQ drivenable
     */
    UINT32 rcvenvmselogicdelay : 2;
    /* rcvenvmselogicdelay - Bits[16:15], RW_L, default = 1'b0 
       Receive enable VmseLogicDelay: If set add one UI delay to the receive enable
     */
    UINT32 dqsvmselogicdelay : 2;
    /* dqsvmselogicdelay - Bits[18:17], RW_L, default = 1'b0 
       DQS VMSE Logic Delay
     */
    UINT32 drvpupdis : 1;
    /* drvpupdis - Bits[19:19], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 ddrsroslmask : 1;
    /* ddrsroslmask - Bits[20:20], RW_L, default = None 
       This will be connected to all tx, and must toggle 1->0 after a power state
     */
    UINT32 dqvmsenibblelogicdelay : 2;
    /* dqvmsenibblelogicdelay - Bits[22:21], RW_L, default = None 
       VMSE Logic delay that is shared for all bits in the nibble
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[23:23], RW_L, default = None 
       Enable write crc mode
     */
    UINT32 bdx_sys : 1;
    /* bdx_sys - Bits[24:24], RW_L, default = '1 
       This bit helps to bypass the delaycell in transmitter
     */
    UINT32 rsvd_25 : 6;
    UINT32 bypassinitoptolatchenable : 1;
    /* bypassinitoptolatchenable - Bits[31:31], RW_L, default = None 
       This will ignore an InitOp when the RFFSM is active for a read operation
     */
  } Bits;
  UINT32 Data;
} DATACONTROL4_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* VSSHIORVREFCONTROL1_6_MCIO_DDRIO_REG supported on:                         */
/*       BDX (0x401A4ECC)                                                     */
/* Register default value:              0x00000000                            */
#define VSSHIORVREFCONTROL1_6_MCIO_DDRIO_REG 0x0D024ECC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Extension for BDX. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 8;
    /* vsshiorvrefctl - Bits[7:0], RW_L, default = 8'b0 
        BDX-specific extended control signal. 
     */
    UINT32 spare : 24;
    /* spare - Bits[31:8], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* PXCATTACK1SEL_6_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A4ED0)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK1SEL_6_MCIO_DDRIO_REG 0x0D024ED0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK1SEL_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */






/* DATAOFFSETTRAIN_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4EDC)                                                     */
/*       BDX (0x401A4EDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAIN_6_MCIO_DDRIO_REG 0x0D024EDC

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW_L, default = 1'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW_L, default = 1'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW_L, default = 2'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW_L, default = 6'b000000 
       Offset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW_L, default = 7'b0000000 
       unsiged offset added to Trained Vref Value. each step is Vdd/192.
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAIN_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* PXCATTACK0SEL_6_MCIO_DDRIO_REG supported on:                               */
/*       BDX (0x401A4EE4)                                                     */
/* Register default value:              0x00FAC688                            */
#define PXCATTACK0SEL_6_MCIO_DDRIO_REG 0x0D024EE4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Select 2 aggressors out 3 neighbors in a nibble
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW_L, default = 3'd0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW_L, default = 3'd1 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW_L, default = 3'd2 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW_L, default = 3'd3 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 attackr0d4 : 3;
    /* attackr0d4 - Bits[14:12], RW_L, default = 3'd4 
       xtalk aggressor0 select for dq bit[4] in a byte
     */
    UINT32 attackr0d5 : 3;
    /* attackr0d5 - Bits[17:15], RW_L, default = 3'd5 
       xtalk aggressor0 select for dq bit[5] in a byte
     */
    UINT32 attackr0d6 : 3;
    /* attackr0d6 - Bits[20:18], RW_L, default = 3'd6 
       xtalk aggressor0 select for dq bit[6] in a byte
     */
    UINT32 attackr0d7 : 3;
    /* attackr0d7 - Bits[23:21], RW_L, default = 3'd7 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 spare : 8;
    /* spare - Bits[31:24], RW_L, default = 8'b0 
       spare bits.
     */
  } Bits;
  UINT32 Data;
} PXCATTACK0SEL_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATACONTROL0_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4EE8)                                                     */
/*       BDX (0x401A4EE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0_6_MCIO_DDRIO_REG 0x0D024EE8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW_L, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW_L, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW_L, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW_L, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 rsvd_4 : 1;
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW_L, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rsvd_6 : 1;
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW_L, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 rsvd_8 : 1;
    UINT32 dcdetectmode : 1;
    /* dcdetectmode - Bits[9:9], RW_L, default = 1'b0 
       Enable VMSE DC detect mode.
     */
    UINT32 rsvd_10 : 2;
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW_L, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW_L, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read c 
       ommand to Rank = ReadRFRank
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RW_L, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write  
       command to Rank = ReadRFRank
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RW_L, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW_L, default = 1'b0 
       ODT is forced-on. NOTE: Cannot be set if LongODTR2W is set or can create glitch 
       in transmitter.   NOTE: If forceodton = 1, odtduration should be set to 0 
     */
    UINT32 rsvd_26 : 3;
    UINT32 burstlength4 : 1;
    /* burstlength4 - Bits[29:29], RW_L, default = 1'b0 
       enable lockstep mode, burst length 4
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW_L, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW_L, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATACONTROL1_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4EEC)                                                     */
/*       BDX (0x401A4EEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1_6_MCIO_DDRIO_REG 0x0D024EEC
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in VMSE half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 7;
    UINT32 sdlldisable : 2;
    /* sdlldisable - Bits[8:7], RW_L, default = 2'b00 
       Controls which slave DLL are disabled: used in vmse half-width mode to turn off 
       the unused slave delay line. 
                 Set to 0 to have nothing disabled.
                 Set to 1 to have nibble0 disabled.
                 Set to 2 to have nibble1 disabled.
                 Set to 3 to have nibble0 and nibble 1 disabled.
               
     */
    UINT32 rsvd_9 : 1;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW_L, default = 1'b0 
       Controls the Current and BW of the Receiver: 
                 {0: 0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4: 1.33Idll, 5: 
       1.66Idll, 6: 2.00Idll, 7: 2.33Idll} 
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW_L, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW_L, default = 4'b0000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK).  NOTE: If forceodton = 1, this should be set to 0 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW_L, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW_L, default = 4'b0000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW_L, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling On-die 
       Terminators 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL2_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4EF0)                                                     */
/*       BDX (0x401A4EF0)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL2_6_MCIO_DDRIO_REG 0x0D024EF0
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 rxstaggerctl : 5;
    /* rxstaggerctl - Bits[4:0], RW_L, default = 5'b0 
       Delay DdrRxEnableQnnnH by RxStaggerCtl qclks (0-31) before turning on/off the 
       RxAmps  
               If RxStaggerCtl = 0, use the ODT Delay/Duration settings for turning 
       on/off the Rx amplifier  
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW_L, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW_L, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier). 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency  
     */
    UINT32 rsvd_7 : 1;
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW_L, default = None 
       1: Center Tap Termination for DDR3; 0: Vddq Termination for DDR4/VMSE
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW_L, default = None 
       Imode Select, 0: Swing Boost Mode; 1: Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW_L, default = None 
       Enable Imode EQ per byte lane. 
                 0: Imode completely off 
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg. 
                 If enabled, the bit has to be turned on after ImodeBiasEnable turned 
       on. 
               
     */
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[14:11], RW_L, default = None 
       Binary Imode Coefficient, sets Imode current strength. 
                 (used for either Xtalk cancellation or swing boost)
                 Code   Imode Current (approx)
                 ------------------
                 0000        0  
                 0001        1
                 0010        2 
                   *  
                   * 
                   *
                 1111        3
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW_L, default = None 
       Enables Imode Bias circuit. It must be enabled before ImodeEnable is turned on.
     */
    UINT32 imodescomp : 6;
    /* imodescomp - Bits[21:16], RW_L, default = None 
       Scomp code for Imode circuit
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW_L, default = None 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW_L, default = None 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 2;
    UINT32 xtalklowpwrenb : 1;
    /* xtalklowpwrenb - Bits[30:30], RW_L, default = 1'b0 
       disables xtalk toggle detect, also used to set narrow operation range for 
       internal  
                 Vref gen circuit. when narrow range operation is needed, it is 
       expected that bios will program 
                 this bit to '1' first and, when Vref is settled, bios program Vref 
       levelshifter hold cr, which 
                 latch the setting. Afterwards, this CR can be used to set xtalk 
       lowpower disable or not. 
               
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL2_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* DATACONTROL3_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4EF4)                                                     */
/*       BDX (0x401A4EF4)                                                     */
/* Register default value:              0x8184924924F                         */
#define DATACONTROL3_6_MCIO_DDRIO_REG 0x0D024EF4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * static configurations of tx and rx.
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW_L, default = 2'b11 
       binary default setting for static legs in DRV mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW_L, default = 2'b11 
       binary default setting for static legs in ODT mode
                  0    0       0 legs (EQ disabled)
                  0    1       3 legs (EQ max 3 legs)
                  1    0       6 legs (EQ max 6 legs)
                  1    1      12 legs (EQ max 12 legs)
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher  
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit  
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW_L, default = 1'b0 
       level shift hold enable
                            Holds the HV control values and power down the level 
       shifters. 
                            Apply "1" after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset.  
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW_L, default = 3'b001 
       This will tell which  segments are enabled out of reset. 
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW_L, default = 3'b001 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. NOTE: 
       Cannot be set if ForceODTOn is set or can create glitch in transmitter. 
     */
    UINT32 imodebiashighcm : 1;
    /* imodebiashighcm - Bits[13:13], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW_L, default = 3'b001 
       imodebias control 
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW_L, default = 3'b001 
       imodebias control. Also used for rxbiasana 
     */
    UINT32 rsvd_18 : 3;
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW_L, default = 2'b00 
       ctle capacitor setting 
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW_L, default = 2'b11 
       ctle resistor setting 
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW_L, default = 2'b00 
       when enabled, choose close loop for the pcas bias loop in Rxbias
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW_L, default = 2'b00 
       only used in CTL fub. when enabled, it turns on part of Rxbias for imodebias.
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW_L, default = 2'b00 
       adjust common mode in the first stage.
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW_L, default = 2'b01 
       used to compensate the GCN skew. The GCN skew information should be
                 extracted by reading and analyzing the final Rcomp code value. The 
       target spec 
                 is to categorize the GCN skew in 3 process condition (mainly slow, 
       fast, typical). 
                 (one example can be just reading the 2 MLS bit of Rcomp code and 
       determine if the 
                 GCN is slow, fast or typical). The gcncomp is used for CTLE.
                 11: gcn in slow corner
                 10: gcn in typical corner
                 01: gcn in fast corner
               
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW_L, default = None 
       VMSE: enables long postamble and a dummy toggle
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* VSSHIORVREFCONTROL_6_MCIO_DDRIO_REG supported on:                          */
/*       HSX (0x401A4EF8)                                                     */
/*       BDX (0x401A4EF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROL_6_MCIO_DDRIO_REG 0x0D024EF8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW_L, default = 24'h4d8238 
         VssHi adjust setting.
                Field          Bits    Description
               -------         ----    
       ----------------------------------------------------------------------------- 
               SelCode          23     Selects the code to output:  {0: Code, 1: TCode}
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode    
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 117mV) 
               CloseLoop        17     Enables the VssHi close loop tracking 
               PanicEn          16     Enables the VssHi Panic Driver
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError) 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128} 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 8 
       samples, 2: 16 samples, 3: 32 samples} 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
               
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROL_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXGROUP0N1RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F00)                                                     */
/*       BDX (0x401A4F00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_6_MCIO_DDRIO_REG 0x0D024F00

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank0
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F04)                                                     */
/*       BDX (0x401A4F04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_6_MCIO_DDRIO_REG 0x0D024F04

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank1
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F08)                                                     */
/*       BDX (0x401A4F08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_6_MCIO_DDRIO_REG 0x0D024F08

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank2
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F0C)                                                     */
/*       BDX (0x401A4F0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_6_MCIO_DDRIO_REG 0x0D024F0C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank3
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F10)                                                     */
/*       BDX (0x401A4F10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_6_MCIO_DDRIO_REG 0x0D024F10

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank4
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F14)                                                     */
/*       BDX (0x401A4F14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_6_MCIO_DDRIO_REG 0x0D024F14

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank5
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F18)                                                     */
/*       BDX (0x401A4F18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_6_MCIO_DDRIO_REG 0x0D024F18

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank6
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP0N1RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F1C)                                                     */
/*       BDX (0x401A4F1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_6_MCIO_DDRIO_REG 0x0D024F1C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data RX training values for Rank7
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW_L, default = 1'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 rcvenxsel : 1;
    /* rcvenxsel - Bits[9:9], RW_L, default = 1'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW_L, default = 1'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW_L, default = 1'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW_L, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms) 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
               
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F20)                                                     */
/*       BDX (0x401A4F20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_6_MCIO_DDRIO_REG 0x0D024F20

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F24)                                                     */
/*       BDX (0x401A4F24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_6_MCIO_DDRIO_REG 0x0D024F24

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F28)                                                     */
/*       BDX (0x401A4F28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_6_MCIO_DDRIO_REG 0x0D024F28

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F2C)                                                     */
/*       BDX (0x401A4F2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_6_MCIO_DDRIO_REG 0x0D024F2C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F30)                                                     */
/*       BDX (0x401A4F30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_6_MCIO_DDRIO_REG 0x0D024F30

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F34)                                                     */
/*       BDX (0x401A4F34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_6_MCIO_DDRIO_REG 0x0D024F34

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F38)                                                     */
/*       BDX (0x401A4F38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_6_MCIO_DDRIO_REG 0x0D024F38

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXGROUP1N1RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F3C)                                                     */
/*       BDX (0x401A4F3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_6_MCIO_DDRIO_REG 0x0D024F3C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW_L, default = 1'b0 
       per bit READ timing control, 
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
               
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP0N1RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F40)                                                     */
/*       BDX (0x401A4F40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_6_MCIO_DDRIO_REG 0x0D024F40
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F44)                                                     */
/*       BDX (0x401A4F44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_6_MCIO_DDRIO_REG 0x0D024F44
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F48)                                                     */
/*       BDX (0x401A4F48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_6_MCIO_DDRIO_REG 0x0D024F48
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F4C)                                                     */
/*       BDX (0x401A4F4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_6_MCIO_DDRIO_REG 0x0D024F4C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F50)                                                     */
/*       BDX (0x401A4F50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_6_MCIO_DDRIO_REG 0x0D024F50
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F54)                                                     */
/*       BDX (0x401A4F54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_6_MCIO_DDRIO_REG 0x0D024F54
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F58)                                                     */
/*       BDX (0x401A4F58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_6_MCIO_DDRIO_REG 0x0D024F58
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP0N1RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F5C)                                                     */
/*       BDX (0x401A4F5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_6_MCIO_DDRIO_REG 0x0D024F5C
#ifdef HSX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file HSX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 5;
    /* txeq - Bits[27:23], RW_L, default = 1'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
               
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_6_MCIO_DDRIO_HSX_STRUCT;
#endif /* ASM_INC */
#endif /* HSX_HOST */

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing and Voltage control for writing one data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW_L, default = 1'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW_L, default = 1'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqxsel0 : 1;
    /* txdqxsel0 - Bits[18:18], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 0
     */
    UINT32 txdqxsel1 : 1;
    /* txdqxsel1 - Bits[19:19], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 txdqxsel2 : 1;
    /* txdqxsel2 - Bits[20:20], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 2
     */
    UINT32 txdqxsel3 : 1;
    /* txdqxsel3 - Bits[21:21], RW_L, default = 1'b0 
       xelect for crossover from PiRef to PiN for bit 3
     */
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW_L, default = 1'b0 
       xelect for crossover from ClkPiRef to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW_L, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are meaningful. 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled  
                   for deemphasized, and so on.
                   BDX-change. Increased the width by 1bit for TXEQ tracking     
               
     */
    UINT32 rsvd_29 : 3;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_6_MCIO_DDRIO_BDX_STRUCT;
#endif /* ASM_INC */
#endif /* BDX_HOST */



/* TXGROUP1N1RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F60)                                                     */
/*       BDX (0x401A4F60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_6_MCIO_DDRIO_REG 0x0D024F60

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F64)                                                     */
/*       BDX (0x401A4F64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_6_MCIO_DDRIO_REG 0x0D024F64

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F68)                                                     */
/*       BDX (0x401A4F68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_6_MCIO_DDRIO_REG 0x0D024F68

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F6C)                                                     */
/*       BDX (0x401A4F6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_6_MCIO_DDRIO_REG 0x0D024F6C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F70)                                                     */
/*       BDX (0x401A4F70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_6_MCIO_DDRIO_REG 0x0D024F70

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F74)                                                     */
/*       BDX (0x401A4F74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_6_MCIO_DDRIO_REG 0x0D024F74

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F78)                                                     */
/*       BDX (0x401A4F78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_6_MCIO_DDRIO_REG 0x0D024F78

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* TXGROUP1N1RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F7C)                                                     */
/*       BDX (0x401A4F7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_6_MCIO_DDRIO_REG 0x0D024F7C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW_L, default = 1'b0 
       Write timing offset for bit[4] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW_L, default = 1'b0 
       Write timing offset for bit[5] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW_L, default = 1'b0 
       Write timing offset for bit[6] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW_L, default = 1'b0 
       Write timing offset for bit[7] of the DQ byte.  0 to 1ClkPi with step size of 
       tClkPi/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK0_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F80)                                                     */
/*       BDX (0x401A4F80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_6_MCIO_DDRIO_REG 0x0D024F80

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK1_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F84)                                                     */
/*       BDX (0x401A4F84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_6_MCIO_DDRIO_REG 0x0D024F84

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK2_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F88)                                                     */
/*       BDX (0x401A4F88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_6_MCIO_DDRIO_REG 0x0D024F88

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK3_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F8C)                                                     */
/*       BDX (0x401A4F8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_6_MCIO_DDRIO_REG 0x0D024F8C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK4_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F90)                                                     */
/*       BDX (0x401A4F90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_6_MCIO_DDRIO_REG 0x0D024F90

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK5_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F94)                                                     */
/*       BDX (0x401A4F94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_6_MCIO_DDRIO_REG 0x0D024F94

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK6_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F98)                                                     */
/*       BDX (0x401A4F98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_6_MCIO_DDRIO_REG 0x0D024F98

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* RXOFFSETN1RANK7_6_MCIO_DDRIO_REG supported on:                             */
/*       HSX (0x401A4F9C)                                                     */
/*       BDX (0x401A4F9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_6_MCIO_DDRIO_REG 0x0D024F9C

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Read Per Lane Amplifier Voltage Offset
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW_L, default = 1'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset}  
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW_L, default = 1'b0 
       x4/x8 DQS mux select
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode;  
                   [0]=0 select nibble1 amplifier output in x4 mode; 
                   [1] is not used.
               
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW_L, default = 1'b0 
       select the dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */




/* RXVREFCTRLN1_6_MCIO_DDRIO_REG supported on:                                */
/*       HSX (0x401A4FA4)                                                     */
/*       BDX (0x401A4FA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_6_MCIO_DDRIO_REG 0x0D024FA4

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * RxVrefCtrl
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW_L, default = 1'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW_L, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATRAINFEEDBACKN1_6_MCIO_DDRIO_REG supported on:                         */
/*       HSX (0x401A4FA8)                                                     */
/*       BDX (0x401A4FA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_6_MCIO_DDRIO_REG 0x0D024FA8

#if defined(HSX_HOST) || defined(BDX_HOST)
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data Training Feedback Results
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW_L, default = 1'b0 
       Data Training Feedback Storage
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /* defined(HSX_HOST) || defined(BDX_HOST) */


/* DATATCOCOMPOFFSET0_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FAC)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET0_6_MCIO_DDRIO_REG 0x0D024FAC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Data offsets to training values.
 */
typedef union {
  struct {
    UINT32 dq0tcocompoffset : 5;
    /* dq0tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq1tcocompoffset : 5;
    /* dq1tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Tco Comp Value.
     */
    UINT32 dq2tcocompoffset : 5;
    /* dq2tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to DQ2 Tco Comp Value.
     */
    UINT32 dq3tcocompoffset : 5;
    /* dq3tcocompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment offset added to DQ3 Tco Comp Value.
     */
    UINT32 dqs0tcocompoffset : 5;
    /* dqs0tcocompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATATCOCOMPOFFSET1_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FB0)                                                     */
/* Register default value:              0x00000000                            */
#define DATATCOCOMPOFFSET1_6_MCIO_DDRIO_REG 0x0D024FB0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Tco Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4tcocompoffset : 5;
    /* dq4tcocompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment offset added to DQ4 Tco Comp Value.
     */
    UINT32 dq5tcocompoffset : 5;
    /* dq5tcocompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment offset added to Dq5 Tco Comp Value.
     */
    UINT32 dq6tcocompoffset : 5;
    /* dq6tcocompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment offset added to Dq6 Tco Comp Value.
     */
    UINT32 dq7tcocompoffset : 5;
    /* dq7tcocompoffset - Bits[19:15], RW_L, default = 1'b0 
       2s Compliment offset added to Dq7 Tco Comp Value.
     */
    UINT32 dqs1tcocompoffset : 5;
    /* dqs1tcocompoffset - Bits[24:20], RW_L, default = 1'b0 
       2s Compliment offset added to Dqs1 Tco Comp Value.
     */
    UINT32 enperbittcocomp : 1;
    /* enperbittcocomp - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit Tco Comp flow.
     */
    UINT32 gentcocompdone : 1;
    /* gentcocompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       Generate TCO Comp done.
     */
  } Bits;
  UINT32 Data;
} DATATCOCOMPOFFSET1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET0_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FB4)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET0_6_MCIO_DDRIO_REG 0x0D024FB4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpupcompoffset : 5;
    /* dq0odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpupcompoffset : 5;
    /* dq1odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpupcompoffset : 5;
    /* dq2odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpupcompoffset : 5;
    /* dq3odtpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpupcompoffset : 5;
    /* dqs0odtpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET1_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FB8)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET1_6_MCIO_DDRIO_REG 0x0D024FB8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0odtpdncompoffset : 5;
    /* dq0odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Odt Comp Value.
     */
    UINT32 dq1odtpdncompoffset : 5;
    /* dq1odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Odt Comp Value.
     */
    UINT32 dq2odtpdncompoffset : 5;
    /* dq2odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Odt Comp Value.
     */
    UINT32 dq3odtpdncompoffset : 5;
    /* dq3odtpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Odt Comp Value.
     */
    UINT32 dqs0odtpdncompoffset : 5;
    /* dqs0odtpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET2_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FBC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET2_6_MCIO_DDRIO_REG 0x0D024FBC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Odt Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpupcompoffset : 5;
    /* dq4odtpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpupcompoffset : 5;
    /* dq5odtpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpupcompoffset : 5;
    /* dq6odtpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpupcompoffset : 5;
    /* dq7odtpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpupcompoffset : 5;
    /* dqs1odtpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Odt Comp Value.
     */
    UINT32 enperbitodt : 1;
    /* enperbitodt - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit ODT comp.
     */
    UINT32 genodtcompdone : 1;
    /* genodtcompdone - Bits[26:26], RW_L, default = 1'b0 
       Generate ODT comp Done.
     */
    UINT32 spare : 5;
    /* spare - Bits[31:27], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATAODTCOMPOFFSET3_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FC0)                                                     */
/* Register default value:              0x00000000                            */
#define DATAODTCOMPOFFSET3_6_MCIO_DDRIO_REG 0x0D024FC0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT ODT Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4odtpdncompoffset : 5;
    /* dq4odtpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Odt Comp Value.
     */
    UINT32 dq5odtpdncompoffset : 5;
    /* dq5odtpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Odt Comp Value.
     */
    UINT32 dq6odtpdncompoffset : 5;
    /* dq6odtpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Odt Comp Value.
     */
    UINT32 dq7odtpdncompoffset : 5;
    /* dq7odtpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Odt Comp Value.
     */
    UINT32 dqs1odtpdncompoffset : 5;
    /* dqs1odtpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Odt Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATAODTCOMPOFFSET3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET0_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FC4)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET0_6_MCIO_DDRIO_REG 0x0D024FC4

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpupcompoffset : 5;
    /* dq0ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpupcompoffset : 5;
    /* dq1ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpupcompoffset : 5;
    /* dq2ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpupcompoffset : 5;
    /* dq3ronpupcompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpupcompoffset : 5;
    /* dqs0ronpupcompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET0_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET1_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FC8)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET1_6_MCIO_DDRIO_REG 0x0D024FC8

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq0ronpdncompoffset : 5;
    /* dq0ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq0 Ron Comp Value.
     */
    UINT32 dq1ronpdncompoffset : 5;
    /* dq1ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq1 Ron Comp Value.
     */
    UINT32 dq2ronpdncompoffset : 5;
    /* dq2ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ2 Ron Comp Value.
     */
    UINT32 dq3ronpdncompoffset : 5;
    /* dq3ronpdncompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-down offset added to DQ3 Ron Comp Value.
     */
    UINT32 dqs0ronpdncompoffset : 5;
    /* dqs0ronpdncompoffset - Bits[24:20], RW_L, default = 4'b0000 
       2s Compliment Pull-down offset added to DQS0 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET1_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET2_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FCC)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET2_6_MCIO_DDRIO_REG 0x0D024FCC

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per Bit Ron Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpupcompoffset : 5;
    /* dq4ronpupcompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpupcompoffset : 5;
    /* dq5ronpupcompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpupcompoffset : 5;
    /* dq6ronpupcompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-up offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpupcompoffset : 5;
    /* dq7ronpupcompoffset - Bits[19:15], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpupcompoffset : 5;
    /* dqs1ronpupcompoffset - Bits[24:20], RW_L, default = 2'b00 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 enperbitron : 1;
    /* enperbitron - Bits[25:25], RW_L, default = 1'b0 
       Enable per bit RON comp.
     */
    UINT32 spare : 6;
    /* spare - Bits[31:26], RW_L, default = 1'b0 
       spare
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET2_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* DATARONCOMPOFFSET3_6_MCIO_DDRIO_REG supported on:                          */
/*       BDX (0x401A4FD0)                                                     */
/* Register default value:              0x00000000                            */
#define DATARONCOMPOFFSET3_6_MCIO_DDRIO_REG 0x0D024FD0

#ifdef BDX_HOST
#ifndef ASM_INC
/* Struct format extracted from XML file BDX\1.20.4.CFG.xml.
 * Per BIT RON Comp offset values.
 */
typedef union {
  struct {
    UINT32 dq4ronpdncompoffset : 5;
    /* dq4ronpdncompoffset - Bits[4:0], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq4 Ron Comp Value.
     */
    UINT32 dq5ronpdncompoffset : 5;
    /* dq5ronpdncompoffset - Bits[9:5], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to Dq5 Ron Comp Value.
     */
    UINT32 dq6ronpdncompoffset : 5;
    /* dq6ronpdncompoffset - Bits[14:10], RW_L, default = 1'b0 
       2s Compliment Pull-down offset added to DQ6 Ron Comp Value.
     */
    UINT32 dq7ronpdncompoffset : 5;
    /* dq7ronpdncompoffset - Bits[19:15], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQ7 Ron Comp Value.
     */
    UINT32 dqs1ronpdncompoffset : 5;
    /* dqs1ronpdncompoffset - Bits[24:20], RW_L, default = 5'd0 
       2s Compliment Pull-up offset added to DQs1 Ron Comp Value.
     */
    UINT32 spare : 7;
    /* spare - Bits[31:25], RW_L, default = 1'b0 
       spare.
     */
  } Bits;
  UINT32 Data;
} DATARONCOMPOFFSET3_6_MCIO_DDRIO_STRUCT;
#endif /* ASM_INC */
#endif /*BDX_HOST */


/* SVID_MCIO_DDRIO_REG supported on:                                          */
/*       IVT_EP (0x2018C02C)                                                  */
/*       IVT_EX (0x201FC02C)                                                  */
/* Register default value:              0x8086                                */
#define SVID_MCIO_DDRIO_REG 0x0D02202C



/* SDID_MCIO_DDRIO_REG supported on:                                          */
/*       IVT_EP (0x2018C02E)                                                  */
/*       IVT_EX (0x201FC02E)                                                  */
/* Register default value:              0x0000                                */
#define SDID_MCIO_DDRIO_REG 0x0D02202E



/* PXPCAP_MCIO_DDRIO_REG supported on:                                        */
/*       IVT_EP (0x4018C040)                                                  */
/*       IVT_EX (0x401FC040)                                                  */
/* Register default value:              0x00910010                            */
#define PXPCAP_MCIO_DDRIO_REG 0x0D024040



/* GDCRCTLCOMPTXA0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C084)                                                  */
/*       IVT_EX (0x401FC084)                                                  */
/* Register default value:              0x1F803820                            */
#define GDCRCTLCOMPTXA0_MCIO_DDRIO_REG 0x0D024084





/* GDCRCOMPOFFSET_RXA0_MCIO_DDRIO_REG supported on:                           */
/*       IVT_EP (0x4018C08C)                                                  */
/*       IVT_EX (0x401FC08C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOFFSET_RXA0_MCIO_DDRIO_REG 0x0D02408C



/* GDCRCTLVREFRXBIASDCDETECTA0_MCIO_DDRIO_REG supported on:                   */
/*       IVT_EP (0x4018C090)                                                  */
/*       IVT_EX (0x401FC090)                                                  */
/* Register default value:              0x00050000                            */
#define GDCRCTLVREFRXBIASDCDETECTA0_MCIO_DDRIO_REG 0x0D024090



/* GDCRCTLPICODE03A0_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C094)                                                  */
/*       IVT_EX (0x401FC094)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE03A0_MCIO_DDRIO_REG 0x0D024094



/* GDCRCTLPICODE47A0_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C098)                                                  */
/*       IVT_EX (0x401FC098)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE47A0_MCIO_DDRIO_REG 0x0D024098



/* GDCRCTLPICODE810A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C09C)                                                  */
/*       IVT_EX (0x401FC09C)                                                  */
/* Register default value:              0x00404040                            */
#define GDCRCTLPICODE810A0_MCIO_DDRIO_REG 0x0D02409C





/* GDCRCTLDEBUGMUXDFTA0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C0A4)                                                  */
/*       IVT_EX (0x401FC0A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLDEBUGMUXDFTA0_MCIO_DDRIO_REG 0x0D0240A4



/* GDCRCTLRANKCNFGXTALK1A0_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018C0A8)                                                  */
/*       IVT_EX (0x401FC0A8)                                                  */
/* Register default value:              0x000003FF                            */
#define GDCRCTLRANKCNFGXTALK1A0_MCIO_DDRIO_REG 0x0D0240A8



/* GDCRCTLXTALK2ANDVMSEODTA0_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018C0AC)                                                  */
/*       IVT_EX (0x401FC0AC)                                                  */
/* Register default value:              0x10000000                            */
#define GDCRCTLXTALK2ANDVMSEODTA0_MCIO_DDRIO_REG 0x0D0240AC



/* GDCRCTLVSSHIA0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C0B0)                                                  */
/*       IVT_EX (0x401FC0B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLVSSHIA0_MCIO_DDRIO_REG 0x0D0240B0



/* GDCRCTLVSSHIDBGCNTLA0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C0B4)                                                  */
/*       IVT_EX (0x401FC0B4)                                                  */
/* Register default value:              0x00000500                            */
#define GDCRCTLVSSHIDBGCNTLA0_MCIO_DDRIO_REG 0x0D0240B4



/* GDCRCTLACIOLBA0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C0B8)                                                  */
/*       IVT_EX (0x401FC0B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLACIOLBA0_MCIO_DDRIO_REG 0x0D0240B8



/* GDCRVMSEERRORA0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C0BC)                                                  */
/*       IVT_EX (0x401FC0BC)                                                  */
/* Register default value:              0x03FFFF00                            */
#define GDCRVMSEERRORA0_MCIO_DDRIO_REG 0x0D0240BC



/* GDCRCTLLOGICDELAYSELECTA0_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018C0C0)                                                  */
/*       IVT_EX (0x401FC0C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLLOGICDELAYSELECTA0_MCIO_DDRIO_REG 0x0D0240C0







/* GDCRTRAININGMODEA0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C108)                                                  */
/*       IVT_EX (0x401FC108)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEA0_MCIO_DDRIO_REG 0x0D024108



/* GDCRTRAININGRESULT1A0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C10C)                                                  */
/*       IVT_EX (0x401FC10C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1A0_MCIO_DDRIO_REG 0x0D02410C



/* GDCRTRAININGRESULT2A0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C110)                                                  */
/*       IVT_EX (0x401FC110)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2A0_MCIO_DDRIO_REG 0x0D024110



/* GDCRDATACOMPBA0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C114)                                                  */
/*       IVT_EX (0x401FC114)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBA0_MCIO_DDRIO_REG 0x0D024114



/* GDCRBUFFCFGA0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C118)                                                  */
/*       IVT_EX (0x401FC118)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGA0_MCIO_DDRIO_REG 0x0D024118



/* GDCRDATADEBUGMUXCFGA0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C11C)                                                  */
/*       IVT_EX (0x401FC11C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGA0_MCIO_DDRIO_REG 0x0D02411C



/* GDCRTXRXBOTRANK0A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C120)                                                  */
/*       IVT_EX (0x401FC120)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0A0_MCIO_DDRIO_REG 0x0D024120



/* GDCRTXRXBOTRANK1A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C124)                                                  */
/*       IVT_EX (0x401FC124)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1A0_MCIO_DDRIO_REG 0x0D024124



/* GDCRTXRXBOTRANK2A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C128)                                                  */
/*       IVT_EX (0x401FC128)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2A0_MCIO_DDRIO_REG 0x0D024128



/* GDCRTXRXBOTRANK3A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C12C)                                                  */
/*       IVT_EX (0x401FC12C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3A0_MCIO_DDRIO_REG 0x0D02412C



/* GDCRTXRXBOTRANK4A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C130)                                                  */
/*       IVT_EX (0x401FC130)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4A0_MCIO_DDRIO_REG 0x0D024130



/* GDCRTXRXBOTRANK5A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C134)                                                  */
/*       IVT_EX (0x401FC134)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5A0_MCIO_DDRIO_REG 0x0D024134



/* GDCRTXRXBOTRANK6A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C138)                                                  */
/*       IVT_EX (0x401FC138)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6A0_MCIO_DDRIO_REG 0x0D024138



/* GDCRTXRXBOTRANK7A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C13C)                                                  */
/*       IVT_EX (0x401FC13C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7A0_MCIO_DDRIO_REG 0x0D02413C



/* GDCRRXTOPRANK0A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C140)                                                  */
/*       IVT_EX (0x401FC140)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0A0_MCIO_DDRIO_REG 0x0D024140



/* GDCRRXTOPRANK1A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C144)                                                  */
/*       IVT_EX (0x401FC144)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1A0_MCIO_DDRIO_REG 0x0D024144



/* GDCRRXTOPRANK2A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C148)                                                  */
/*       IVT_EX (0x401FC148)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2A0_MCIO_DDRIO_REG 0x0D024148



/* GDCRRXTOPRANK3A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C14C)                                                  */
/*       IVT_EX (0x401FC14C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3A0_MCIO_DDRIO_REG 0x0D02414C



/* GDCRRXTOPRANK4A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C150)                                                  */
/*       IVT_EX (0x401FC150)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4A0_MCIO_DDRIO_REG 0x0D024150



/* GDCRRXTOPRANK5A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C154)                                                  */
/*       IVT_EX (0x401FC154)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5A0_MCIO_DDRIO_REG 0x0D024154



/* GDCRRXTOPRANK6A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C158)                                                  */
/*       IVT_EX (0x401FC158)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6A0_MCIO_DDRIO_REG 0x0D024158



/* GDCRRXTOPRANK7A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C15C)                                                  */
/*       IVT_EX (0x401FC15C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7A0_MCIO_DDRIO_REG 0x0D02415C



/* GDCRTXTOPRANK0A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C160)                                                  */
/*       IVT_EX (0x401FC160)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0A0_MCIO_DDRIO_REG 0x0D024160



/* GDCRTXTOPRANK1A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C164)                                                  */
/*       IVT_EX (0x401FC164)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1A0_MCIO_DDRIO_REG 0x0D024164



/* GDCRTXTOPRANK2A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C168)                                                  */
/*       IVT_EX (0x401FC168)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2A0_MCIO_DDRIO_REG 0x0D024168



/* GDCRTXTOPRANK3A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C16C)                                                  */
/*       IVT_EX (0x401FC16C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3A0_MCIO_DDRIO_REG 0x0D02416C



/* GDCRTXTOPRANK4A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C170)                                                  */
/*       IVT_EX (0x401FC170)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4A0_MCIO_DDRIO_REG 0x0D024170



/* GDCRTXTOPRANK5A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C174)                                                  */
/*       IVT_EX (0x401FC174)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5A0_MCIO_DDRIO_REG 0x0D024174



/* GDCRTXTOPRANK6A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C178)                                                  */
/*       IVT_EX (0x401FC178)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6A0_MCIO_DDRIO_REG 0x0D024178



/* GDCRTXTOPRANK7A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C17C)                                                  */
/*       IVT_EX (0x401FC17C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7A0_MCIO_DDRIO_REG 0x0D02417C





/* GDCRTRAININGMODEB0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C188)                                                  */
/*       IVT_EX (0x401FC188)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEB0_MCIO_DDRIO_REG 0x0D024188



/* GDCRTRAININGRESULT1B0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C18C)                                                  */
/*       IVT_EX (0x401FC18C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1B0_MCIO_DDRIO_REG 0x0D02418C



/* GDCRTRAININGRESULT2B0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C190)                                                  */
/*       IVT_EX (0x401FC190)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2B0_MCIO_DDRIO_REG 0x0D024190



/* GDCRDATACOMPBB0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C194)                                                  */
/*       IVT_EX (0x401FC194)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBB0_MCIO_DDRIO_REG 0x0D024194



/* GDCRBUFFCFGB0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C198)                                                  */
/*       IVT_EX (0x401FC198)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGB0_MCIO_DDRIO_REG 0x0D024198



/* GDCRDATADEBUGMUXCFGB0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C19C)                                                  */
/*       IVT_EX (0x401FC19C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGB0_MCIO_DDRIO_REG 0x0D02419C



/* GDCRTXRXBOTRANK0B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1A0)                                                  */
/*       IVT_EX (0x401FC1A0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0B0_MCIO_DDRIO_REG 0x0D0241A0



/* GDCRTXRXBOTRANK1B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1A4)                                                  */
/*       IVT_EX (0x401FC1A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1B0_MCIO_DDRIO_REG 0x0D0241A4



/* GDCRTXRXBOTRANK2B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1A8)                                                  */
/*       IVT_EX (0x401FC1A8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2B0_MCIO_DDRIO_REG 0x0D0241A8



/* GDCRTXRXBOTRANK3B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1AC)                                                  */
/*       IVT_EX (0x401FC1AC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3B0_MCIO_DDRIO_REG 0x0D0241AC



/* GDCRTXRXBOTRANK4B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1B0)                                                  */
/*       IVT_EX (0x401FC1B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4B0_MCIO_DDRIO_REG 0x0D0241B0



/* GDCRTXRXBOTRANK5B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1B4)                                                  */
/*       IVT_EX (0x401FC1B4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5B0_MCIO_DDRIO_REG 0x0D0241B4



/* GDCRTXRXBOTRANK6B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1B8)                                                  */
/*       IVT_EX (0x401FC1B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6B0_MCIO_DDRIO_REG 0x0D0241B8



/* GDCRTXRXBOTRANK7B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C1BC)                                                  */
/*       IVT_EX (0x401FC1BC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7B0_MCIO_DDRIO_REG 0x0D0241BC



/* GDCRRXTOPRANK0B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1C0)                                                  */
/*       IVT_EX (0x401FC1C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0B0_MCIO_DDRIO_REG 0x0D0241C0



/* GDCRRXTOPRANK1B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1C4)                                                  */
/*       IVT_EX (0x401FC1C4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1B0_MCIO_DDRIO_REG 0x0D0241C4



/* GDCRRXTOPRANK2B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1C8)                                                  */
/*       IVT_EX (0x401FC1C8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2B0_MCIO_DDRIO_REG 0x0D0241C8



/* GDCRRXTOPRANK3B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1CC)                                                  */
/*       IVT_EX (0x401FC1CC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3B0_MCIO_DDRIO_REG 0x0D0241CC



/* GDCRRXTOPRANK4B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1D0)                                                  */
/*       IVT_EX (0x401FC1D0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4B0_MCIO_DDRIO_REG 0x0D0241D0



/* GDCRRXTOPRANK5B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1D4)                                                  */
/*       IVT_EX (0x401FC1D4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5B0_MCIO_DDRIO_REG 0x0D0241D4



/* GDCRRXTOPRANK6B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1D8)                                                  */
/*       IVT_EX (0x401FC1D8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6B0_MCIO_DDRIO_REG 0x0D0241D8



/* GDCRRXTOPRANK7B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1DC)                                                  */
/*       IVT_EX (0x401FC1DC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7B0_MCIO_DDRIO_REG 0x0D0241DC



/* GDCRTXTOPRANK0B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1E0)                                                  */
/*       IVT_EX (0x401FC1E0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0B0_MCIO_DDRIO_REG 0x0D0241E0



/* GDCRTXTOPRANK1B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1E4)                                                  */
/*       IVT_EX (0x401FC1E4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1B0_MCIO_DDRIO_REG 0x0D0241E4



/* GDCRTXTOPRANK2B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1E8)                                                  */
/*       IVT_EX (0x401FC1E8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2B0_MCIO_DDRIO_REG 0x0D0241E8



/* GDCRTXTOPRANK3B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1EC)                                                  */
/*       IVT_EX (0x401FC1EC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3B0_MCIO_DDRIO_REG 0x0D0241EC



/* GDCRTXTOPRANK4B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1F0)                                                  */
/*       IVT_EX (0x401FC1F0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4B0_MCIO_DDRIO_REG 0x0D0241F0



/* GDCRTXTOPRANK5B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1F4)                                                  */
/*       IVT_EX (0x401FC1F4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5B0_MCIO_DDRIO_REG 0x0D0241F4



/* GDCRTXTOPRANK6B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1F8)                                                  */
/*       IVT_EX (0x401FC1F8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6B0_MCIO_DDRIO_REG 0x0D0241F8



/* GDCRTXTOPRANK7B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C1FC)                                                  */
/*       IVT_EX (0x401FC1FC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7B0_MCIO_DDRIO_REG 0x0D0241FC





/* GDCRTRAININGMODEC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C208)                                                  */
/*       IVT_EX (0x401FC208)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEC0_MCIO_DDRIO_REG 0x0D024208



/* GDCRTRAININGRESULT1C0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C20C)                                                  */
/*       IVT_EX (0x401FC20C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1C0_MCIO_DDRIO_REG 0x0D02420C



/* GDCRTRAININGRESULT2C0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C210)                                                  */
/*       IVT_EX (0x401FC210)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2C0_MCIO_DDRIO_REG 0x0D024210



/* GDCRDATACOMPBC0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C214)                                                  */
/*       IVT_EX (0x401FC214)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBC0_MCIO_DDRIO_REG 0x0D024214



/* GDCRBUFFCFGC0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C218)                                                  */
/*       IVT_EX (0x401FC218)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGC0_MCIO_DDRIO_REG 0x0D024218



/* GDCRDATADEBUGMUXCFGC0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C21C)                                                  */
/*       IVT_EX (0x401FC21C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGC0_MCIO_DDRIO_REG 0x0D02421C



/* GDCRTXRXBOTRANK0C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C220)                                                  */
/*       IVT_EX (0x401FC220)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0C0_MCIO_DDRIO_REG 0x0D024220



/* GDCRTXRXBOTRANK1C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C224)                                                  */
/*       IVT_EX (0x401FC224)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1C0_MCIO_DDRIO_REG 0x0D024224



/* GDCRTXRXBOTRANK2C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C228)                                                  */
/*       IVT_EX (0x401FC228)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2C0_MCIO_DDRIO_REG 0x0D024228



/* GDCRTXRXBOTRANK3C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C22C)                                                  */
/*       IVT_EX (0x401FC22C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3C0_MCIO_DDRIO_REG 0x0D02422C



/* GDCRTXRXBOTRANK4C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C230)                                                  */
/*       IVT_EX (0x401FC230)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4C0_MCIO_DDRIO_REG 0x0D024230



/* GDCRTXRXBOTRANK5C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C234)                                                  */
/*       IVT_EX (0x401FC234)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5C0_MCIO_DDRIO_REG 0x0D024234



/* GDCRTXRXBOTRANK6C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C238)                                                  */
/*       IVT_EX (0x401FC238)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6C0_MCIO_DDRIO_REG 0x0D024238



/* GDCRTXRXBOTRANK7C0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C23C)                                                  */
/*       IVT_EX (0x401FC23C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7C0_MCIO_DDRIO_REG 0x0D02423C



/* GDCRRXTOPRANK0C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C240)                                                  */
/*       IVT_EX (0x401FC240)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0C0_MCIO_DDRIO_REG 0x0D024240



/* GDCRRXTOPRANK1C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C244)                                                  */
/*       IVT_EX (0x401FC244)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1C0_MCIO_DDRIO_REG 0x0D024244



/* GDCRRXTOPRANK2C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C248)                                                  */
/*       IVT_EX (0x401FC248)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2C0_MCIO_DDRIO_REG 0x0D024248



/* GDCRRXTOPRANK3C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C24C)                                                  */
/*       IVT_EX (0x401FC24C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3C0_MCIO_DDRIO_REG 0x0D02424C



/* GDCRRXTOPRANK4C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C250)                                                  */
/*       IVT_EX (0x401FC250)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4C0_MCIO_DDRIO_REG 0x0D024250



/* GDCRRXTOPRANK5C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C254)                                                  */
/*       IVT_EX (0x401FC254)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5C0_MCIO_DDRIO_REG 0x0D024254



/* GDCRRXTOPRANK6C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C258)                                                  */
/*       IVT_EX (0x401FC258)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6C0_MCIO_DDRIO_REG 0x0D024258



/* GDCRRXTOPRANK7C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C25C)                                                  */
/*       IVT_EX (0x401FC25C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7C0_MCIO_DDRIO_REG 0x0D02425C



/* GDCRTXTOPRANK0C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C260)                                                  */
/*       IVT_EX (0x401FC260)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0C0_MCIO_DDRIO_REG 0x0D024260



/* GDCRTXTOPRANK1C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C264)                                                  */
/*       IVT_EX (0x401FC264)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1C0_MCIO_DDRIO_REG 0x0D024264



/* GDCRTXTOPRANK2C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C268)                                                  */
/*       IVT_EX (0x401FC268)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2C0_MCIO_DDRIO_REG 0x0D024268



/* GDCRTXTOPRANK3C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C26C)                                                  */
/*       IVT_EX (0x401FC26C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3C0_MCIO_DDRIO_REG 0x0D02426C



/* GDCRTXTOPRANK4C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C270)                                                  */
/*       IVT_EX (0x401FC270)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4C0_MCIO_DDRIO_REG 0x0D024270



/* GDCRTXTOPRANK5C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C274)                                                  */
/*       IVT_EX (0x401FC274)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5C0_MCIO_DDRIO_REG 0x0D024274



/* GDCRTXTOPRANK6C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C278)                                                  */
/*       IVT_EX (0x401FC278)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6C0_MCIO_DDRIO_REG 0x0D024278



/* GDCRTXTOPRANK7C0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C27C)                                                  */
/*       IVT_EX (0x401FC27C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7C0_MCIO_DDRIO_REG 0x0D02427C





/* GDCRTRAININGMODED0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C288)                                                  */
/*       IVT_EX (0x401FC288)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODED0_MCIO_DDRIO_REG 0x0D024288



/* GDCRTRAININGRESULT1D0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C28C)                                                  */
/*       IVT_EX (0x401FC28C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1D0_MCIO_DDRIO_REG 0x0D02428C



/* GDCRTRAININGRESULT2D0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C290)                                                  */
/*       IVT_EX (0x401FC290)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2D0_MCIO_DDRIO_REG 0x0D024290



/* GDCRDATACOMPBD0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C294)                                                  */
/*       IVT_EX (0x401FC294)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBD0_MCIO_DDRIO_REG 0x0D024294



/* GDCRBUFFCFGD0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C298)                                                  */
/*       IVT_EX (0x401FC298)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGD0_MCIO_DDRIO_REG 0x0D024298



/* GDCRDATADEBUGMUXCFGD0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C29C)                                                  */
/*       IVT_EX (0x401FC29C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGD0_MCIO_DDRIO_REG 0x0D02429C



/* GDCRTXRXBOTRANK0D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2A0)                                                  */
/*       IVT_EX (0x401FC2A0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0D0_MCIO_DDRIO_REG 0x0D0242A0



/* GDCRTXRXBOTRANK1D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2A4)                                                  */
/*       IVT_EX (0x401FC2A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1D0_MCIO_DDRIO_REG 0x0D0242A4



/* GDCRTXRXBOTRANK2D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2A8)                                                  */
/*       IVT_EX (0x401FC2A8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2D0_MCIO_DDRIO_REG 0x0D0242A8



/* GDCRTXRXBOTRANK3D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2AC)                                                  */
/*       IVT_EX (0x401FC2AC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3D0_MCIO_DDRIO_REG 0x0D0242AC



/* GDCRTXRXBOTRANK4D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2B0)                                                  */
/*       IVT_EX (0x401FC2B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4D0_MCIO_DDRIO_REG 0x0D0242B0



/* GDCRTXRXBOTRANK5D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2B4)                                                  */
/*       IVT_EX (0x401FC2B4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5D0_MCIO_DDRIO_REG 0x0D0242B4



/* GDCRTXRXBOTRANK6D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2B8)                                                  */
/*       IVT_EX (0x401FC2B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6D0_MCIO_DDRIO_REG 0x0D0242B8



/* GDCRTXRXBOTRANK7D0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C2BC)                                                  */
/*       IVT_EX (0x401FC2BC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7D0_MCIO_DDRIO_REG 0x0D0242BC



/* GDCRRXTOPRANK0D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2C0)                                                  */
/*       IVT_EX (0x401FC2C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0D0_MCIO_DDRIO_REG 0x0D0242C0



/* GDCRRXTOPRANK1D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2C4)                                                  */
/*       IVT_EX (0x401FC2C4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1D0_MCIO_DDRIO_REG 0x0D0242C4



/* GDCRRXTOPRANK2D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2C8)                                                  */
/*       IVT_EX (0x401FC2C8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2D0_MCIO_DDRIO_REG 0x0D0242C8



/* GDCRRXTOPRANK3D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2CC)                                                  */
/*       IVT_EX (0x401FC2CC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3D0_MCIO_DDRIO_REG 0x0D0242CC



/* GDCRRXTOPRANK4D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2D0)                                                  */
/*       IVT_EX (0x401FC2D0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4D0_MCIO_DDRIO_REG 0x0D0242D0



/* GDCRRXTOPRANK5D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2D4)                                                  */
/*       IVT_EX (0x401FC2D4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5D0_MCIO_DDRIO_REG 0x0D0242D4



/* GDCRRXTOPRANK6D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2D8)                                                  */
/*       IVT_EX (0x401FC2D8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6D0_MCIO_DDRIO_REG 0x0D0242D8



/* GDCRRXTOPRANK7D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2DC)                                                  */
/*       IVT_EX (0x401FC2DC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7D0_MCIO_DDRIO_REG 0x0D0242DC



/* GDCRTXTOPRANK0D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2E0)                                                  */
/*       IVT_EX (0x401FC2E0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0D0_MCIO_DDRIO_REG 0x0D0242E0



/* GDCRTXTOPRANK1D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2E4)                                                  */
/*       IVT_EX (0x401FC2E4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1D0_MCIO_DDRIO_REG 0x0D0242E4



/* GDCRTXTOPRANK2D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2E8)                                                  */
/*       IVT_EX (0x401FC2E8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2D0_MCIO_DDRIO_REG 0x0D0242E8



/* GDCRTXTOPRANK3D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2EC)                                                  */
/*       IVT_EX (0x401FC2EC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3D0_MCIO_DDRIO_REG 0x0D0242EC



/* GDCRTXTOPRANK4D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2F0)                                                  */
/*       IVT_EX (0x401FC2F0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4D0_MCIO_DDRIO_REG 0x0D0242F0



/* GDCRTXTOPRANK5D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2F4)                                                  */
/*       IVT_EX (0x401FC2F4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5D0_MCIO_DDRIO_REG 0x0D0242F4



/* GDCRTXTOPRANK6D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2F8)                                                  */
/*       IVT_EX (0x401FC2F8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6D0_MCIO_DDRIO_REG 0x0D0242F8



/* GDCRTXTOPRANK7D0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C2FC)                                                  */
/*       IVT_EX (0x401FC2FC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7D0_MCIO_DDRIO_REG 0x0D0242FC







/* GDCRCMDVREFA0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C30C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDVREFA0_MCIO_DDRIO_REG 0x0D02430C



/* GDCRCMDPICODEA0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C310)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCMDPICODEA0_MCIO_DDRIO_REG 0x0D024310



/* GDCRCMDLOGICPHASEDELAYA0_MCIO_DDRIO_REG supported on:                      */
/*       IVT_EP (0x4018C314)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDLOGICPHASEDELAYA0_MCIO_DDRIO_REG 0x0D024314



/* GDCRCMDDEBUGMUXDFTA0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C318)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDDEBUGMUXDFTA0_MCIO_DDRIO_REG 0x0D024318





/* GDCRRANKCFGA0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x2018C320)                                                  */
/* Register default value:              0xF3FF                                */
#define GDCRRANKCFGA0_MCIO_DDRIO_REG 0x0D022320



/* GDCRCMDPICODE2A0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C324)                                                  */
/* Register default value:              0x00004040                            */
#define GDCRCMDPICODE2A0_MCIO_DDRIO_REG 0x0D024324





/* GDCRCKCOMP2A0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C388)                                                  */
/*       IVT_EX (0x401FC388)                                                  */
/* Register default value:              0x00010491                            */
#define GDCRCKCOMP2A0_MCIO_DDRIO_REG 0x0D024388



/* GDCRCKRANKUSEDA0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x2018C38C)                                                  */
/*       IVT_EX (0x201FC38C)                                                  */
/* Register default value:              0x0033                                */
#define GDCRCKRANKUSEDA0_MCIO_DDRIO_REG 0x0D02238C



/* GDCRCKPICODE0A0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C390)                                                  */
/*       IVT_EX (0x401FC390)                                                  */
/* Register default value:              0x03000000                            */
#define GDCRCKPICODE0A0_MCIO_DDRIO_REG 0x0D024390



/* GDCRCKPICODE1A0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C394)                                                  */
/*       IVT_EX (0x401FC394)                                                  */
/* Register default value:              0x03000000                            */
#define GDCRCKPICODE1A0_MCIO_DDRIO_REG 0x0D024394



/* GDCRCKLOGICDELAYA0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x2018C398)                                                  */
/*       IVT_EX (0x201FC398)                                                  */
/* Register default value:              0x0000                                */
#define GDCRCKLOGICDELAYA0_MCIO_DDRIO_REG 0x0D022398







/* GDCRCLKDLLDFTA0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x2018C3A4)                                                  */
/*       IVT_EX (0x201FC3A4)                                                  */
/* Register default value:              0x0000                                */
#define GDCRCLKDLLDFTA0_MCIO_DDRIO_REG 0x0D0223A4



/* GDCRCLKVSSHIA0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C3A8)                                                  */
/*       IVT_EX (0x401FC3A8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCLKVSSHIA0_MCIO_DDRIO_REG 0x0D0243A8



/* GDCRCLKVMCFGA0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x1018C3AC)                                                  */
/*       IVT_EX (0x101FC3AC)                                                  */
/* Register default value:              0x00                                  */
#define GDCRCLKVMCFGA0_MCIO_DDRIO_REG 0x0D0213AC









/* GDCRCOMPOVR2A0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C408)                                                  */
/*       IVT_EX (0x401FC408)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR2A0_MCIO_DDRIO_REG 0x0D024408



/* GDCRCOMPOVR3A0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C40C)                                                  */
/*       IVT_EX (0x401FC40C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR3A0_MCIO_DDRIO_REG 0x0D02440C



/* GDCRCOMPOVR4A0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C410)                                                  */
/*       IVT_EX (0x401FC410)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR4A0_MCIO_DDRIO_REG 0x0D024410



/* GDCRCOMPOVR5A0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C414)                                                  */
/*       IVT_EX (0x401FC414)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR5A0_MCIO_DDRIO_REG 0x0D024414



/* GDCRCOMPOVR6A0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C418)                                                  */
/*       IVT_EX (0x401FC418)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR6A0_MCIO_DDRIO_REG 0x0D024418



/* GDCRCOMPOVROFST1A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C41C)                                                  */
/*       IVT_EX (0x401FC41C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVROFST1A0_MCIO_DDRIO_REG 0x0D02441C



/* GDCRCOMPOVROFST2A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C420)                                                  */
/*       IVT_EX (0x401FC420)                                                  */
/* Register default value:              0x03F00000                            */
#define GDCRCOMPOVROFST2A0_MCIO_DDRIO_REG 0x0D024420



/* GDCRCOMPOVROFST3A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C424)                                                  */
/*       IVT_EX (0x401FC424)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVROFST3A0_MCIO_DDRIO_REG 0x0D024424



/* GDCRCOMPOVROFST4A0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C428)                                                  */
/*       IVT_EX (0x401FC428)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVROFST4A0_MCIO_DDRIO_REG 0x0D024428



/* GDCRCOMPCFGSPDA0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C42C)                                                  */
/*       IVT_EX (0x401FC42C)                                                  */
/* Register default value:              0x00010B5A                            */
#define GDCRCOMPCFGSPDA0_MCIO_DDRIO_REG 0x0D02442C







/* GDCRMSCCTLA0_MCIO_DDRIO_REG supported on:                                  */
/*       IVT_EP (0x4018C43C)                                                  */
/*       IVT_EX (0x401FC43C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRMSCCTLA0_MCIO_DDRIO_REG 0x0D02443C







/* GDCRCMDVREFB0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C48C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDVREFB0_MCIO_DDRIO_REG 0x0D02448C



/* GDCRCMDPICODEB0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C490)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCMDPICODEB0_MCIO_DDRIO_REG 0x0D024490



/* GDCRCMDLOGICPHASEDELAYB0_MCIO_DDRIO_REG supported on:                      */
/*       IVT_EP (0x4018C494)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDLOGICPHASEDELAYB0_MCIO_DDRIO_REG 0x0D024494



/* GDCRCMDDEBUGMUXDFTB0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C498)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDDEBUGMUXDFTB0_MCIO_DDRIO_REG 0x0D024498





/* GDCRRANKCFGB0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x2018C4A0)                                                  */
/* Register default value:              0xF3FF                                */
#define GDCRRANKCFGB0_MCIO_DDRIO_REG 0x0D0224A0



/* GDCRCMDPICODE2B0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C4A4)                                                  */
/* Register default value:              0x00004040                            */
#define GDCRCMDPICODE2B0_MCIO_DDRIO_REG 0x0D0244A4





/* GDCRTRAININGMODEE0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C508)                                                  */
/*       IVT_EX (0x401FC508)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEE0_MCIO_DDRIO_REG 0x0D024508



/* GDCRTRAININGRESULT1E0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C50C)                                                  */
/*       IVT_EX (0x401FC50C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1E0_MCIO_DDRIO_REG 0x0D02450C



/* GDCRTRAININGRESULT2E0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C510)                                                  */
/*       IVT_EX (0x401FC510)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2E0_MCIO_DDRIO_REG 0x0D024510



/* GDCRDATACOMPBE0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C514)                                                  */
/*       IVT_EX (0x401FC514)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBE0_MCIO_DDRIO_REG 0x0D024514



/* GDCRBUFFCFGE0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C518)                                                  */
/*       IVT_EX (0x401FC518)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGE0_MCIO_DDRIO_REG 0x0D024518



/* GDCRDATADEBUGMUXCFGE0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C51C)                                                  */
/*       IVT_EX (0x401FC51C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGE0_MCIO_DDRIO_REG 0x0D02451C



/* GDCRTXRXBOTRANK0E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C520)                                                  */
/*       IVT_EX (0x401FC520)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0E0_MCIO_DDRIO_REG 0x0D024520



/* GDCRTXRXBOTRANK1E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C524)                                                  */
/*       IVT_EX (0x401FC524)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1E0_MCIO_DDRIO_REG 0x0D024524



/* GDCRTXRXBOTRANK2E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C528)                                                  */
/*       IVT_EX (0x401FC528)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2E0_MCIO_DDRIO_REG 0x0D024528



/* GDCRTXRXBOTRANK3E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C52C)                                                  */
/*       IVT_EX (0x401FC52C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3E0_MCIO_DDRIO_REG 0x0D02452C



/* GDCRTXRXBOTRANK4E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C530)                                                  */
/*       IVT_EX (0x401FC530)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4E0_MCIO_DDRIO_REG 0x0D024530



/* GDCRTXRXBOTRANK5E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C534)                                                  */
/*       IVT_EX (0x401FC534)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5E0_MCIO_DDRIO_REG 0x0D024534



/* GDCRTXRXBOTRANK6E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C538)                                                  */
/*       IVT_EX (0x401FC538)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6E0_MCIO_DDRIO_REG 0x0D024538



/* GDCRTXRXBOTRANK7E0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C53C)                                                  */
/*       IVT_EX (0x401FC53C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7E0_MCIO_DDRIO_REG 0x0D02453C



/* GDCRRXTOPRANK0E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C540)                                                  */
/*       IVT_EX (0x401FC540)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0E0_MCIO_DDRIO_REG 0x0D024540



/* GDCRRXTOPRANK1E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C544)                                                  */
/*       IVT_EX (0x401FC544)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1E0_MCIO_DDRIO_REG 0x0D024544



/* GDCRRXTOPRANK2E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C548)                                                  */
/*       IVT_EX (0x401FC548)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2E0_MCIO_DDRIO_REG 0x0D024548



/* GDCRRXTOPRANK3E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C54C)                                                  */
/*       IVT_EX (0x401FC54C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3E0_MCIO_DDRIO_REG 0x0D02454C



/* GDCRRXTOPRANK4E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C550)                                                  */
/*       IVT_EX (0x401FC550)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4E0_MCIO_DDRIO_REG 0x0D024550



/* GDCRRXTOPRANK5E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C554)                                                  */
/*       IVT_EX (0x401FC554)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5E0_MCIO_DDRIO_REG 0x0D024554



/* GDCRRXTOPRANK6E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C558)                                                  */
/*       IVT_EX (0x401FC558)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6E0_MCIO_DDRIO_REG 0x0D024558



/* GDCRRXTOPRANK7E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C55C)                                                  */
/*       IVT_EX (0x401FC55C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7E0_MCIO_DDRIO_REG 0x0D02455C



/* GDCRTXTOPRANK0E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C560)                                                  */
/*       IVT_EX (0x401FC560)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0E0_MCIO_DDRIO_REG 0x0D024560



/* GDCRTXTOPRANK1E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C564)                                                  */
/*       IVT_EX (0x401FC564)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1E0_MCIO_DDRIO_REG 0x0D024564



/* GDCRTXTOPRANK2E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C568)                                                  */
/*       IVT_EX (0x401FC568)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2E0_MCIO_DDRIO_REG 0x0D024568



/* GDCRTXTOPRANK3E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C56C)                                                  */
/*       IVT_EX (0x401FC56C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3E0_MCIO_DDRIO_REG 0x0D02456C



/* GDCRTXTOPRANK4E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C570)                                                  */
/*       IVT_EX (0x401FC570)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4E0_MCIO_DDRIO_REG 0x0D024570



/* GDCRTXTOPRANK5E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C574)                                                  */
/*       IVT_EX (0x401FC574)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5E0_MCIO_DDRIO_REG 0x0D024574



/* GDCRTXTOPRANK6E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C578)                                                  */
/*       IVT_EX (0x401FC578)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6E0_MCIO_DDRIO_REG 0x0D024578



/* GDCRTXTOPRANK7E0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C57C)                                                  */
/*       IVT_EX (0x401FC57C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7E0_MCIO_DDRIO_REG 0x0D02457C



/* GDCRCTLCOMPTXB0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C584)                                                  */
/*       IVT_EX (0x401FC584)                                                  */
/* Register default value:              0x1F803820                            */
#define GDCRCTLCOMPTXB0_MCIO_DDRIO_REG 0x0D024584





/* GDCRCOMPOFFSET_RXB0_MCIO_DDRIO_REG supported on:                           */
/*       IVT_EP (0x4018C58C)                                                  */
/*       IVT_EX (0x401FC58C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOFFSET_RXB0_MCIO_DDRIO_REG 0x0D02458C



/* GDCRCTLVREFRXBIASDCDETECTB0_MCIO_DDRIO_REG supported on:                   */
/*       IVT_EP (0x4018C590)                                                  */
/*       IVT_EX (0x401FC590)                                                  */
/* Register default value:              0x00050000                            */
#define GDCRCTLVREFRXBIASDCDETECTB0_MCIO_DDRIO_REG 0x0D024590



/* GDCRCTLPICODE03B0_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C594)                                                  */
/*       IVT_EX (0x401FC594)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE03B0_MCIO_DDRIO_REG 0x0D024594



/* GDCRCTLPICODE47B0_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C598)                                                  */
/*       IVT_EX (0x401FC598)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE47B0_MCIO_DDRIO_REG 0x0D024598



/* GDCRCTLPICODE810B0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C59C)                                                  */
/*       IVT_EX (0x401FC59C)                                                  */
/* Register default value:              0x00404040                            */
#define GDCRCTLPICODE810B0_MCIO_DDRIO_REG 0x0D02459C





/* GDCRCTLDEBUGMUXDFTB0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C5A4)                                                  */
/*       IVT_EX (0x401FC5A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLDEBUGMUXDFTB0_MCIO_DDRIO_REG 0x0D0245A4



/* GDCRCTLRANKCNFGXTALK1B0_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018C5A8)                                                  */
/*       IVT_EX (0x401FC5A8)                                                  */
/* Register default value:              0x000003FF                            */
#define GDCRCTLRANKCNFGXTALK1B0_MCIO_DDRIO_REG 0x0D0245A8



/* GDCRCTLXTALK2ANDVMSEODTB0_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018C5AC)                                                  */
/*       IVT_EX (0x401FC5AC)                                                  */
/* Register default value:              0x10000000                            */
#define GDCRCTLXTALK2ANDVMSEODTB0_MCIO_DDRIO_REG 0x0D0245AC



/* GDCRCTLVSSHIB0_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C5B0)                                                  */
/*       IVT_EX (0x401FC5B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLVSSHIB0_MCIO_DDRIO_REG 0x0D0245B0



/* GDCRCTLVSSHIDBGCNTLB0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C5B4)                                                  */
/*       IVT_EX (0x401FC5B4)                                                  */
/* Register default value:              0x00000500                            */
#define GDCRCTLVSSHIDBGCNTLB0_MCIO_DDRIO_REG 0x0D0245B4



/* GDCRCTLACIOLBB0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C5B8)                                                  */
/*       IVT_EX (0x401FC5B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLACIOLBB0_MCIO_DDRIO_REG 0x0D0245B8



/* GDCRVMSEERRORB0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C5BC)                                                  */
/*       IVT_EX (0x401FC5BC)                                                  */
/* Register default value:              0x03FFFF00                            */
#define GDCRVMSEERRORB0_MCIO_DDRIO_REG 0x0D0245BC



/* GDCRCTLLOGICDELAYSELECTB0_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018C5C0)                                                  */
/*       IVT_EX (0x401FC5C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLLOGICDELAYSELECTB0_MCIO_DDRIO_REG 0x0D0245C0







/* GDCRTRAININGMODEF0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C608)                                                  */
/*       IVT_EX (0x401FC608)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEF0_MCIO_DDRIO_REG 0x0D024608



/* GDCRTRAININGRESULT1F0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C60C)                                                  */
/*       IVT_EX (0x401FC60C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1F0_MCIO_DDRIO_REG 0x0D02460C



/* GDCRTRAININGRESULT2F0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C610)                                                  */
/*       IVT_EX (0x401FC610)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2F0_MCIO_DDRIO_REG 0x0D024610



/* GDCRDATACOMPBF0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C614)                                                  */
/*       IVT_EX (0x401FC614)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBF0_MCIO_DDRIO_REG 0x0D024614



/* GDCRBUFFCFGF0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C618)                                                  */
/*       IVT_EX (0x401FC618)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGF0_MCIO_DDRIO_REG 0x0D024618



/* GDCRDATADEBUGMUXCFGF0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C61C)                                                  */
/*       IVT_EX (0x401FC61C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGF0_MCIO_DDRIO_REG 0x0D02461C



/* GDCRTXRXBOTRANK0F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C620)                                                  */
/*       IVT_EX (0x401FC620)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0F0_MCIO_DDRIO_REG 0x0D024620



/* GDCRTXRXBOTRANK1F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C624)                                                  */
/*       IVT_EX (0x401FC624)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1F0_MCIO_DDRIO_REG 0x0D024624



/* GDCRTXRXBOTRANK2F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C628)                                                  */
/*       IVT_EX (0x401FC628)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2F0_MCIO_DDRIO_REG 0x0D024628



/* GDCRTXRXBOTRANK3F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C62C)                                                  */
/*       IVT_EX (0x401FC62C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3F0_MCIO_DDRIO_REG 0x0D02462C



/* GDCRTXRXBOTRANK4F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C630)                                                  */
/*       IVT_EX (0x401FC630)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4F0_MCIO_DDRIO_REG 0x0D024630



/* GDCRTXRXBOTRANK5F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C634)                                                  */
/*       IVT_EX (0x401FC634)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5F0_MCIO_DDRIO_REG 0x0D024634



/* GDCRTXRXBOTRANK6F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C638)                                                  */
/*       IVT_EX (0x401FC638)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6F0_MCIO_DDRIO_REG 0x0D024638



/* GDCRTXRXBOTRANK7F0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C63C)                                                  */
/*       IVT_EX (0x401FC63C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7F0_MCIO_DDRIO_REG 0x0D02463C



/* GDCRRXTOPRANK0F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C640)                                                  */
/*       IVT_EX (0x401FC640)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0F0_MCIO_DDRIO_REG 0x0D024640



/* GDCRRXTOPRANK1F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C644)                                                  */
/*       IVT_EX (0x401FC644)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1F0_MCIO_DDRIO_REG 0x0D024644



/* GDCRRXTOPRANK2F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C648)                                                  */
/*       IVT_EX (0x401FC648)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2F0_MCIO_DDRIO_REG 0x0D024648



/* GDCRRXTOPRANK3F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C64C)                                                  */
/*       IVT_EX (0x401FC64C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3F0_MCIO_DDRIO_REG 0x0D02464C



/* GDCRRXTOPRANK4F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C650)                                                  */
/*       IVT_EX (0x401FC650)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4F0_MCIO_DDRIO_REG 0x0D024650



/* GDCRRXTOPRANK5F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C654)                                                  */
/*       IVT_EX (0x401FC654)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5F0_MCIO_DDRIO_REG 0x0D024654



/* GDCRRXTOPRANK6F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C658)                                                  */
/*       IVT_EX (0x401FC658)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6F0_MCIO_DDRIO_REG 0x0D024658



/* GDCRRXTOPRANK7F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C65C)                                                  */
/*       IVT_EX (0x401FC65C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7F0_MCIO_DDRIO_REG 0x0D02465C



/* GDCRTXTOPRANK0F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C660)                                                  */
/*       IVT_EX (0x401FC660)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0F0_MCIO_DDRIO_REG 0x0D024660



/* GDCRTXTOPRANK1F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C664)                                                  */
/*       IVT_EX (0x401FC664)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1F0_MCIO_DDRIO_REG 0x0D024664



/* GDCRTXTOPRANK2F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C668)                                                  */
/*       IVT_EX (0x401FC668)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2F0_MCIO_DDRIO_REG 0x0D024668



/* GDCRTXTOPRANK3F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C66C)                                                  */
/*       IVT_EX (0x401FC66C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3F0_MCIO_DDRIO_REG 0x0D02466C



/* GDCRTXTOPRANK4F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C670)                                                  */
/*       IVT_EX (0x401FC670)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4F0_MCIO_DDRIO_REG 0x0D024670



/* GDCRTXTOPRANK5F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C674)                                                  */
/*       IVT_EX (0x401FC674)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5F0_MCIO_DDRIO_REG 0x0D024674



/* GDCRTXTOPRANK6F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C678)                                                  */
/*       IVT_EX (0x401FC678)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6F0_MCIO_DDRIO_REG 0x0D024678



/* GDCRTXTOPRANK7F0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C67C)                                                  */
/*       IVT_EX (0x401FC67C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7F0_MCIO_DDRIO_REG 0x0D02467C





/* GDCRTRAININGMODEG0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C688)                                                  */
/*       IVT_EX (0x401FC688)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEG0_MCIO_DDRIO_REG 0x0D024688



/* GDCRTRAININGRESULT1G0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C68C)                                                  */
/*       IVT_EX (0x401FC68C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1G0_MCIO_DDRIO_REG 0x0D02468C



/* GDCRTRAININGRESULT2G0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C690)                                                  */
/*       IVT_EX (0x401FC690)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2G0_MCIO_DDRIO_REG 0x0D024690



/* GDCRDATACOMPBG0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C694)                                                  */
/*       IVT_EX (0x401FC694)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBG0_MCIO_DDRIO_REG 0x0D024694



/* GDCRBUFFCFGG0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C698)                                                  */
/*       IVT_EX (0x401FC698)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGG0_MCIO_DDRIO_REG 0x0D024698



/* GDCRDATADEBUGMUXCFGG0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C69C)                                                  */
/*       IVT_EX (0x401FC69C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGG0_MCIO_DDRIO_REG 0x0D02469C



/* GDCRTXRXBOTRANK0G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6A0)                                                  */
/*       IVT_EX (0x401FC6A0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0G0_MCIO_DDRIO_REG 0x0D0246A0



/* GDCRTXRXBOTRANK1G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6A4)                                                  */
/*       IVT_EX (0x401FC6A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1G0_MCIO_DDRIO_REG 0x0D0246A4



/* GDCRTXRXBOTRANK2G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6A8)                                                  */
/*       IVT_EX (0x401FC6A8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2G0_MCIO_DDRIO_REG 0x0D0246A8



/* GDCRTXRXBOTRANK3G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6AC)                                                  */
/*       IVT_EX (0x401FC6AC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3G0_MCIO_DDRIO_REG 0x0D0246AC



/* GDCRTXRXBOTRANK4G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6B0)                                                  */
/*       IVT_EX (0x401FC6B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4G0_MCIO_DDRIO_REG 0x0D0246B0



/* GDCRTXRXBOTRANK5G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6B4)                                                  */
/*       IVT_EX (0x401FC6B4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5G0_MCIO_DDRIO_REG 0x0D0246B4



/* GDCRTXRXBOTRANK6G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6B8)                                                  */
/*       IVT_EX (0x401FC6B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6G0_MCIO_DDRIO_REG 0x0D0246B8



/* GDCRTXRXBOTRANK7G0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C6BC)                                                  */
/*       IVT_EX (0x401FC6BC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7G0_MCIO_DDRIO_REG 0x0D0246BC



/* GDCRRXTOPRANK0G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6C0)                                                  */
/*       IVT_EX (0x401FC6C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0G0_MCIO_DDRIO_REG 0x0D0246C0



/* GDCRRXTOPRANK1G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6C4)                                                  */
/*       IVT_EX (0x401FC6C4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1G0_MCIO_DDRIO_REG 0x0D0246C4



/* GDCRRXTOPRANK2G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6C8)                                                  */
/*       IVT_EX (0x401FC6C8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2G0_MCIO_DDRIO_REG 0x0D0246C8



/* GDCRRXTOPRANK3G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6CC)                                                  */
/*       IVT_EX (0x401FC6CC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3G0_MCIO_DDRIO_REG 0x0D0246CC



/* GDCRRXTOPRANK4G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6D0)                                                  */
/*       IVT_EX (0x401FC6D0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4G0_MCIO_DDRIO_REG 0x0D0246D0



/* GDCRRXTOPRANK5G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6D4)                                                  */
/*       IVT_EX (0x401FC6D4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5G0_MCIO_DDRIO_REG 0x0D0246D4



/* GDCRRXTOPRANK6G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6D8)                                                  */
/*       IVT_EX (0x401FC6D8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6G0_MCIO_DDRIO_REG 0x0D0246D8



/* GDCRRXTOPRANK7G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6DC)                                                  */
/*       IVT_EX (0x401FC6DC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7G0_MCIO_DDRIO_REG 0x0D0246DC



/* GDCRTXTOPRANK0G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6E0)                                                  */
/*       IVT_EX (0x401FC6E0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0G0_MCIO_DDRIO_REG 0x0D0246E0



/* GDCRTXTOPRANK1G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6E4)                                                  */
/*       IVT_EX (0x401FC6E4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1G0_MCIO_DDRIO_REG 0x0D0246E4



/* GDCRTXTOPRANK2G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6E8)                                                  */
/*       IVT_EX (0x401FC6E8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2G0_MCIO_DDRIO_REG 0x0D0246E8



/* GDCRTXTOPRANK3G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6EC)                                                  */
/*       IVT_EX (0x401FC6EC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3G0_MCIO_DDRIO_REG 0x0D0246EC



/* GDCRTXTOPRANK4G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6F0)                                                  */
/*       IVT_EX (0x401FC6F0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4G0_MCIO_DDRIO_REG 0x0D0246F0



/* GDCRTXTOPRANK5G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6F4)                                                  */
/*       IVT_EX (0x401FC6F4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5G0_MCIO_DDRIO_REG 0x0D0246F4



/* GDCRTXTOPRANK6G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6F8)                                                  */
/*       IVT_EX (0x401FC6F8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6G0_MCIO_DDRIO_REG 0x0D0246F8



/* GDCRTXTOPRANK7G0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C6FC)                                                  */
/*       IVT_EX (0x401FC6FC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7G0_MCIO_DDRIO_REG 0x0D0246FC





/* GDCRTRAININGMODEH0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C708)                                                  */
/*       IVT_EX (0x401FC708)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEH0_MCIO_DDRIO_REG 0x0D024708



/* GDCRTRAININGRESULT1H0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C70C)                                                  */
/*       IVT_EX (0x401FC70C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1H0_MCIO_DDRIO_REG 0x0D02470C



/* GDCRTRAININGRESULT2H0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C710)                                                  */
/*       IVT_EX (0x401FC710)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2H0_MCIO_DDRIO_REG 0x0D024710



/* GDCRDATACOMPBH0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C714)                                                  */
/*       IVT_EX (0x401FC714)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBH0_MCIO_DDRIO_REG 0x0D024714



/* GDCRBUFFCFGH0_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C718)                                                  */
/*       IVT_EX (0x401FC718)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGH0_MCIO_DDRIO_REG 0x0D024718



/* GDCRDATADEBUGMUXCFGH0_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C71C)                                                  */
/*       IVT_EX (0x401FC71C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGH0_MCIO_DDRIO_REG 0x0D02471C



/* GDCRTXRXBOTRANK0H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C720)                                                  */
/*       IVT_EX (0x401FC720)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0H0_MCIO_DDRIO_REG 0x0D024720



/* GDCRTXRXBOTRANK1H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C724)                                                  */
/*       IVT_EX (0x401FC724)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1H0_MCIO_DDRIO_REG 0x0D024724



/* GDCRTXRXBOTRANK2H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C728)                                                  */
/*       IVT_EX (0x401FC728)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2H0_MCIO_DDRIO_REG 0x0D024728



/* GDCRTXRXBOTRANK3H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C72C)                                                  */
/*       IVT_EX (0x401FC72C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3H0_MCIO_DDRIO_REG 0x0D02472C



/* GDCRTXRXBOTRANK4H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C730)                                                  */
/*       IVT_EX (0x401FC730)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4H0_MCIO_DDRIO_REG 0x0D024730



/* GDCRTXRXBOTRANK5H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C734)                                                  */
/*       IVT_EX (0x401FC734)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5H0_MCIO_DDRIO_REG 0x0D024734



/* GDCRTXRXBOTRANK6H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C738)                                                  */
/*       IVT_EX (0x401FC738)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6H0_MCIO_DDRIO_REG 0x0D024738



/* GDCRTXRXBOTRANK7H0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C73C)                                                  */
/*       IVT_EX (0x401FC73C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7H0_MCIO_DDRIO_REG 0x0D02473C



/* GDCRRXTOPRANK0H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C740)                                                  */
/*       IVT_EX (0x401FC740)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0H0_MCIO_DDRIO_REG 0x0D024740



/* GDCRRXTOPRANK1H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C744)                                                  */
/*       IVT_EX (0x401FC744)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1H0_MCIO_DDRIO_REG 0x0D024744



/* GDCRRXTOPRANK2H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C748)                                                  */
/*       IVT_EX (0x401FC748)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2H0_MCIO_DDRIO_REG 0x0D024748



/* GDCRRXTOPRANK3H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C74C)                                                  */
/*       IVT_EX (0x401FC74C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3H0_MCIO_DDRIO_REG 0x0D02474C



/* GDCRRXTOPRANK4H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C750)                                                  */
/*       IVT_EX (0x401FC750)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4H0_MCIO_DDRIO_REG 0x0D024750



/* GDCRRXTOPRANK5H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C754)                                                  */
/*       IVT_EX (0x401FC754)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5H0_MCIO_DDRIO_REG 0x0D024754



/* GDCRRXTOPRANK6H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C758)                                                  */
/*       IVT_EX (0x401FC758)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6H0_MCIO_DDRIO_REG 0x0D024758



/* GDCRRXTOPRANK7H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C75C)                                                  */
/*       IVT_EX (0x401FC75C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7H0_MCIO_DDRIO_REG 0x0D02475C



/* GDCRTXTOPRANK0H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C760)                                                  */
/*       IVT_EX (0x401FC760)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0H0_MCIO_DDRIO_REG 0x0D024760



/* GDCRTXTOPRANK1H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C764)                                                  */
/*       IVT_EX (0x401FC764)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1H0_MCIO_DDRIO_REG 0x0D024764



/* GDCRTXTOPRANK2H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C768)                                                  */
/*       IVT_EX (0x401FC768)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2H0_MCIO_DDRIO_REG 0x0D024768



/* GDCRTXTOPRANK3H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C76C)                                                  */
/*       IVT_EX (0x401FC76C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3H0_MCIO_DDRIO_REG 0x0D02476C



/* GDCRTXTOPRANK4H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C770)                                                  */
/*       IVT_EX (0x401FC770)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4H0_MCIO_DDRIO_REG 0x0D024770



/* GDCRTXTOPRANK5H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C774)                                                  */
/*       IVT_EX (0x401FC774)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5H0_MCIO_DDRIO_REG 0x0D024774



/* GDCRTXTOPRANK6H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C778)                                                  */
/*       IVT_EX (0x401FC778)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6H0_MCIO_DDRIO_REG 0x0D024778



/* GDCRTXTOPRANK7H0_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C77C)                                                  */
/*       IVT_EX (0x401FC77C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7H0_MCIO_DDRIO_REG 0x0D02477C





/* GDCRTRAININGMODEECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C788)                                                  */
/*       IVT_EX (0x401FC788)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEECC0_MCIO_DDRIO_REG 0x0D024788



/* GDCRTRAININGRESULT1ECC0_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018C78C)                                                  */
/*       IVT_EX (0x401FC78C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1ECC0_MCIO_DDRIO_REG 0x0D02478C



/* GDCRTRAININGRESULT2ECC0_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018C790)                                                  */
/*       IVT_EX (0x401FC790)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2ECC0_MCIO_DDRIO_REG 0x0D024790



/* GDCRDATACOMPBECC0_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C794)                                                  */
/*       IVT_EX (0x401FC794)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBECC0_MCIO_DDRIO_REG 0x0D024794



/* GDCRBUFFCFGECC0_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C798)                                                  */
/*       IVT_EX (0x401FC798)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGECC0_MCIO_DDRIO_REG 0x0D024798



/* GDCRDATADEBUGMUXCFGECC0_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018C79C)                                                  */
/*       IVT_EX (0x401FC79C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGECC0_MCIO_DDRIO_REG 0x0D02479C



/* GDCRTXRXBOTRANK0ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7A0)                                                  */
/*       IVT_EX (0x401FC7A0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0ECC0_MCIO_DDRIO_REG 0x0D0247A0



/* GDCRTXRXBOTRANK1ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7A4)                                                  */
/*       IVT_EX (0x401FC7A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1ECC0_MCIO_DDRIO_REG 0x0D0247A4



/* GDCRTXRXBOTRANK2ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7A8)                                                  */
/*       IVT_EX (0x401FC7A8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2ECC0_MCIO_DDRIO_REG 0x0D0247A8



/* GDCRTXRXBOTRANK3ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7AC)                                                  */
/*       IVT_EX (0x401FC7AC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3ECC0_MCIO_DDRIO_REG 0x0D0247AC



/* GDCRTXRXBOTRANK4ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7B0)                                                  */
/*       IVT_EX (0x401FC7B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4ECC0_MCIO_DDRIO_REG 0x0D0247B0



/* GDCRTXRXBOTRANK5ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7B4)                                                  */
/*       IVT_EX (0x401FC7B4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5ECC0_MCIO_DDRIO_REG 0x0D0247B4



/* GDCRTXRXBOTRANK6ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7B8)                                                  */
/*       IVT_EX (0x401FC7B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6ECC0_MCIO_DDRIO_REG 0x0D0247B8



/* GDCRTXRXBOTRANK7ECC0_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C7BC)                                                  */
/*       IVT_EX (0x401FC7BC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7ECC0_MCIO_DDRIO_REG 0x0D0247BC



/* GDCRRXTOPRANK0ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7C0)                                                  */
/*       IVT_EX (0x401FC7C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0ECC0_MCIO_DDRIO_REG 0x0D0247C0



/* GDCRRXTOPRANK1ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7C4)                                                  */
/*       IVT_EX (0x401FC7C4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1ECC0_MCIO_DDRIO_REG 0x0D0247C4



/* GDCRRXTOPRANK2ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7C8)                                                  */
/*       IVT_EX (0x401FC7C8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2ECC0_MCIO_DDRIO_REG 0x0D0247C8



/* GDCRRXTOPRANK3ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7CC)                                                  */
/*       IVT_EX (0x401FC7CC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3ECC0_MCIO_DDRIO_REG 0x0D0247CC



/* GDCRRXTOPRANK4ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7D0)                                                  */
/*       IVT_EX (0x401FC7D0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4ECC0_MCIO_DDRIO_REG 0x0D0247D0



/* GDCRRXTOPRANK5ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7D4)                                                  */
/*       IVT_EX (0x401FC7D4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5ECC0_MCIO_DDRIO_REG 0x0D0247D4



/* GDCRRXTOPRANK6ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7D8)                                                  */
/*       IVT_EX (0x401FC7D8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6ECC0_MCIO_DDRIO_REG 0x0D0247D8



/* GDCRRXTOPRANK7ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7DC)                                                  */
/*       IVT_EX (0x401FC7DC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7ECC0_MCIO_DDRIO_REG 0x0D0247DC



/* GDCRTXTOPRANK0ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7E0)                                                  */
/*       IVT_EX (0x401FC7E0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0ECC0_MCIO_DDRIO_REG 0x0D0247E0



/* GDCRTXTOPRANK1ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7E4)                                                  */
/*       IVT_EX (0x401FC7E4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1ECC0_MCIO_DDRIO_REG 0x0D0247E4



/* GDCRTXTOPRANK2ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7E8)                                                  */
/*       IVT_EX (0x401FC7E8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2ECC0_MCIO_DDRIO_REG 0x0D0247E8



/* GDCRTXTOPRANK3ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7EC)                                                  */
/*       IVT_EX (0x401FC7EC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3ECC0_MCIO_DDRIO_REG 0x0D0247EC



/* GDCRTXTOPRANK4ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7F0)                                                  */
/*       IVT_EX (0x401FC7F0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4ECC0_MCIO_DDRIO_REG 0x0D0247F0



/* GDCRTXTOPRANK5ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7F4)                                                  */
/*       IVT_EX (0x401FC7F4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5ECC0_MCIO_DDRIO_REG 0x0D0247F4



/* GDCRTXTOPRANK6ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7F8)                                                  */
/*       IVT_EX (0x401FC7F8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6ECC0_MCIO_DDRIO_REG 0x0D0247F8



/* GDCRTXTOPRANK7ECC0_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C7FC)                                                  */
/*       IVT_EX (0x401FC7FC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7ECC0_MCIO_DDRIO_REG 0x0D0247FC



/* GDCRCTLCOMPTXA1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C884)                                                  */
/* Register default value:              0x1F803820                            */
#define GDCRCTLCOMPTXA1_MCIO_DDRIO_REG 0x0D024884





/* GDCRCOMPOFFSET_RXA1_MCIO_DDRIO_REG supported on:                           */
/*       IVT_EP (0x4018C88C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOFFSET_RXA1_MCIO_DDRIO_REG 0x0D02488C



/* GDCRCTLVREFRXBIASDCDETECTA1_MCIO_DDRIO_REG supported on:                   */
/*       IVT_EP (0x4018C890)                                                  */
/* Register default value:              0x00050000                            */
#define GDCRCTLVREFRXBIASDCDETECTA1_MCIO_DDRIO_REG 0x0D024890



/* GDCRCTLPICODE03A1_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C894)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE03A1_MCIO_DDRIO_REG 0x0D024894



/* GDCRCTLPICODE47A1_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018C898)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE47A1_MCIO_DDRIO_REG 0x0D024898



/* GDCRCTLPICODE810A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C89C)                                                  */
/* Register default value:              0x00404040                            */
#define GDCRCTLPICODE810A1_MCIO_DDRIO_REG 0x0D02489C





/* GDCRCTLDEBUGMUXDFTA1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018C8A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLDEBUGMUXDFTA1_MCIO_DDRIO_REG 0x0D0248A4



/* GDCRCTLRANKCNFGXTALK1A1_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018C8A8)                                                  */
/* Register default value:              0x000003FF                            */
#define GDCRCTLRANKCNFGXTALK1A1_MCIO_DDRIO_REG 0x0D0248A8



/* GDCRCTLXTALK2ANDVMSEODTA1_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018C8AC)                                                  */
/* Register default value:              0x10000000                            */
#define GDCRCTLXTALK2ANDVMSEODTA1_MCIO_DDRIO_REG 0x0D0248AC



/* GDCRCTLVSSHIA1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018C8B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLVSSHIA1_MCIO_DDRIO_REG 0x0D0248B0



/* GDCRCTLVSSHIDBGCNTLA1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C8B4)                                                  */
/* Register default value:              0x00000500                            */
#define GDCRCTLVSSHIDBGCNTLA1_MCIO_DDRIO_REG 0x0D0248B4



/* GDCRCTLACIOLBA1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C8B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLACIOLBA1_MCIO_DDRIO_REG 0x0D0248B8



/* GDCRVMSEERRORA1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C8BC)                                                  */
/* Register default value:              0x03FFFF00                            */
#define GDCRVMSEERRORA1_MCIO_DDRIO_REG 0x0D0248BC



/* GDCRCTLLOGICDELAYSELECTA1_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018C8C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLLOGICDELAYSELECTA1_MCIO_DDRIO_REG 0x0D0248C0







/* GDCRTRAININGMODEA1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C908)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEA1_MCIO_DDRIO_REG 0x0D024908



/* GDCRTRAININGRESULT1A1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C90C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1A1_MCIO_DDRIO_REG 0x0D02490C



/* GDCRTRAININGRESULT2A1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C910)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2A1_MCIO_DDRIO_REG 0x0D024910



/* GDCRDATACOMPBA1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C914)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBA1_MCIO_DDRIO_REG 0x0D024914



/* GDCRBUFFCFGA1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C918)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGA1_MCIO_DDRIO_REG 0x0D024918



/* GDCRDATADEBUGMUXCFGA1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C91C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGA1_MCIO_DDRIO_REG 0x0D02491C



/* GDCRTXRXBOTRANK0A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C920)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0A1_MCIO_DDRIO_REG 0x0D024920



/* GDCRTXRXBOTRANK1A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C924)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1A1_MCIO_DDRIO_REG 0x0D024924



/* GDCRTXRXBOTRANK2A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C928)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2A1_MCIO_DDRIO_REG 0x0D024928



/* GDCRTXRXBOTRANK3A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C92C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3A1_MCIO_DDRIO_REG 0x0D02492C



/* GDCRTXRXBOTRANK4A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C930)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4A1_MCIO_DDRIO_REG 0x0D024930



/* GDCRTXRXBOTRANK5A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C934)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5A1_MCIO_DDRIO_REG 0x0D024934



/* GDCRTXRXBOTRANK6A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C938)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6A1_MCIO_DDRIO_REG 0x0D024938



/* GDCRTXRXBOTRANK7A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C93C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7A1_MCIO_DDRIO_REG 0x0D02493C



/* GDCRRXTOPRANK0A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C940)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0A1_MCIO_DDRIO_REG 0x0D024940



/* GDCRRXTOPRANK1A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C944)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1A1_MCIO_DDRIO_REG 0x0D024944



/* GDCRRXTOPRANK2A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C948)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2A1_MCIO_DDRIO_REG 0x0D024948



/* GDCRRXTOPRANK3A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C94C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3A1_MCIO_DDRIO_REG 0x0D02494C



/* GDCRRXTOPRANK4A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C950)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4A1_MCIO_DDRIO_REG 0x0D024950



/* GDCRRXTOPRANK5A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C954)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5A1_MCIO_DDRIO_REG 0x0D024954



/* GDCRRXTOPRANK6A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C958)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6A1_MCIO_DDRIO_REG 0x0D024958



/* GDCRRXTOPRANK7A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C95C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7A1_MCIO_DDRIO_REG 0x0D02495C



/* GDCRTXTOPRANK0A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C960)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0A1_MCIO_DDRIO_REG 0x0D024960



/* GDCRTXTOPRANK1A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C964)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1A1_MCIO_DDRIO_REG 0x0D024964



/* GDCRTXTOPRANK2A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C968)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2A1_MCIO_DDRIO_REG 0x0D024968



/* GDCRTXTOPRANK3A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C96C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3A1_MCIO_DDRIO_REG 0x0D02496C



/* GDCRTXTOPRANK4A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C970)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4A1_MCIO_DDRIO_REG 0x0D024970



/* GDCRTXTOPRANK5A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C974)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5A1_MCIO_DDRIO_REG 0x0D024974



/* GDCRTXTOPRANK6A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C978)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6A1_MCIO_DDRIO_REG 0x0D024978



/* GDCRTXTOPRANK7A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C97C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7A1_MCIO_DDRIO_REG 0x0D02497C





/* GDCRTRAININGMODEB1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C988)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEB1_MCIO_DDRIO_REG 0x0D024988



/* GDCRTRAININGRESULT1B1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C98C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1B1_MCIO_DDRIO_REG 0x0D02498C



/* GDCRTRAININGRESULT2B1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C990)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2B1_MCIO_DDRIO_REG 0x0D024990



/* GDCRDATACOMPBB1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018C994)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBB1_MCIO_DDRIO_REG 0x0D024994



/* GDCRBUFFCFGB1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018C998)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGB1_MCIO_DDRIO_REG 0x0D024998



/* GDCRDATADEBUGMUXCFGB1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018C99C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGB1_MCIO_DDRIO_REG 0x0D02499C



/* GDCRTXRXBOTRANK0B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9A0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0B1_MCIO_DDRIO_REG 0x0D0249A0



/* GDCRTXRXBOTRANK1B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9A4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1B1_MCIO_DDRIO_REG 0x0D0249A4



/* GDCRTXRXBOTRANK2B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9A8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2B1_MCIO_DDRIO_REG 0x0D0249A8



/* GDCRTXRXBOTRANK3B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9AC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3B1_MCIO_DDRIO_REG 0x0D0249AC



/* GDCRTXRXBOTRANK4B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9B0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4B1_MCIO_DDRIO_REG 0x0D0249B0



/* GDCRTXRXBOTRANK5B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9B4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5B1_MCIO_DDRIO_REG 0x0D0249B4



/* GDCRTXRXBOTRANK6B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9B8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6B1_MCIO_DDRIO_REG 0x0D0249B8



/* GDCRTXRXBOTRANK7B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018C9BC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7B1_MCIO_DDRIO_REG 0x0D0249BC



/* GDCRRXTOPRANK0B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9C0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0B1_MCIO_DDRIO_REG 0x0D0249C0



/* GDCRRXTOPRANK1B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9C4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1B1_MCIO_DDRIO_REG 0x0D0249C4



/* GDCRRXTOPRANK2B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9C8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2B1_MCIO_DDRIO_REG 0x0D0249C8



/* GDCRRXTOPRANK3B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9CC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3B1_MCIO_DDRIO_REG 0x0D0249CC



/* GDCRRXTOPRANK4B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9D0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4B1_MCIO_DDRIO_REG 0x0D0249D0



/* GDCRRXTOPRANK5B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9D4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5B1_MCIO_DDRIO_REG 0x0D0249D4



/* GDCRRXTOPRANK6B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9D8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6B1_MCIO_DDRIO_REG 0x0D0249D8



/* GDCRRXTOPRANK7B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9DC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7B1_MCIO_DDRIO_REG 0x0D0249DC



/* GDCRTXTOPRANK0B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9E0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0B1_MCIO_DDRIO_REG 0x0D0249E0



/* GDCRTXTOPRANK1B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9E4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1B1_MCIO_DDRIO_REG 0x0D0249E4



/* GDCRTXTOPRANK2B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9E8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2B1_MCIO_DDRIO_REG 0x0D0249E8



/* GDCRTXTOPRANK3B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9EC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3B1_MCIO_DDRIO_REG 0x0D0249EC



/* GDCRTXTOPRANK4B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9F0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4B1_MCIO_DDRIO_REG 0x0D0249F0



/* GDCRTXTOPRANK5B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9F4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5B1_MCIO_DDRIO_REG 0x0D0249F4



/* GDCRTXTOPRANK6B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9F8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6B1_MCIO_DDRIO_REG 0x0D0249F8



/* GDCRTXTOPRANK7B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018C9FC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7B1_MCIO_DDRIO_REG 0x0D0249FC





/* GDCRTRAININGMODEC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA08)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEC1_MCIO_DDRIO_REG 0x0D024A08



/* GDCRTRAININGRESULT1C1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CA0C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1C1_MCIO_DDRIO_REG 0x0D024A0C



/* GDCRTRAININGRESULT2C1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CA10)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2C1_MCIO_DDRIO_REG 0x0D024A10



/* GDCRDATACOMPBC1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CA14)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBC1_MCIO_DDRIO_REG 0x0D024A14



/* GDCRBUFFCFGC1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CA18)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGC1_MCIO_DDRIO_REG 0x0D024A18



/* GDCRDATADEBUGMUXCFGC1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CA1C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGC1_MCIO_DDRIO_REG 0x0D024A1C



/* GDCRTXRXBOTRANK0C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA20)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0C1_MCIO_DDRIO_REG 0x0D024A20



/* GDCRTXRXBOTRANK1C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA24)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1C1_MCIO_DDRIO_REG 0x0D024A24



/* GDCRTXRXBOTRANK2C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA28)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2C1_MCIO_DDRIO_REG 0x0D024A28



/* GDCRTXRXBOTRANK3C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA2C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3C1_MCIO_DDRIO_REG 0x0D024A2C



/* GDCRTXRXBOTRANK4C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA30)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4C1_MCIO_DDRIO_REG 0x0D024A30



/* GDCRTXRXBOTRANK5C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA34)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5C1_MCIO_DDRIO_REG 0x0D024A34



/* GDCRTXRXBOTRANK6C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA38)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6C1_MCIO_DDRIO_REG 0x0D024A38



/* GDCRTXRXBOTRANK7C1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA3C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7C1_MCIO_DDRIO_REG 0x0D024A3C



/* GDCRRXTOPRANK0C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA40)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0C1_MCIO_DDRIO_REG 0x0D024A40



/* GDCRRXTOPRANK1C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA44)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1C1_MCIO_DDRIO_REG 0x0D024A44



/* GDCRRXTOPRANK2C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA48)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2C1_MCIO_DDRIO_REG 0x0D024A48



/* GDCRRXTOPRANK3C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA4C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3C1_MCIO_DDRIO_REG 0x0D024A4C



/* GDCRRXTOPRANK4C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA50)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4C1_MCIO_DDRIO_REG 0x0D024A50



/* GDCRRXTOPRANK5C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA54)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5C1_MCIO_DDRIO_REG 0x0D024A54



/* GDCRRXTOPRANK6C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA58)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6C1_MCIO_DDRIO_REG 0x0D024A58



/* GDCRRXTOPRANK7C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA5C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7C1_MCIO_DDRIO_REG 0x0D024A5C



/* GDCRTXTOPRANK0C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA60)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0C1_MCIO_DDRIO_REG 0x0D024A60



/* GDCRTXTOPRANK1C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA64)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1C1_MCIO_DDRIO_REG 0x0D024A64



/* GDCRTXTOPRANK2C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA68)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2C1_MCIO_DDRIO_REG 0x0D024A68



/* GDCRTXTOPRANK3C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA6C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3C1_MCIO_DDRIO_REG 0x0D024A6C



/* GDCRTXTOPRANK4C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA70)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4C1_MCIO_DDRIO_REG 0x0D024A70



/* GDCRTXTOPRANK5C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA74)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5C1_MCIO_DDRIO_REG 0x0D024A74



/* GDCRTXTOPRANK6C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA78)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6C1_MCIO_DDRIO_REG 0x0D024A78



/* GDCRTXTOPRANK7C1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CA7C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7C1_MCIO_DDRIO_REG 0x0D024A7C





/* GDCRTRAININGMODED1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CA88)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODED1_MCIO_DDRIO_REG 0x0D024A88



/* GDCRTRAININGRESULT1D1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CA8C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1D1_MCIO_DDRIO_REG 0x0D024A8C



/* GDCRTRAININGRESULT2D1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CA90)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2D1_MCIO_DDRIO_REG 0x0D024A90



/* GDCRDATACOMPBD1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CA94)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBD1_MCIO_DDRIO_REG 0x0D024A94



/* GDCRBUFFCFGD1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CA98)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGD1_MCIO_DDRIO_REG 0x0D024A98



/* GDCRDATADEBUGMUXCFGD1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CA9C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGD1_MCIO_DDRIO_REG 0x0D024A9C



/* GDCRTXRXBOTRANK0D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAA0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0D1_MCIO_DDRIO_REG 0x0D024AA0



/* GDCRTXRXBOTRANK1D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAA4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1D1_MCIO_DDRIO_REG 0x0D024AA4



/* GDCRTXRXBOTRANK2D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAA8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2D1_MCIO_DDRIO_REG 0x0D024AA8



/* GDCRTXRXBOTRANK3D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAAC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3D1_MCIO_DDRIO_REG 0x0D024AAC



/* GDCRTXRXBOTRANK4D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAB0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4D1_MCIO_DDRIO_REG 0x0D024AB0



/* GDCRTXRXBOTRANK5D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAB4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5D1_MCIO_DDRIO_REG 0x0D024AB4



/* GDCRTXRXBOTRANK6D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CAB8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6D1_MCIO_DDRIO_REG 0x0D024AB8



/* GDCRTXRXBOTRANK7D1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CABC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7D1_MCIO_DDRIO_REG 0x0D024ABC



/* GDCRRXTOPRANK0D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAC0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0D1_MCIO_DDRIO_REG 0x0D024AC0



/* GDCRRXTOPRANK1D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAC4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1D1_MCIO_DDRIO_REG 0x0D024AC4



/* GDCRRXTOPRANK2D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAC8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2D1_MCIO_DDRIO_REG 0x0D024AC8



/* GDCRRXTOPRANK3D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CACC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3D1_MCIO_DDRIO_REG 0x0D024ACC



/* GDCRRXTOPRANK4D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAD0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4D1_MCIO_DDRIO_REG 0x0D024AD0



/* GDCRRXTOPRANK5D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAD4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5D1_MCIO_DDRIO_REG 0x0D024AD4



/* GDCRRXTOPRANK6D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAD8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6D1_MCIO_DDRIO_REG 0x0D024AD8



/* GDCRRXTOPRANK7D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CADC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7D1_MCIO_DDRIO_REG 0x0D024ADC



/* GDCRTXTOPRANK0D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAE0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0D1_MCIO_DDRIO_REG 0x0D024AE0



/* GDCRTXTOPRANK1D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAE4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1D1_MCIO_DDRIO_REG 0x0D024AE4



/* GDCRTXTOPRANK2D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAE8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2D1_MCIO_DDRIO_REG 0x0D024AE8



/* GDCRTXTOPRANK3D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAEC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3D1_MCIO_DDRIO_REG 0x0D024AEC



/* GDCRTXTOPRANK4D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAF0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4D1_MCIO_DDRIO_REG 0x0D024AF0



/* GDCRTXTOPRANK5D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAF4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5D1_MCIO_DDRIO_REG 0x0D024AF4



/* GDCRTXTOPRANK6D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAF8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6D1_MCIO_DDRIO_REG 0x0D024AF8



/* GDCRTXTOPRANK7D1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CAFC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7D1_MCIO_DDRIO_REG 0x0D024AFC







/* GDCRCMDVREFA1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CB0C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDVREFA1_MCIO_DDRIO_REG 0x0D024B0C



/* GDCRCMDPICODEA1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CB10)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCMDPICODEA1_MCIO_DDRIO_REG 0x0D024B10



/* GDCRCMDLOGICPHASEDELAYA1_MCIO_DDRIO_REG supported on:                      */
/*       IVT_EP (0x4018CB14)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDLOGICPHASEDELAYA1_MCIO_DDRIO_REG 0x0D024B14



/* GDCRCMDDEBUGMUXDFTA1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CB18)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDDEBUGMUXDFTA1_MCIO_DDRIO_REG 0x0D024B18





/* GDCRRANKCFGA1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x2018CB20)                                                  */
/* Register default value:              0xF3FF                                */
#define GDCRRANKCFGA1_MCIO_DDRIO_REG 0x0D022B20



/* GDCRCMDPICODE2A1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CB24)                                                  */
/* Register default value:              0x00004040                            */
#define GDCRCMDPICODE2A1_MCIO_DDRIO_REG 0x0D024B24





/* GDCRCKCOMP2A1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CB88)                                                  */
/* Register default value:              0x00010491                            */
#define GDCRCKCOMP2A1_MCIO_DDRIO_REG 0x0D024B88



/* GDCRCKRANKUSEDA1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x2018CB8C)                                                  */
/* Register default value:              0x0033                                */
#define GDCRCKRANKUSEDA1_MCIO_DDRIO_REG 0x0D022B8C



/* GDCRCKPICODE0A1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CB90)                                                  */
/* Register default value:              0x03000000                            */
#define GDCRCKPICODE0A1_MCIO_DDRIO_REG 0x0D024B90



/* GDCRCKPICODE1A1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CB94)                                                  */
/* Register default value:              0x03000000                            */
#define GDCRCKPICODE1A1_MCIO_DDRIO_REG 0x0D024B94



/* GDCRCKLOGICDELAYA1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x2018CB98)                                                  */
/* Register default value:              0x0000                                */
#define GDCRCKLOGICDELAYA1_MCIO_DDRIO_REG 0x0D022B98







/* GDCRCLKDLLDFTA1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x2018CBA4)                                                  */
/* Register default value:              0x0000                                */
#define GDCRCLKDLLDFTA1_MCIO_DDRIO_REG 0x0D022BA4



/* GDCRCLKVSSHIA1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CBA8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCLKVSSHIA1_MCIO_DDRIO_REG 0x0D024BA8



/* GDCRCLKVMCFGA1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x1018CBAC)                                                  */
/* Register default value:              0x00                                  */
#define GDCRCLKVMCFGA1_MCIO_DDRIO_REG 0x0D021BAC









/* GDCRCOMPOVR2A1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CC08)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR2A1_MCIO_DDRIO_REG 0x0D024C08



/* GDCRCOMPOVR3A1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CC0C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR3A1_MCIO_DDRIO_REG 0x0D024C0C



/* GDCRCOMPOVR4A1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CC10)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR4A1_MCIO_DDRIO_REG 0x0D024C10



/* GDCRCOMPOVR5A1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CC14)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR5A1_MCIO_DDRIO_REG 0x0D024C14



/* GDCRCOMPOVR6A1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CC18)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVR6A1_MCIO_DDRIO_REG 0x0D024C18



/* GDCRCOMPOVROFST1A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CC1C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVROFST1A1_MCIO_DDRIO_REG 0x0D024C1C



/* GDCRCOMPOVROFST2A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CC20)                                                  */
/* Register default value:              0x03F00000                            */
#define GDCRCOMPOVROFST2A1_MCIO_DDRIO_REG 0x0D024C20



/* GDCRCOMPOVROFST3A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CC24)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVROFST3A1_MCIO_DDRIO_REG 0x0D024C24



/* GDCRCOMPOVROFST4A1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CC28)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOVROFST4A1_MCIO_DDRIO_REG 0x0D024C28



/* GDCRCOMPCFGSPDA1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CC2C)                                                  */
/* Register default value:              0x00010B5A                            */
#define GDCRCOMPCFGSPDA1_MCIO_DDRIO_REG 0x0D024C2C







/* GDCRMSCCTLA1_MCIO_DDRIO_REG supported on:                                  */
/*       IVT_EP (0x4018CC3C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRMSCCTLA1_MCIO_DDRIO_REG 0x0D024C3C







/* GDCRCMDVREFB1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CC8C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDVREFB1_MCIO_DDRIO_REG 0x0D024C8C



/* GDCRCMDPICODEB1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CC90)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCMDPICODEB1_MCIO_DDRIO_REG 0x0D024C90



/* GDCRCMDLOGICPHASEDELAYB1_MCIO_DDRIO_REG supported on:                      */
/*       IVT_EP (0x4018CC94)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDLOGICPHASEDELAYB1_MCIO_DDRIO_REG 0x0D024C94



/* GDCRCMDDEBUGMUXDFTB1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CC98)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCMDDEBUGMUXDFTB1_MCIO_DDRIO_REG 0x0D024C98





/* GDCRRANKCFGB1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x2018CCA0)                                                  */
/* Register default value:              0xF3FF                                */
#define GDCRRANKCFGB1_MCIO_DDRIO_REG 0x0D022CA0



/* GDCRCMDPICODE2B1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CCA4)                                                  */
/* Register default value:              0x00004040                            */
#define GDCRCMDPICODE2B1_MCIO_DDRIO_REG 0x0D024CA4





/* GDCRTRAININGMODEE1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD08)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEE1_MCIO_DDRIO_REG 0x0D024D08



/* GDCRTRAININGRESULT1E1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CD0C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1E1_MCIO_DDRIO_REG 0x0D024D0C



/* GDCRTRAININGRESULT2E1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CD10)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2E1_MCIO_DDRIO_REG 0x0D024D10



/* GDCRDATACOMPBE1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CD14)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBE1_MCIO_DDRIO_REG 0x0D024D14



/* GDCRBUFFCFGE1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CD18)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGE1_MCIO_DDRIO_REG 0x0D024D18



/* GDCRDATADEBUGMUXCFGE1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CD1C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGE1_MCIO_DDRIO_REG 0x0D024D1C



/* GDCRTXRXBOTRANK0E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD20)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0E1_MCIO_DDRIO_REG 0x0D024D20



/* GDCRTXRXBOTRANK1E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD24)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1E1_MCIO_DDRIO_REG 0x0D024D24



/* GDCRTXRXBOTRANK2E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD28)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2E1_MCIO_DDRIO_REG 0x0D024D28



/* GDCRTXRXBOTRANK3E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD2C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3E1_MCIO_DDRIO_REG 0x0D024D2C



/* GDCRTXRXBOTRANK4E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD30)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4E1_MCIO_DDRIO_REG 0x0D024D30



/* GDCRTXRXBOTRANK5E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD34)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5E1_MCIO_DDRIO_REG 0x0D024D34



/* GDCRTXRXBOTRANK6E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD38)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6E1_MCIO_DDRIO_REG 0x0D024D38



/* GDCRTXRXBOTRANK7E1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD3C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7E1_MCIO_DDRIO_REG 0x0D024D3C



/* GDCRRXTOPRANK0E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD40)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0E1_MCIO_DDRIO_REG 0x0D024D40



/* GDCRRXTOPRANK1E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD44)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1E1_MCIO_DDRIO_REG 0x0D024D44



/* GDCRRXTOPRANK2E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD48)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2E1_MCIO_DDRIO_REG 0x0D024D48



/* GDCRRXTOPRANK3E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD4C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3E1_MCIO_DDRIO_REG 0x0D024D4C



/* GDCRRXTOPRANK4E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD50)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4E1_MCIO_DDRIO_REG 0x0D024D50



/* GDCRRXTOPRANK5E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD54)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5E1_MCIO_DDRIO_REG 0x0D024D54



/* GDCRRXTOPRANK6E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD58)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6E1_MCIO_DDRIO_REG 0x0D024D58



/* GDCRRXTOPRANK7E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD5C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7E1_MCIO_DDRIO_REG 0x0D024D5C



/* GDCRTXTOPRANK0E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD60)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0E1_MCIO_DDRIO_REG 0x0D024D60



/* GDCRTXTOPRANK1E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD64)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1E1_MCIO_DDRIO_REG 0x0D024D64



/* GDCRTXTOPRANK2E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD68)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2E1_MCIO_DDRIO_REG 0x0D024D68



/* GDCRTXTOPRANK3E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD6C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3E1_MCIO_DDRIO_REG 0x0D024D6C



/* GDCRTXTOPRANK4E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD70)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4E1_MCIO_DDRIO_REG 0x0D024D70



/* GDCRTXTOPRANK5E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD74)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5E1_MCIO_DDRIO_REG 0x0D024D74



/* GDCRTXTOPRANK6E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD78)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6E1_MCIO_DDRIO_REG 0x0D024D78



/* GDCRTXTOPRANK7E1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CD7C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7E1_MCIO_DDRIO_REG 0x0D024D7C



/* GDCRCTLCOMPTXB1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CD84)                                                  */
/* Register default value:              0x1F803820                            */
#define GDCRCTLCOMPTXB1_MCIO_DDRIO_REG 0x0D024D84





/* GDCRCOMPOFFSET_RXB1_MCIO_DDRIO_REG supported on:                           */
/*       IVT_EP (0x4018CD8C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCOMPOFFSET_RXB1_MCIO_DDRIO_REG 0x0D024D8C



/* GDCRCTLVREFRXBIASDCDETECTB1_MCIO_DDRIO_REG supported on:                   */
/*       IVT_EP (0x4018CD90)                                                  */
/* Register default value:              0x00050000                            */
#define GDCRCTLVREFRXBIASDCDETECTB1_MCIO_DDRIO_REG 0x0D024D90



/* GDCRCTLPICODE03B1_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018CD94)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE03B1_MCIO_DDRIO_REG 0x0D024D94



/* GDCRCTLPICODE47B1_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018CD98)                                                  */
/* Register default value:              0x40404040                            */
#define GDCRCTLPICODE47B1_MCIO_DDRIO_REG 0x0D024D98



/* GDCRCTLPICODE810B1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CD9C)                                                  */
/* Register default value:              0x00404040                            */
#define GDCRCTLPICODE810B1_MCIO_DDRIO_REG 0x0D024D9C





/* GDCRCTLDEBUGMUXDFTB1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CDA4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLDEBUGMUXDFTB1_MCIO_DDRIO_REG 0x0D024DA4



/* GDCRCTLRANKCNFGXTALK1B1_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018CDA8)                                                  */
/* Register default value:              0x000003FF                            */
#define GDCRCTLRANKCNFGXTALK1B1_MCIO_DDRIO_REG 0x0D024DA8



/* GDCRCTLXTALK2ANDVMSEODTB1_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018CDAC)                                                  */
/* Register default value:              0x10000000                            */
#define GDCRCTLXTALK2ANDVMSEODTB1_MCIO_DDRIO_REG 0x0D024DAC



/* GDCRCTLVSSHIB1_MCIO_DDRIO_REG supported on:                                */
/*       IVT_EP (0x4018CDB0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLVSSHIB1_MCIO_DDRIO_REG 0x0D024DB0



/* GDCRCTLVSSHIDBGCNTLB1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CDB4)                                                  */
/* Register default value:              0x00000500                            */
#define GDCRCTLVSSHIDBGCNTLB1_MCIO_DDRIO_REG 0x0D024DB4



/* GDCRCTLACIOLBB1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CDB8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLACIOLBB1_MCIO_DDRIO_REG 0x0D024DB8



/* GDCRVMSEERRORB1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CDBC)                                                  */
/* Register default value:              0x03FFFF00                            */
#define GDCRVMSEERRORB1_MCIO_DDRIO_REG 0x0D024DBC



/* GDCRCTLLOGICDELAYSELECTB1_MCIO_DDRIO_REG supported on:                     */
/*       IVT_EP (0x4018CDC0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRCTLLOGICDELAYSELECTB1_MCIO_DDRIO_REG 0x0D024DC0







/* GDCRTRAININGMODEF1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE08)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEF1_MCIO_DDRIO_REG 0x0D024E08



/* GDCRTRAININGRESULT1F1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CE0C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1F1_MCIO_DDRIO_REG 0x0D024E0C



/* GDCRTRAININGRESULT2F1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CE10)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2F1_MCIO_DDRIO_REG 0x0D024E10



/* GDCRDATACOMPBF1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CE14)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBF1_MCIO_DDRIO_REG 0x0D024E14



/* GDCRBUFFCFGF1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CE18)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGF1_MCIO_DDRIO_REG 0x0D024E18



/* GDCRDATADEBUGMUXCFGF1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CE1C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGF1_MCIO_DDRIO_REG 0x0D024E1C



/* GDCRTXRXBOTRANK0F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE20)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0F1_MCIO_DDRIO_REG 0x0D024E20



/* GDCRTXRXBOTRANK1F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE24)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1F1_MCIO_DDRIO_REG 0x0D024E24



/* GDCRTXRXBOTRANK2F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE28)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2F1_MCIO_DDRIO_REG 0x0D024E28



/* GDCRTXRXBOTRANK3F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE2C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3F1_MCIO_DDRIO_REG 0x0D024E2C



/* GDCRTXRXBOTRANK4F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE30)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4F1_MCIO_DDRIO_REG 0x0D024E30



/* GDCRTXRXBOTRANK5F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE34)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5F1_MCIO_DDRIO_REG 0x0D024E34



/* GDCRTXRXBOTRANK6F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE38)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6F1_MCIO_DDRIO_REG 0x0D024E38



/* GDCRTXRXBOTRANK7F1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE3C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7F1_MCIO_DDRIO_REG 0x0D024E3C



/* GDCRRXTOPRANK0F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE40)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0F1_MCIO_DDRIO_REG 0x0D024E40



/* GDCRRXTOPRANK1F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE44)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1F1_MCIO_DDRIO_REG 0x0D024E44



/* GDCRRXTOPRANK2F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE48)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2F1_MCIO_DDRIO_REG 0x0D024E48



/* GDCRRXTOPRANK3F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE4C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3F1_MCIO_DDRIO_REG 0x0D024E4C



/* GDCRRXTOPRANK4F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE50)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4F1_MCIO_DDRIO_REG 0x0D024E50



/* GDCRRXTOPRANK5F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE54)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5F1_MCIO_DDRIO_REG 0x0D024E54



/* GDCRRXTOPRANK6F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE58)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6F1_MCIO_DDRIO_REG 0x0D024E58



/* GDCRRXTOPRANK7F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE5C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7F1_MCIO_DDRIO_REG 0x0D024E5C



/* GDCRTXTOPRANK0F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE60)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0F1_MCIO_DDRIO_REG 0x0D024E60



/* GDCRTXTOPRANK1F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE64)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1F1_MCIO_DDRIO_REG 0x0D024E64



/* GDCRTXTOPRANK2F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE68)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2F1_MCIO_DDRIO_REG 0x0D024E68



/* GDCRTXTOPRANK3F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE6C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3F1_MCIO_DDRIO_REG 0x0D024E6C



/* GDCRTXTOPRANK4F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE70)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4F1_MCIO_DDRIO_REG 0x0D024E70



/* GDCRTXTOPRANK5F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE74)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5F1_MCIO_DDRIO_REG 0x0D024E74



/* GDCRTXTOPRANK6F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE78)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6F1_MCIO_DDRIO_REG 0x0D024E78



/* GDCRTXTOPRANK7F1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CE7C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7F1_MCIO_DDRIO_REG 0x0D024E7C





/* GDCRTRAININGMODEG1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CE88)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEG1_MCIO_DDRIO_REG 0x0D024E88



/* GDCRTRAININGRESULT1G1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CE8C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1G1_MCIO_DDRIO_REG 0x0D024E8C



/* GDCRTRAININGRESULT2G1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CE90)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2G1_MCIO_DDRIO_REG 0x0D024E90



/* GDCRDATACOMPBG1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CE94)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBG1_MCIO_DDRIO_REG 0x0D024E94



/* GDCRBUFFCFGG1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CE98)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGG1_MCIO_DDRIO_REG 0x0D024E98



/* GDCRDATADEBUGMUXCFGG1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CE9C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGG1_MCIO_DDRIO_REG 0x0D024E9C



/* GDCRTXRXBOTRANK0G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEA0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0G1_MCIO_DDRIO_REG 0x0D024EA0



/* GDCRTXRXBOTRANK1G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEA4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1G1_MCIO_DDRIO_REG 0x0D024EA4



/* GDCRTXRXBOTRANK2G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEA8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2G1_MCIO_DDRIO_REG 0x0D024EA8



/* GDCRTXRXBOTRANK3G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEAC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3G1_MCIO_DDRIO_REG 0x0D024EAC



/* GDCRTXRXBOTRANK4G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEB0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4G1_MCIO_DDRIO_REG 0x0D024EB0



/* GDCRTXRXBOTRANK5G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEB4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5G1_MCIO_DDRIO_REG 0x0D024EB4



/* GDCRTXRXBOTRANK6G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEB8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6G1_MCIO_DDRIO_REG 0x0D024EB8



/* GDCRTXRXBOTRANK7G1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CEBC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7G1_MCIO_DDRIO_REG 0x0D024EBC



/* GDCRRXTOPRANK0G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEC0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0G1_MCIO_DDRIO_REG 0x0D024EC0



/* GDCRRXTOPRANK1G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEC4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1G1_MCIO_DDRIO_REG 0x0D024EC4



/* GDCRRXTOPRANK2G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEC8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2G1_MCIO_DDRIO_REG 0x0D024EC8



/* GDCRRXTOPRANK3G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CECC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3G1_MCIO_DDRIO_REG 0x0D024ECC



/* GDCRRXTOPRANK4G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CED0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4G1_MCIO_DDRIO_REG 0x0D024ED0



/* GDCRRXTOPRANK5G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CED4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5G1_MCIO_DDRIO_REG 0x0D024ED4



/* GDCRRXTOPRANK6G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CED8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6G1_MCIO_DDRIO_REG 0x0D024ED8



/* GDCRRXTOPRANK7G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEDC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7G1_MCIO_DDRIO_REG 0x0D024EDC



/* GDCRTXTOPRANK0G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEE0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0G1_MCIO_DDRIO_REG 0x0D024EE0



/* GDCRTXTOPRANK1G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEE4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1G1_MCIO_DDRIO_REG 0x0D024EE4



/* GDCRTXTOPRANK2G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEE8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2G1_MCIO_DDRIO_REG 0x0D024EE8



/* GDCRTXTOPRANK3G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEEC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3G1_MCIO_DDRIO_REG 0x0D024EEC



/* GDCRTXTOPRANK4G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEF0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4G1_MCIO_DDRIO_REG 0x0D024EF0



/* GDCRTXTOPRANK5G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEF4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5G1_MCIO_DDRIO_REG 0x0D024EF4



/* GDCRTXTOPRANK6G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEF8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6G1_MCIO_DDRIO_REG 0x0D024EF8



/* GDCRTXTOPRANK7G1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CEFC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7G1_MCIO_DDRIO_REG 0x0D024EFC





/* GDCRTRAININGMODEH1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF08)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEH1_MCIO_DDRIO_REG 0x0D024F08



/* GDCRTRAININGRESULT1H1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CF0C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1H1_MCIO_DDRIO_REG 0x0D024F0C



/* GDCRTRAININGRESULT2H1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CF10)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2H1_MCIO_DDRIO_REG 0x0D024F10



/* GDCRDATACOMPBH1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CF14)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBH1_MCIO_DDRIO_REG 0x0D024F14



/* GDCRBUFFCFGH1_MCIO_DDRIO_REG supported on:                                 */
/*       IVT_EP (0x4018CF18)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGH1_MCIO_DDRIO_REG 0x0D024F18



/* GDCRDATADEBUGMUXCFGH1_MCIO_DDRIO_REG supported on:                         */
/*       IVT_EP (0x4018CF1C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGH1_MCIO_DDRIO_REG 0x0D024F1C



/* GDCRTXRXBOTRANK0H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF20)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0H1_MCIO_DDRIO_REG 0x0D024F20



/* GDCRTXRXBOTRANK1H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF24)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1H1_MCIO_DDRIO_REG 0x0D024F24



/* GDCRTXRXBOTRANK2H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF28)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2H1_MCIO_DDRIO_REG 0x0D024F28



/* GDCRTXRXBOTRANK3H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF2C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3H1_MCIO_DDRIO_REG 0x0D024F2C



/* GDCRTXRXBOTRANK4H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF30)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4H1_MCIO_DDRIO_REG 0x0D024F30



/* GDCRTXRXBOTRANK5H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF34)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5H1_MCIO_DDRIO_REG 0x0D024F34



/* GDCRTXRXBOTRANK6H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF38)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6H1_MCIO_DDRIO_REG 0x0D024F38



/* GDCRTXRXBOTRANK7H1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CF3C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7H1_MCIO_DDRIO_REG 0x0D024F3C



/* GDCRRXTOPRANK0H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF40)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0H1_MCIO_DDRIO_REG 0x0D024F40



/* GDCRRXTOPRANK1H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF44)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1H1_MCIO_DDRIO_REG 0x0D024F44



/* GDCRRXTOPRANK2H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF48)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2H1_MCIO_DDRIO_REG 0x0D024F48



/* GDCRRXTOPRANK3H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF4C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3H1_MCIO_DDRIO_REG 0x0D024F4C



/* GDCRRXTOPRANK4H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF50)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4H1_MCIO_DDRIO_REG 0x0D024F50



/* GDCRRXTOPRANK5H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF54)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5H1_MCIO_DDRIO_REG 0x0D024F54



/* GDCRRXTOPRANK6H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF58)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6H1_MCIO_DDRIO_REG 0x0D024F58



/* GDCRRXTOPRANK7H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF5C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7H1_MCIO_DDRIO_REG 0x0D024F5C



/* GDCRTXTOPRANK0H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF60)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0H1_MCIO_DDRIO_REG 0x0D024F60



/* GDCRTXTOPRANK1H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF64)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1H1_MCIO_DDRIO_REG 0x0D024F64



/* GDCRTXTOPRANK2H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF68)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2H1_MCIO_DDRIO_REG 0x0D024F68



/* GDCRTXTOPRANK3H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF6C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3H1_MCIO_DDRIO_REG 0x0D024F6C



/* GDCRTXTOPRANK4H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF70)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4H1_MCIO_DDRIO_REG 0x0D024F70



/* GDCRTXTOPRANK5H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF74)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5H1_MCIO_DDRIO_REG 0x0D024F74



/* GDCRTXTOPRANK6H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF78)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6H1_MCIO_DDRIO_REG 0x0D024F78



/* GDCRTXTOPRANK7H1_MCIO_DDRIO_REG supported on:                              */
/*       IVT_EP (0x4018CF7C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7H1_MCIO_DDRIO_REG 0x0D024F7C





/* GDCRTRAININGMODEECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CF88)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGMODEECC1_MCIO_DDRIO_REG 0x0D024F88



/* GDCRTRAININGRESULT1ECC1_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018CF8C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT1ECC1_MCIO_DDRIO_REG 0x0D024F8C



/* GDCRTRAININGRESULT2ECC1_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018CF90)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTRAININGRESULT2ECC1_MCIO_DDRIO_REG 0x0D024F90



/* GDCRDATACOMPBECC1_MCIO_DDRIO_REG supported on:                             */
/*       IVT_EP (0x4018CF94)                                                  */
/* Register default value:              0x24000000                            */
#define GDCRDATACOMPBECC1_MCIO_DDRIO_REG 0x0D024F94



/* GDCRBUFFCFGECC1_MCIO_DDRIO_REG supported on:                               */
/*       IVT_EP (0x4018CF98)                                                  */
/* Register default value:              0x03FF0001                            */
#define GDCRBUFFCFGECC1_MCIO_DDRIO_REG 0x0D024F98



/* GDCRDATADEBUGMUXCFGECC1_MCIO_DDRIO_REG supported on:                       */
/*       IVT_EP (0x4018CF9C)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRDATADEBUGMUXCFGECC1_MCIO_DDRIO_REG 0x0D024F9C



/* GDCRTXRXBOTRANK0ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFA0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK0ECC1_MCIO_DDRIO_REG 0x0D024FA0



/* GDCRTXRXBOTRANK1ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFA4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK1ECC1_MCIO_DDRIO_REG 0x0D024FA4



/* GDCRTXRXBOTRANK2ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFA8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK2ECC1_MCIO_DDRIO_REG 0x0D024FA8



/* GDCRTXRXBOTRANK3ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFAC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK3ECC1_MCIO_DDRIO_REG 0x0D024FAC



/* GDCRTXRXBOTRANK4ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFB0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK4ECC1_MCIO_DDRIO_REG 0x0D024FB0



/* GDCRTXRXBOTRANK5ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFB4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK5ECC1_MCIO_DDRIO_REG 0x0D024FB4



/* GDCRTXRXBOTRANK6ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFB8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK6ECC1_MCIO_DDRIO_REG 0x0D024FB8



/* GDCRTXRXBOTRANK7ECC1_MCIO_DDRIO_REG supported on:                          */
/*       IVT_EP (0x4018CFBC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXRXBOTRANK7ECC1_MCIO_DDRIO_REG 0x0D024FBC



/* GDCRRXTOPRANK0ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFC0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK0ECC1_MCIO_DDRIO_REG 0x0D024FC0



/* GDCRRXTOPRANK1ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFC4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK1ECC1_MCIO_DDRIO_REG 0x0D024FC4



/* GDCRRXTOPRANK2ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFC8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK2ECC1_MCIO_DDRIO_REG 0x0D024FC8



/* GDCRRXTOPRANK3ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFCC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK3ECC1_MCIO_DDRIO_REG 0x0D024FCC



/* GDCRRXTOPRANK4ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFD0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK4ECC1_MCIO_DDRIO_REG 0x0D024FD0



/* GDCRRXTOPRANK5ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFD4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK5ECC1_MCIO_DDRIO_REG 0x0D024FD4



/* GDCRRXTOPRANK6ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFD8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK6ECC1_MCIO_DDRIO_REG 0x0D024FD8



/* GDCRRXTOPRANK7ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFDC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRRXTOPRANK7ECC1_MCIO_DDRIO_REG 0x0D024FDC



/* GDCRTXTOPRANK0ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFE0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK0ECC1_MCIO_DDRIO_REG 0x0D024FE0



/* GDCRTXTOPRANK1ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFE4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK1ECC1_MCIO_DDRIO_REG 0x0D024FE4



/* GDCRTXTOPRANK2ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFE8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK2ECC1_MCIO_DDRIO_REG 0x0D024FE8



/* GDCRTXTOPRANK3ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFEC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK3ECC1_MCIO_DDRIO_REG 0x0D024FEC



/* GDCRTXTOPRANK4ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFF0)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK4ECC1_MCIO_DDRIO_REG 0x0D024FF0



/* GDCRTXTOPRANK5ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFF4)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK5ECC1_MCIO_DDRIO_REG 0x0D024FF4



/* GDCRTXTOPRANK6ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFF8)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK6ECC1_MCIO_DDRIO_REG 0x0D024FF8



/* GDCRTXTOPRANK7ECC1_MCIO_DDRIO_REG supported on:                            */
/*       IVT_EP (0x4018CFFC)                                                  */
/* Register default value:              0x00000000                            */
#define GDCRTXTOPRANK7ECC1_MCIO_DDRIO_REG 0x0D024FFC































#endif /* MCIO_DDRIO_h */
