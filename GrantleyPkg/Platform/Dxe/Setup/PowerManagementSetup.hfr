//
// This file contains an 'Intel Peripheral Driver' and is      
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may 
// be modified by the user, subject to additional terms of the 
// license agreement                                           
//
// *++
//
// Copyright (c) 1999 - 2019 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// 
// 
// Module Name:
//
//   PowerManagementSetup.hfr 
// 
// Abstract:
// 
//   Power Management Setup formset.
// 
// Revision History: 
// 
// --*/

#include <Token.h> // AptioV server override

  form formid = VFR_FORMID_PWRMGT,

    title         = STRING_TOKEN(STR_POWER_MGT_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_POWER_MGT_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    
      oneof varid     = SYSTEM_CONFIGURATION.LOT26UnusedVrPowerDownEnable,
          prompt      = STRING_TOKEN(STR_LOT26_ENABLE_PROMPT),
          help        = STRING_TOKEN(STR_LOT26_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    
    
      oneof varid     = SYSTEM_CONFIGURATION.UFSDisable,
          prompt      = STRING_TOKEN(STR_UFS_DISABLE_PROMPT),
          help        = STRING_TOKEN(STR_UFS_DISABLE_HELP),
          option text = STRING_TOKEN(STR_ENABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_DISABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SYSTEM_CONFIGURATION.CpuPmTuning,
          prompt      = STRING_TOKEN(STR_CPU_PM_TUNING_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PM_TUNING_HELP),
          option text = STRING_TOKEN(STR_AUTO),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_MANUAL),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    
   oneof varid     = SYSTEM_CONFIGURATION.ProcessorEistEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_EIST),
        help        = STRING_TOKEN(STR_PROCESSOR_EIST_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = DEFAULT | RESET_REQUIRED;
    endoneof;

      // Config TDP
      suppressif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0;
        oneof varid  = SYSTEM_CONFIGURATION.ConfigTDP,
            prompt   = STRING_TOKEN (STR_CONFIG_TDP_ENABLE),
            help     = STRING_TOKEN (STR_CONFIG_TDP_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif; 

      suppressif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0
               OR ideqval SYSTEM_CONFIGURATION.ConfigTDP == 0;
        oneof varid  = SYSTEM_CONFIGURATION.ConfigTDPLevel,
            prompt   = STRING_TOKEN (STR_CONFIG_TDP_LEVEL),
            help     = STRING_TOKEN (STR_CONFIG_TDP_LEVEL_HELP),
            option text = STRING_TOKEN(STR_NOMINAL),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(LEVEL_1),  value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(LEVEL_2),  value = 2, flags = RESET_REQUIRED;
          endoneof;
      endif; 
      //IOTG start
     oneof varid  = SYSTEM_CONFIGURATION.ProcessorIOTGEnable,
            prompt   = STRING_TOKEN (STR_PROCESSOR_IOTG_PROMPT),
            help     = STRING_TOKEN (STR_PROCESSOR_IOTG_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
          endoneof;
      //IOTG end
  //uncore override start
   suppressif ideqval SYSTEM_CONFIGURATION.OverclockingSupport == 1;
  oneof varid  = SYSTEM_CONFIGURATION.UncoreCLROverrideEnable,
            prompt   = STRING_TOKEN (STR_UNCORE_FREQ_OVRD_PROMPT),
            help     = STRING_TOKEN (STR_UNCORE_FREQ_OVRD_PROMPT_HELP),
            option text = STRING_TOKEN(STR_AUTO),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_MANUAL),  value = 1, flags = RESET_REQUIRED;
          endoneof;
     endif; 
  //uncore override end
       suppressif ideqval SYSTEM_CONFIGURATION.cpuType == CPU_HSX
       OR ideqval SYSTEM_CONFIGURATION.UncoreCLROverrideEnable == 0;   
       numeric varid   = SYSTEM_CONFIGURATION.UncoreFreq, 
          prompt      = STRING_TOKEN(STR_UNCORE_FREQ_PROMPT),
          help        = STRING_TOKEN(STR_UNCORE_FREQ_PROMPT_HELP),
#ifndef GRANGEVILLE_FLAG 
              flags   = RESET_REQUIRED,
              minimum = 0,
              maximum = 26,
              step    = 0,
              default = 16,
 #else
              flags   = RESET_REQUIRED,
              minimum = 0,
              maximum = 26,
              step    = 0,
              default = 16,
 #endif
      endnumeric;
      endif;

  //P State Control From Entry
  grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0;
    goto P_STATE_CONTROL_FORMID,
    prompt  = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_TITLE),
    help    = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_HELP);
  endif;    //Eist grayout
  //HWPM
  suppressif NOT ideqval SYSTEM_CONFIGURATION.cpuType == CPU_BDX;
    goto HWPM_STATE_CONTROL_FORMID,
    prompt  = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_TITLE),
    help    = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_HELP);
  endif;
  
  //C State Control Form Entry
  goto CPU0_CSTATE_CONTROL_FORM_ID,
  prompt  = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_TITLE),
  help    = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_HELP);
   
  //T State Control Form Entry
  goto CPU_TSTATE_CONTROL_FORM_ID,
  prompt  = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_TITLE),
  help    = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_HELP);
   
  //Cpu Thermal Management Form Entry
  goto CPU_THERMMAL_MANAGE_FORM_ID,
  prompt  = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_TITLE),
  help    = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_HELP);

  //Advanced PM Tuning Form 
  goto CPU_POWER_ADVANCED_CONFIG_FORM_ID,
  prompt = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_TITLE),
  help = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_HELP);
 
  //DRAM RAPL Config
  goto DRAM_RAPL_FORMID,
  prompt = STRING_TOKEN(STR_DRAM_RAPL_FORM),
  help = STRING_TOKEN(STR_DRAM_RAPL_FORM_HELP);

  //SOCKET RAPL Config
  goto SOCKET_RAPL_FORMID,
  prompt = STRING_TOKEN(STR_SOCKET_RAPL_FORM),
  help = STRING_TOKEN(STR_SOCKET_RAPL_FORM_HELP);


endform;    // end of VFR_FORMID_PWRMGT

  //HWPM page starts
  suppressif NOT ideqval SYSTEM_CONFIGURATION.cpuType == CPU_BDX;
  //P State Control Form start
  form formid = HWPM_STATE_CONTROL_FORMID,
  title = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //
    // HWPM options setup option
    //
        oneof varid     = SYSTEM_CONFIGURATION.ProcessorHWPMEnable,
            prompt      = STRING_TOKEN(STR_PROCESSOR_HWPM_ENABLE),
            help        = STRING_TOKEN(STR_PROCESSOR_HWPM_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_NATIVE_MODE),   value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_HWPM_OOB),   value = 2,  flags = RESET_REQUIRED;
      endoneof;
      
     //
     //processor Autonomous c-state setup option
     //
        oneof varid     = SYSTEM_CONFIGURATION.ProcessorAutonumousCstateEnable,
            prompt      = STRING_TOKEN(STR_PROCESSOR_AUTO_CSTATE_ENABLE),
            help        = STRING_TOKEN(STR_PROCESSOR_AUTO_CSTATE_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED;
      endoneof;   
  endform;  //end HWPM State Control Form
  endif;
  
  //
  //HWPM page ends
  //
  //P State Control Form start
  form formid = P_STATE_CONTROL_FORMID,
  title = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    // Pstate Doamin
    oneof varid     = SYSTEM_CONFIGURATION.PStateDomain,
        prompt      = STRING_TOKEN(STR_P_STATE_DOMAIN_REPORT),
        help        = STRING_TOKEN(STR_P_STATE_DOMAIN_REPORT_HELP),
        option text = STRING_TOKEN(STR_ALL),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ONE),   value = 1,  flags = RESET_REQUIRED;
      endoneof;

    // EIST/GV3 PSD Function Control
    //
    grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0x00;
        oneof varid     = SYSTEM_CONFIGURATION.ProcessorEistPsdFunc,
            prompt      = STRING_TOKEN(STR_PROCESSOR_PSD_FUNC),
            help        = STRING_TOKEN(STR_PROCESSOR_PSD_FUNC_HELP),
            option text = STRING_TOKEN(STR_HW_ALL),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_SW_ALL),   value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SW_ANY),   value = 2,  flags = RESET_REQUIRED;
      endoneof;
      endif;

    // PCPS - SINGLE_PCTL
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorSinglePCTLEn,
          prompt      = STRING_TOKEN(STR_PROCESSOR_SINGLE_PCTL),
          help        = STRING_TOKEN(STR_PROCESSOR_SINGLE_PCTL_HELP),
          option text = STRING_TOKEN(STR_NO),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_YES),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    // PCPS - SPD
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorSPD,
          prompt      = STRING_TOKEN(STR_PROCESSOR_SPD_FUNC),
          help        = STRING_TOKEN(STR_PROCESSOR_SPD_FUNC_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    // PL2_SAFETY_NET_ENABLE 
    oneof varid     = SYSTEM_CONFIGURATION.Pl2SafetyNetEnable,
          prompt      = STRING_TOKEN(STR_PL2_SAFETY_NET_ENABLE),
          help        = STRING_TOKEN(STR_PL2_SAFETY_NET_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

    grayoutif  ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0;
        oneof varid   = SYSTEM_CONFIGURATION.EnergyEfficientPState,
            prompt   = STRING_TOKEN (STR_ENERGY_EFFICIENT_P_STATE),
            help     = STRING_TOKEN (STR_ENERGY_EFFICIENT_P_STATE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

// AptioV server override - add RESET_REQUIRED flags to BootPState
      oneof varid = SYSTEM_CONFIGURATION.BootPState,
        prompt  = STRING_TOKEN (STR_BOOT_P_STATE),
        help    = STRING_TOKEN (STR_BOOT_P_STATE_HELP),
        option text = STRING_TOKEN (STR_BOOT_P_STATE_MAX), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BOOT_P_STATE_MIN), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0;
      oneof varid  = SYSTEM_CONFIGURATION.TurboMode,
          prompt   = STRING_TOKEN (STR_TURBO_MODE_ENABLE),
          help     = STRING_TOKEN (STR_TURBO_MODE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;
      endif;

    //Modify XE RATIO FORM naming based on XE or OC condition
    grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0 OR
              ideqval SYSTEM_CONFIGURATION.TurboMode == 0;
      goto XE_RATIO_LIMIT_FORMID,
      prompt  = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_TITLE),
      help    = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_HELP);
      endif;

  endform;  //end P State Control Form

  // XE Ratio Limit Setup Sub Form Start
  form formid = XE_RATIO_LIMIT_FORMID,
  title = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
    //Enable Xe
    suppressif ideqval SYSTEM_CONFIGURATION.TurboMode == 0;


    suppressif TRUE; // AptioV server override - Broadwell-DE does not support XE
      oneof varid     = SYSTEM_CONFIGURATION.EnableXe,
        prompt      = STRING_TOKEN(STR_CPU_XE_PROMPT),
        help        = STRING_TOKEN(STR_CPU_XE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif; // AptioV server override - Broadwell-DE does not support XE

      //
      // Overclocking Lock setting is depricated. Always lock Overclocking MSR 
      //
      suppressif TRUE;
	  oneof varid     = SYSTEM_CONFIGURATION.OverclockingLock,
          prompt      = STRING_TOKEN(STR_OVERCLOCKING_LOCK),
          help        = STRING_TOKEN(STR_OVERCLOCKING_LOCK_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
	  endif;
	  endif;

    //suppressif ideqval SYSTEM_CONFIGURATION.TurboMode == 0;
    //  numeric varid   = SYSTEM_CONFIGURATION.XeTdcLimit,
    //    prompt  = STRING_TOKEN(STR_XE_TDC_LIMIT),
    //    help    = STRING_TOKEN(STR_XE_TDC_LIMIT_HELP),
    //    flags   = 0 | RESET_REQUIRED,
    //    minimum = 0,
    //    maximum = 32767,    //
    //    step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
    //    default = 0,
    //  endnumeric;
    //  endif;

  //  suppressif ideqval SYSTEM_CONFIGURATION.XeRatioLimit[0] == 0;
  //    numeric varid   = SYSTEM_CONFIGURATION.XeVoltage,
  //      prompt  = STRING_TOKEN(STR_TURBO_VID_OVERRIDE),
  //      help    = STRING_TOKEN(STR_TURBO_VID_OVERRIDE_HELP),
  //      flags   = 0 | RESET_REQUIRED,
   //     minimum = 0,
    //    maximum = 255,      // 
   //     step    = 1,        // Stepping of 0 equates to a manual entering of a value, 
                            // otherwise it will auto-increment with a left/right arrow
   //     default = 0,
   //   endnumeric;
   //   endif;
      
    suppressif ideqval SYSTEM_CONFIGURATION.EnableXe == 0
                    OR ideqval SYSTEM_CONFIGURATION.TurboMode == 0;
      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[0],
        prompt  = STRING_TOKEN(STR_1_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_1_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[1],
        prompt  = STRING_TOKEN(STR_2_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_2_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[2],
        prompt  = STRING_TOKEN(STR_3_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_3_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[3],
        prompt  = STRING_TOKEN(STR_4_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_4_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[4],
        prompt  = STRING_TOKEN(STR_5_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_5_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[5],
        prompt  = STRING_TOKEN(STR_6_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_6_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[6],
        prompt  = STRING_TOKEN(STR_7_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_7_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[7],
        prompt  = STRING_TOKEN(STR_8_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_8_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[8],
        prompt  = STRING_TOKEN(STR_9_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_9_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
      endnumeric;
      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[9],
        prompt  = STRING_TOKEN(STR_10_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_10_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[10],
        prompt  = STRING_TOKEN(STR_11_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_11_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[11],
        prompt  = STRING_TOKEN(STR_12_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_12_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[12],
        prompt  = STRING_TOKEN(STR_13_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_13_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[13],
        prompt  = STRING_TOKEN(STR_14_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_14_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[14],
        prompt  = STRING_TOKEN(STR_15_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_15_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
          default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[15],
        prompt  = STRING_TOKEN(STR_16_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_16_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
          default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[16],
        prompt  = STRING_TOKEN(STR_17_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_17_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
          default = 0,
        endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[17],
        prompt  = STRING_TOKEN(STR_18_CORE_RATIO_LIMIT),
        help    = STRING_TOKEN(STR_18_CORE_RATIO_LIMIT_HELP),
        flags   = 0 | RESET_REQUIRED,
          minimum = 0,
        maximum = 255,      //
        step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
          default = 0,
        endnumeric;

        suppressif NOT ideqval SYSTEM_CONFIGURATION.cpuType == 2;   //cpuType HSX=0,BDX=2
          numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[18],
            prompt  = STRING_TOKEN(STR_19_CORE_RATIO_LIMIT),
            help    = STRING_TOKEN(STR_19_CORE_RATIO_LIMIT_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 255,      //
            step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                                // otherwise it will auto-increment with a left/right arrow
            default = 0,
          endnumeric;

          numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[19],
            prompt  = STRING_TOKEN(STR_20_CORE_RATIO_LIMIT),
            help    = STRING_TOKEN(STR_20_CORE_RATIO_LIMIT_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 255,      //
            step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                                // otherwise it will auto-increment with a left/right arrow
            default = 0,
          endnumeric;

          numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[20],
            prompt  = STRING_TOKEN(STR_21_CORE_RATIO_LIMIT),
            help    = STRING_TOKEN(STR_21_CORE_RATIO_LIMIT_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 255,      //
            step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
            default = 0,
          endnumeric;

          numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[21],
            prompt  = STRING_TOKEN(STR_22_CORE_RATIO_LIMIT),
            help    = STRING_TOKEN(STR_22_CORE_RATIO_LIMIT_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 255,      //
            step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                                // otherwise it will auto-increment with a left/right arrow
            default = 0,
          endnumeric;

          numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[22],
            prompt  = STRING_TOKEN(STR_23_CORE_RATIO_LIMIT),
            help    = STRING_TOKEN(STR_23_CORE_RATIO_LIMIT_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 255,      //
            step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                                // otherwise it will auto-increment with a left/right arrow
            default = 0,
          endnumeric;

          numeric varid   = SYSTEM_CONFIGURATION.XeRatioLimit[23],
            prompt  = STRING_TOKEN(STR_24_CORE_RATIO_LIMIT),
            help    = STRING_TOKEN(STR_24_CORE_RATIO_LIMIT_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 255,      //
            step    = 1,        // Stepping of 0 equates to a manual entering of a value,
                                // otherwise it will auto-increment with a left/right arrow
            default = 0,
          endnumeric;

        endif;                       //suppressif ideqval SYSTEM_CONFIGURATION.cpuType != 2;
    
    endif;

  endform;  //nd of XE Ratio Limit Setup Sub Form
  // end of XE Ratio Limit Setup Sub Form


  //C State Control Form start
  form formid = CPU0_CSTATE_CONTROL_FORM_ID,
  title = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  
    //
    // C2C3TT - C2 to C3 Transition Timer
    //
    numeric varid     = SYSTEM_CONFIGURATION.C2C3TT,
        prompt      = STRING_TOKEN(STR_C2C3TT),
        help        = STRING_TOKEN(STR_C2C3TT_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 0,                          //0 = AUTO
        endnumeric;

    //
    // Enable CPU C states of processor
    //
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorCcxEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_CCX),
        help        = STRING_TOKEN(STR_PROCESSOR_CCX_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags =  RESET_REQUIRED;
    endoneof;

    grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorCcxEnable == 00;
        //
        // Package C state limit option
        //
        oneof varid     = SYSTEM_CONFIGURATION.PackageCState,
            prompt      = STRING_TOKEN(STR_PACKAGE_CSTATE_REPORT),
            help        = STRING_TOKEN(STR_PACKAGE_CSTATE_REPORT_HELP),
            option text = STRING_TOKEN(STR_C0SUPPORT),      value = 0,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_C2SUPPORT),      value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_C6SUPPORT),      value = 2,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_C6_RETSUPPORT),  value = 3,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        //    option text = STRING_TOKEN(STR_C7SUPPORT),      value = 4,  flags = RESET_REQUIRED;
        //    option text = STRING_TOKEN(STR_C7SSUPPORT),     value = 5,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_NOLIMIT),        value = 7,  flags = RESET_REQUIRED;
        endoneof;

        //
        // Enable ACPI C1 Autodemotion - Removing Auto demotion and undemotion for IvyTown EX
        //
   //     oneof varid     = SYSTEM_CONFIGURATION.C1AutoDemotion,
   //         prompt      = STRING_TOKEN(STR_C1_AUTO_DEMOTION),
   //        help        = STRING_TOKEN(STR_C1_AUTO_DEMOTION_HELP),
   //       option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED| MANUFACTURING | DEFAULT;
   //         option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED ;
   //     endoneof;

        //
        // Enable ACPI C3 Autodemotion
        //
   //        oneof varid     = SYSTEM_CONFIGURATION.C3AutoDemotion,
   //            prompt      = STRING_TOKEN(STR_C3_AUTO_DEMOTION),
   //            help        = STRING_TOKEN(STR_C3_AUTO_DEMOTION_HELP),
   //            option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
   //            option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
   //        endoneof;

   //        oneof varid       = SYSTEM_CONFIGURATION.CStateUnDemotion,
   //                prompt      = STRING_TOKEN(STR_CST_UNDEMOTION),
   //                help        = STRING_TOKEN(STR_CST_UNDEMOTION_HELP),
   //                option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
   //                option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION), value = 1, flags = RESET_REQUIRED;
   //                option text = STRING_TOKEN(STR_C3_AUTO_DEMOTION), value = 2, flags = RESET_REQUIRED;
   //                option text = STRING_TOKEN(STR_C1_AND_C3_AUTO_DEMOTION), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;        
    //    endoneof;
        
    //
    // Enable ACPI C3 report to OS
    //
    oneof varid     = SYSTEM_CONFIGURATION.C3Enable,
        prompt      = STRING_TOKEN(STR_C3_ENABLE),
        help        = STRING_TOKEN(STR_C3_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
    endoneof;

    //
    // Enable/Disable CPU C6(ACPI C3) report to OS
    //
    oneof varid     = SYSTEM_CONFIGURATION.C6Enable,
        prompt      = STRING_TOKEN(STR_C6_ENABLE),
        help        = STRING_TOKEN(STR_C6_ENABLE_HELP),
#ifndef GRANGEVILLE_FLAG 		
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED| MANUFACTURING | DEFAULT; 
#else
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED| MANUFACTURING | DEFAULT; 
#endif		
    endoneof;

    //
    // Enable/Disable CPU C7(ACPI C3) report to OS
    //
    //oneof varid     = SYSTEM_CONFIGURATION.C7Enable,
    //    prompt      = STRING_TOKEN(STR_C7_ENABLE),
    //    help        = STRING_TOKEN(STR_C7_ENABLE_HELP),
    //    option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    //    option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED; 
    //endoneof;

    //
    // Enable CPU C1E
    //
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorC1eEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_C1E),
        help        = STRING_TOKEN(STR_PROCESSOR_C1E_HELP),
#ifndef GRANGEVILLE_FLAG 		
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED ;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED| MANUFACTURING | DEFAULT;
#else
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
#endif		
    endoneof;
    endif;

     oneof varid     = SYSTEM_CONFIGURATION.OSCx,
            prompt      = STRING_TOKEN(STR_OSCX_REPORT),
            help        = STRING_TOKEN(STR_OSCX_REPORT_HELP),
            option text = STRING_TOKEN(STR_OSCX_C2),  value = 0, flags = DEFAULT |MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_OSCX_C3),  value = 1, flags = RESET_REQUIRED;
    endoneof;


  endform; //end C State form



  //T State Control Form start
  form formid = CPU_TSTATE_CONTROL_FORM_ID,
  title = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  
    //
    // T state
    //
    oneof varid     = SYSTEM_CONFIGURATION.TStateEnable,
        prompt      = STRING_TOKEN(STR_ACPI_TSTATES_ENABLE),
        help        = STRING_TOKEN(STR_ACPI_TSTATES_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED  | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.TStateEnable == 0; 
      oneof varid   = SYSTEM_CONFIGURATION.OnDieThermalThrottling,
        prompt      = STRING_TOKEN(STR_TT_DUTY_CYCLE),
        help        = STRING_TOKEN(STR_TT_DUTY_CYCLE_HELP),
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_0),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_1),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_2),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_3),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_4),  value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_5),  value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_6),  value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_7),  value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_8),  value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_9),  value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_10),  value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_11),  value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_12),  value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_13),  value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_14),  value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_15),  value = 15, flags = RESET_REQUIRED;
      endoneof;

  endif;

  endform; //end T State form
  
  //CPU Thermal Management form Start
  form formid = CPU_THERMMAL_MANAGE_FORM_ID,
  title = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // 4168664: changes to EnableProcHot bios knob to allow selection of all prochot modes
      // ENABLE_BIDIR_PROCHOT - MSR 0x1FC Bit[0]
      // DIS_PROCHOT_OUT  - MSR 0x1FC Bit[21]
      oneof varid     = SYSTEM_CONFIGURATION.EnableProcHot,
          prompt      = STRING_TOKEN(STR_PROC_HOT_ENABLE),
          help        = STRING_TOKEN(STR_PROC_HOT_ENABLE_HELP),
          option text = STRING_TOKEN(STR_OUTPUT_ONLY),     value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),         value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_BIDIRECTIONAL),   value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_INPUT_ONLY),      value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SYSTEM_CONFIGURATION.EnableThermalMonitor, 
        prompt      = STRING_TOKEN(STR_THERMAL_MONITOR_PROMPT), 
        help        = STRING_TOKEN(STR_THERMAL_MONITOR_PROMPT_HELP), 
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED; 
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      endoneof; 

        // PROCHOT_RESPONSE - MSR 0x1FC Bit[26]
        oneof varid     = SYSTEM_CONFIGURATION.ProchotResponse,
          prompt      = STRING_TOKEN(STR_PROC_HOT_RESPONSE),
          help        = STRING_TOKEN(STR_PROC_HOT_RESPONSE_HELP),
          option text = STRING_TOKEN(STR_PN_CLAMPING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PM_CLAMPING),   value = 1, flags = RESET_REQUIRED;
        endoneof;
        
#ifdef DE_SKU
      oneof varid = SYSTEM_CONFIGURATION.UsePchHot,
        prompt = STRING_TOKEN(STR_USE_PCH_HOT),
        help = STRING_TOKEN(STR_USE_PCH_HOT_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.UsePchTempFromME,
        prompt = STRING_TOKEN(STR_USE_PCH_TEMP_FROM_ME),
        help = STRING_TOKEN(STR_USE_PCH_TEMP_FROM_ME_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.CpuToPchThrottle,
        prompt = STRING_TOKEN(STR_CPU_TO_PCH_THROTTLE),
        help = STRING_TOKEN(STR_CPU_TO_PCH_THROTTLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
#endif    //#ifdef DE_SKU


  endform; //end Thermal management form

  //Advanced PM Tuning Form Entry Start
  form formid = CPU_POWER_ADVANCED_CONFIG_FORM_ID,
  title = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_TITLE);
  subtitle text = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

      goto ENERGY_PERF_BIAS_FORM_ID,
      prompt  = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM),
      help    = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM_HELP);

      goto PROG_POWERCTL_MSR_FORM_ID,
      prompt  = STRING_TOKEN(STR_PROG_POWERCTL_MSR_FORM),
      help    = STRING_TOKEN(STR_PROG_POWERCTL_MSR_FORM_HELP);

      goto PROG_MSR_PP_CURT_CFG_CTRL_FORM_ID,
      prompt  = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM),
      help    = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM_HELP);

      goto PROG_ENTRY_CRITERIA_FORM_ID,
      prompt  = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM),
      help    = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM_HELP);

      goto PROG_CSR_SWLTROVRD_FORM_ID,
      prompt  = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM),
      help    = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM_HELP);

   //
   //BIOS HSD 4988172:We don't need these knobs as these registers are Write only.
   //Recommendation: Remove those knobs until bug Silicon HSD 281641 is fixed
   //

#ifdef GRANGEVILLE_FLAG
#endif  //#ifdef GRANGEVILLE_FLAG
    
  endform;  //Advanced PM Tuning Form Entry end

  //----------- Advanced PM Tuning Form Start
    //Energy_PERF_BIAS Form Start
    form formid = ENERGY_PERF_BIAS_FORM_ID,
    title = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM);
    subtitle text = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // Power Performance Tuning Configuration Mode - MSR 0x1FC [25]
      oneof varid     = SYSTEM_CONFIGURATION.PwrPerfTuning,
          prompt      = STRING_TOKEN(STR_PWR_PERF_TUNING),
          help        = STRING_TOKEN(STR_PWR_PERF_TUNING_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SYSTEM_CONFIGURATION.PwrPerfTuning == 0;
      // Once Power Performance Tuning Configuration Mode = 1, Use input from ENERGY_PERF_BIAS_CONFIG - MSR 0xA01 [6:3] = MSR 0x1B0 [6:3]
      oneof varid     = SYSTEM_CONFIGURATION.AltEngPerfBIAS,
        prompt      = STRING_TOKEN(STR_PWR_ENERGY_PERF),
        help        = STRING_TOKEN(STR_PWR_ENERGY_PERF_HELP),
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_1),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_2),   value = 0x7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_3),   value = 0x8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_4),   value = 0xf, flags = RESET_REQUIRED;
      endoneof;
      endif;

      // Enable Power/Perf Dynamic Switching - MSR 0x1FC [24]
      oneof varid     = SYSTEM_CONFIGURATION.PwrPerfSwitch,
          prompt      = STRING_TOKEN(STR_PWR_PERF_SWITCH),
          help        = STRING_TOKEN(STR_PWR_PERF_SWITCH_HELP),
          option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),     value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // ENERGY_PERF_BIAS_CONFIG.WORKLD_CONFIG - MSR 0x1FC [2:0]
      oneof varid     = SYSTEM_CONFIGURATION.WorkLdConfig,
          prompt      = STRING_TOKEN(STR_WORKLD_CONFIG),
          help        = STRING_TOKEN(STR_WORKLD_CONFIG_HELP),
          option text = STRING_TOKEN(STR_UMA),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_WORKLD_CONFIG_BALANCED),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_NUMA),    value = 2, flags = RESET_REQUIRED;          
      endoneof;

      // ENERGY_PERF_BIAS_CONFIG.AVG_TIME_WINDOW
      numeric varid   = SYSTEM_CONFIGURATION.EngAvgTimeWdw1, 
        prompt  = STRING_TOKEN(STR_AVG_TIME_WINDOW),
        help    = STRING_TOKEN(STR_AVG_TIME_WINDOW_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFF,
          step    = 0,
          default = 0x17,
        endnumeric;

      // ENERGY_PERF_BIAS_CONFIG.P0_total_time_threshold_low
      numeric varid   = SYSTEM_CONFIGURATION.P0TtlTimeLow1, 
        prompt  = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_LOW),
        help    = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_LOW_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
        maximum = 0x3F,
          step    = 0,
        default = 0x23,
        endnumeric;

      // ENERGY_PERF_BIAS_CONFIG.P0_total_time_threshold_high
      numeric varid   = SYSTEM_CONFIGURATION.P0TtlTimeHigh1, 
        prompt  = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_HIGH),
        help    = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_HIGH_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
        maximum = 0x3F,
          step    = 0,
        default = 0x3a,
        endnumeric;
        
    endform;  //end of Energy_PERF_BIAS Form

    //Program PowerCtl Msr Form Start
    form formid = PROG_POWERCTL_MSR_FORM_ID,
    title = STRING_TOKEN(STR_PROG_POWERCTL_MSR_FORM);
    subtitle text = STRING_TOKEN(STR_PROG_POWERCTL_MSR_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // PKG C-state Latency Negotiation with PCH Disable - MSR 0x1FC Bit[30]
      oneof varid     = SYSTEM_CONFIGURATION.PkgCLatNeg,
          prompt      = STRING_TOKEN(STR_PKG_C_LAT_NEG),
          help        = STRING_TOKEN(STR_PKG_C_LAT_NEG_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      // LTR Software Input Disable - MSR 0x1FC Bit[28]
      oneof varid     = SYSTEM_CONFIGURATION.LTRSwInput,
          prompt      = STRING_TOKEN(STR_LTR_SW_INPUT),
          help        = STRING_TOKEN(STR_LTR_SW_INPUT_HELP),
          option text = STRING_TOKEN(STR_TAKE_SW_LTR),     value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_IGNORE_SW_LTR),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.UFSDisable == 1;
      // Dynamic Power/Perf Disable SAPM Control - MSR 0x1FC Bit[22]
      oneof varid     = SYSTEM_CONFIGURATION.SAPMControl,
          prompt      = STRING_TOKEN(STR_SAPM_CTRL),
          help        = STRING_TOKEN(STR_SAPM_CTRL_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif; // suppressif

      // PHOLD_SR_Disable - MSR 0x1FC Bit[17]
      oneof varid     = SYSTEM_CONFIGURATION.PholdSrDisable,
          prompt      = STRING_TOKEN(STR_PHOLD_SR_DISABLE),
          help        = STRING_TOKEN(STR_PHOLD_SR_DISABLE_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      // PHOLD_CST_PREVENTION_INIT - MSR 0x1FC Bit[16]
      oneof varid     = SYSTEM_CONFIGURATION.PholdCstPreventionInit,
          prompt      = STRING_TOKEN(STR_PHOLD_CST_PREV_INIT),
          help        = STRING_TOKEN(STR_PHOLD_CST_PREV_INIT_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      // FAST_Brk_Int_En - MSR 0x1FC Bit[4]
      oneof varid     = SYSTEM_CONFIGURATION.FASTBrkIntEn,
          prompt      = STRING_TOKEN(STR_FAST_BRK_INT_EN),
          help        = STRING_TOKEN(STR_FAST_BRK_INT_EN_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // FAST_Brk_Snp_En - MSR 0x1FC Bit[3]
      oneof varid     = SYSTEM_CONFIGURATION.FASTBrkSnpEn,
          prompt      = STRING_TOKEN(STR_FAST_BRK_SNP_EN),
          help        = STRING_TOKEN(STR_FAST_BRK_SNP_EN_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // EE_TURBO_DISABLE - MSR 0x1FC Bit[19]
      oneof varid     = SYSTEM_CONFIGURATION.EETurboDisable,
          prompt      = STRING_TOKEN(STR_EE_TURBO_DISABLE),
          help        = STRING_TOKEN(STR_EE_TURBO_DISABLE_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    endform;    //end of Program PowerCtl Msr Form

    //Program PP0 Current Config Control Msr Form Start
    form formid = PROG_MSR_PP_CURT_CFG_CTRL_FORM_ID,
    title = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM);
    subtitle text = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM);  
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL  0x601
      // Validation controls to allow Manual overrides for Primary_Plane_Current_Config_Control
      oneof varid     = SYSTEM_CONFIGURATION.PriPlnCurCfgValCtl,
          prompt      = STRING_TOKEN(STR_PPCCCOVRD_VALCTL),
          help        = STRING_TOKEN(STR_PPCCCOVRD_VALCTL_HELP),
          option text = STRING_TOKEN(STR_AUTO),    value = 0, flags = MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_MANUAL),   value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.CURRENT_LIMIT
      oneof varid     = SYSTEM_CONFIGURATION.CurrentConfig,
          prompt      = STRING_TOKEN(STR_CURRENT_CONFIG),
          help        = STRING_TOKEN(STR_CURRENT_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SYSTEM_CONFIGURATION.CurrentConfig == 0;
        numeric varid   = SYSTEM_CONFIGURATION.CurrentLimit, 
          prompt  = STRING_TOKEN (STR_CURRENT_LIMIT),
          help    = STRING_TOKEN (STR_CURRENT_LIMIT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0x800,
          step    = 0,
          default = 0x0438,
        endnumeric;
      endif;

      goto PROG_MSR_PP_CURT_PSI_CONFIG_FORM_ID,
      prompt  = STRING_TOKEN(STR_MSR_PP_CURT_PSI_CONFIG_FORM),
      help    = STRING_TOKEN(STR_MSR_PP_CURT_PSI_CONFIG_FORM_HELP);

    endform;  //end of Program PP0 Current Config Control Msr Form 

    //PSI Config Sub Form Statrt
    form formid = PROG_MSR_PP_CURT_PSI_CONFIG_FORM_ID,
    title = STRING_TOKEN(STR_MSR_PP_CURT_PSI_CONFIG_FORM);
    subtitle text = STRING_TOKEN(STR_MSR_PP_CURT_PSI_CONFIG_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.PSI3_THRESHOLD
       numeric varid   = SYSTEM_CONFIGURATION.Psi3Thshld, 
          prompt  = STRING_TOKEN (STR_PSI3_THSHOLD),
          help    = STRING_TOKEN (STR_PSI3_THSHOLD_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0x7F,
          step    = 0,
          default = 0x01,
        endnumeric;

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.PSI2_THRESHOLD
       numeric varid   = SYSTEM_CONFIGURATION.Psi2Thshld, 
          prompt  = STRING_TOKEN (STR_PSI2_THSHOLD),
          help    = STRING_TOKEN (STR_PSI2_THSHOLD_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0x7F,
          step    = 0,
          default = 0x05,
        endnumeric;

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.PSI1_THRESHOLD
       numeric varid   = SYSTEM_CONFIGURATION.Psi1Thshld, 
          prompt  = STRING_TOKEN (STR_PSI1_THSHOLD),
          help    = STRING_TOKEN (STR_PSI1_THSHOLD_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0x7F,
          step    = 0,
          default = 0x14,
        endnumeric;

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.LOCK
      oneof varid     = SYSTEM_CONFIGURATION.PpcccLock,
          prompt      = STRING_TOKEN(STR_PPCCCLOCK),
          help        = STRING_TOKEN(STR_PPCCCLOCK_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

    endform;  //end of PSI Config Sub Form

    //Program Entry Criteria CSR Form Start
    form formid = PROG_ENTRY_CRITERIA_FORM_ID,
    title = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM);
    subtitle text = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      oneof varid     = SYSTEM_CONFIGURATION.PkgCstEntryValCtl,
        prompt      = STRING_TOKEN(STR_PKGCENTRYOVRD_VALCTL), 
        help        = STRING_TOKEN(STR_PKGCENTRYOVRD_VALCTL_HELP), 
        option text = STRING_TOKEN(STR_AUTO),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SYSTEM_CONFIGURATION.PkgCstEntryValCtl == 0;    
      goto SOCKET0_CPUPWRADVPMCFG_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_0_FORM),
      help    = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_HELP);

      goto SOCKET1_CPUPWRADVPMCFG_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_1_FORM),
      help    = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_HELP);

      goto SOCKET2_CPUPWRADVPMCFG_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_2_FORM),
      help    = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_HELP);

      goto SOCKET3_CPUPWRADVPMCFG_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_3_FORM),
      help    = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_HELP);
      endif;  //if PkgCstEntryValCtl

    endform;    //end of Program Entry Criteria CSR Form 


    //Program SWLTR Override CSR Form Start
    form formid = PROG_CSR_SWLTROVRD_FORM_ID,
    title = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM);
    subtitle text = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // CSR_PCIE_ILTR_OVRD  (CSR 1:30:1:78)
      // SW_LTR_OVRD (MSR 0xa02) -- not used
      oneof varid     = SYSTEM_CONFIGURATION.SnpLatVld,
          prompt      = STRING_TOKEN(STR_SNOOP_LATVALID_PROMPT),
          help        = STRING_TOKEN(STR_SNOOP_LATVALID_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags =  RESET_REQUIRED;
      endoneof;     

      oneof varid     = SYSTEM_CONFIGURATION.SnpLatOvrd,
          prompt      = STRING_TOKEN(STR_SNOOP_LATOVRD_PROMPT),
          help        = STRING_TOKEN(STR_SNOOP_LATOVRD_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;     

      numeric varid   = SYSTEM_CONFIGURATION.SnpLatMult, 
          prompt      = STRING_TOKEN(STR_SNOOP_LATMULT_PROMPT),
          help        = STRING_TOKEN(STR_SNOOP_LATMULT_PROMPT_HELP),
              flags   = RESET_REQUIRED,
              minimum = 0,
              maximum = 7,
              step    = 0,
              default = 0,
      endnumeric;

       numeric varid   = SYSTEM_CONFIGURATION.SnpLatVal, 
          prompt      = STRING_TOKEN(STR_SNOOP_LATVAL_PROMPT),
          help        = STRING_TOKEN(STR_SNOOP_LATVAL_PROMPT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 0,
              default = 0,
        endnumeric;

      oneof varid     = SYSTEM_CONFIGURATION.NonSnpLatVld,
          prompt      = STRING_TOKEN(STR_NONSNOOP_LATVALID_PROMPT),
          help        = STRING_TOKEN(STR_NONSNOOP_LATVALID_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags =  RESET_REQUIRED;
          endoneof;

      oneof varid     = SYSTEM_CONFIGURATION.NonSnpLatOvrd,
          prompt      = STRING_TOKEN(STR_NONSNOOP_LATOVRD_PROMPT),
          help        = STRING_TOKEN(STR_NONSNOOP_LATOVRD_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;

      numeric varid   = SYSTEM_CONFIGURATION.NonSnpLatMult, 
          prompt      = STRING_TOKEN(STR_NONSNOOP_LATMULT_PROMPT),
          help        = STRING_TOKEN(STR_NONSNOOP_LATMULT_PROMPT_HELP),
              flags   = RESET_REQUIRED,
              minimum = 0,
              maximum = 7,
              step    = 1,
              default = 0,
          endnumeric;

      numeric varid   = SYSTEM_CONFIGURATION.NonSnpLatVal, 
          prompt      = STRING_TOKEN(STR_NONSNOOP_LATVAL_PROMPT),
          help        = STRING_TOKEN(STR_NONSNOOP_LATVAL_PROMPT_HELP),
              flags   = RESET_REQUIRED,
              minimum = 0,
              maximum = 0x3FF,
              step    = 1,
              default = 0,
          endnumeric;
    endform;    //end of Program SWLTR Override CSR Form 

    //Program Dynamic Perf Power Ctl CSR Form Start
    form formid = PROG_CSR_DYNAMIC_PERF_POWER_CTL_FORM_ID,
    title = STRING_TOKEN(STR_CSR_DYNAMIC_PERF_POWER_CTL_FORM);
    subtitle text = STRING_TOKEN(STR_CSR_DYNAMIC_PERF_POWER_CTL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // DYNAMIC_PERF_POWER_CTL.EEP_L_Override - CSR 1:30:2:64 Bit[29:26]
       numeric varid   = SYSTEM_CONFIGURATION.EepLOverride, 
          prompt  = STRING_TOKEN (STR_EEP_L_OVERRIDE),
          help    = STRING_TOKEN (STR_EEP_L_OVERRIDE_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xF,
          step    = 0,
          default = 0,
        endnumeric;

      // DYNAMIC_PERF_POWER_CTL.EEP_L_Override_Enable - CSR 1:30:2:64 Bit[25]
      oneof varid     = SYSTEM_CONFIGURATION.EepLOverrideEn,
          prompt      = STRING_TOKEN(STR_EEP_L_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_EEP_L_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.I_TURBO_OVERRIDE_ENABLE - CSR 1:30:2:64 Bit[24]
      oneof varid     = SYSTEM_CONFIGURATION.ITurboOvrdEn,
          prompt      = STRING_TOKEN(STR_I_TURBO_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_I_TURBO_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.CST_DEMOTION_OVERRIDE_ENABLE - CSR 1:30:2:64 Bit[23]
      oneof varid     = SYSTEM_CONFIGURATION.CstDemotOvrdEN,
          prompt      = STRING_TOKEN(STR_CST_DEMOTION_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_CST_DEMOTION_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.TURBO_DEMOTION_OVERRIDE_ENABLE - CSR 1:30:2:64 Bit[22]
      oneof varid     = SYSTEM_CONFIGURATION.TrboDemotOvrdEn,
          prompt      = STRING_TOKEN(STR_TURBO_DEMOTION_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_TURBO_DEMOTION_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.Uncore_Perf_PLimit_Override_Enable - CSR 1:30:2:64 Bit[20]
      oneof varid     = SYSTEM_CONFIGURATION.UncrPerfPlmtOvrdEn,
          prompt      = STRING_TOKEN(STR_UNCORE_PERF_PLIMIT_OVRD_EN),
          help        = STRING_TOKEN(STR_UNCORE_PERF_PLIMIT_OVRD_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.EET_Override_Enable - CSR 1:10:2:64 Bit[18]
      oneof varid     = SYSTEM_CONFIGURATION.EetOverrideEn,
          prompt      = STRING_TOKEN(STR_EET_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_EET_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.IO_BW_PLimit_Override_Enable - CSR 1:30:2:64 Bit[15]
      oneof varid     = SYSTEM_CONFIGURATION.IoBwPlmtOvrdEn,
          prompt      = STRING_TOKEN(STR_IO_BW_PLIMIT_OVRD_EN),
          help        = STRING_TOKEN(STR_IO_BW_PLIMIT_OVRD_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

/*
      // DYNAMIC_PERF_POWER_CTL.IMC_APM_Override_Enable - CSR 1:30:2:64 Bit[10]
      oneof varid     = SYSTEM_CONFIGURATION.ImcApmOvrdEn,
          prompt      = STRING_TOKEN(STR_IMC_APM_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_IMC_APM_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;
*/
      // DYNAMIC_PERF_POWER_CTL.IOM_APM_Override_Enable - CSR 1:30:2:64 Bit[5]
      oneof varid     = SYSTEM_CONFIGURATION.IomApmOvrdEn,
          prompt      = STRING_TOKEN(STR_IOM_APM_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_IOM_APM_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.QPI_APM_Override_Enable - CSR 1:30:2:64 Bit[0]
      oneof varid     = SYSTEM_CONFIGURATION.QpiApmOvrdEn,
          prompt      = STRING_TOKEN(STR_QPI_APM_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_QPI_APM_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

    endform;    //end of Program Dynamic Perf Power Ctl CSR Form 

    //Program SAPMCTL CSR Form Start
    form formid = PROG_CSR_SAPMCTL_FORM_ID,
    title = STRING_TOKEN(STR_PROG_CSR_SAPMCTL_FORM);
    subtitle text = STRING_TOKEN(STR_PROG_CSR_SAPMCTL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);


        // SAPMCTL.IIO_PKGC_CLOCK_GATE_DISABLE
      oneof varid     = SYSTEM_CONFIGURATION.IioPkgcClkGateDis,
          prompt      = STRING_TOKEN(STR_IIO_PKGC_CLOCK_GATE_DISABLE),
          help        = STRING_TOKEN(STR_IIO_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // SAPMCTL.QPI01_PKGC_CLOCK_GATE_DISABLE
      oneof varid     = SYSTEM_CONFIGURATION.Qpi01PkgcClkGateDis,
          prompt      = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE),
          help        = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;     

      // SAPMCTL.QPI2_PKGC_CLOCK_GATE_DISABLE
      oneof varid     = SYSTEM_CONFIGURATION.Qpi2PkgcClkGateDis,
          prompt      = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE),
          help        = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;     

      // SAPMCTL.FORCE_PPLL_OFF
      oneof varid     = SYSTEM_CONFIGURATION.ForcePpllOff,
          prompt      = STRING_TOKEN(STR_FORCE_PPLL_OFF),
          help        = STRING_TOKEN(STR_FORCE_PPLL_OFF_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | RESET_REQUIRED;          
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;     


      // SAPMCTL.MDLL_ON_DE
      oneof varid     = SYSTEM_CONFIGURATION.MdllOnDe,
          prompt      = STRING_TOKEN(STR_MC1_PKGC),
          help        = STRING_TOKEN(STR_MC1_PKGC_HELP),
          option text = STRING_TOKEN(STR_ENABLE),  value = 0, flags = DEFAULT | RESET_REQUIRED;          
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;

      // SAPMCTL.MPLL_ON_DE
      oneof varid     = SYSTEM_CONFIGURATION.MpllOnEn,
          prompt      = STRING_TOKEN(STR_MC0_PKGC),
          help        = STRING_TOKEN(STR_MC0_PKGC_HELP),
          option text = STRING_TOKEN(STR_ENABLE),  value = 0, flags = DEFAULT | RESET_REQUIRED;          
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;

      
      // SAPMCTL.NSWAKE_SREXIT
      oneof varid     = SYSTEM_CONFIGURATION.NswakeSrexit,
          prompt      = STRING_TOKEN(STR_NSWAKE_SREXIT),
          help        = STRING_TOKEN(STR_NSWAKE_SREXIT_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;      

      // SAPMCTL.PPLL_OFF_ENA
      oneof varid     = SYSTEM_CONFIGURATION.PpllOffEna,
          prompt      = STRING_TOKEN(STR_PPLL_OFF_ENA),
          help        = STRING_TOKEN(STR_PPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | RESET_REQUIRED;          
        endoneof;

      // SAPMCTL.MPLL_OFF_ENA
      oneof varid     = SYSTEM_CONFIGURATION.MpllOffEna,
          prompt      = STRING_TOKEN(STR_MPLL_OFF_ENA),
          help        = STRING_TOKEN(STR_MPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
          option text = STRING_TOKEN(STR_AUTO),      value = 2, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

    endform;  //end of Program SAPMCTL CSR Form

    //Program Perf_P_Limit Control CSR Form Start
    form formid = PROG_CSR_PERF_P_LIMIT_FORM_ID,
    title = STRING_TOKEN(STR_CSR_PERF_P_LIMIT_FORM);
    subtitle text = STRING_TOKEN(STR_CSR_PERF_P_LIMIT_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

//HSX <= B Stepping,dont need these options for BDX DE >=A0

    suppressif  ideqval SYSTEM_CONFIGURATION.AboveHSXCStepping == 1 OR
    ideqval SYSTEM_CONFIGURATION.cpuType == 2;
      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_THRESHOLD
      numeric varid   = SYSTEM_CONFIGURATION.PerfPLmtThshld, 
        prompt  = STRING_TOKEN (STR_PERF_P_LIMIT_THRESHOLD),
        help    = STRING_TOKEN (STR_PERF_P_LIMIT_THRESHOLD_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x3F,
        step    = 0,
        default = 0x0F,
      endnumeric;      

      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_CLIP
      numeric varid   = SYSTEM_CONFIGURATION.PerfPLimitClip, 
        prompt  = STRING_TOKEN (STR_PERF_P_LIMIT_CLIP),
        help    = STRING_TOKEN (STR_PERF_P_LIMIT_CLIP_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x3F,
        step    = 0,
        default = 0x3F,
      endnumeric;

      // PERF_P_LIMIT_CONTROL.DISABLE_PERF_P_INPUT
      oneof varid     = SYSTEM_CONFIGURATION.DisPerfPInput,
          prompt      = STRING_TOKEN(STR_DISABLE_PERF_P_INPUT),
          help        = STRING_TOKEN(STR_DISABLE_PERF_P_INPUT_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;          
      endoneof;

      // PERF_P_LIMIT_CONTROL.Resolution_mode
      oneof varid     = SYSTEM_CONFIGURATION.ResolutionMode,
          prompt      = STRING_TOKEN(STR_RESOLUTIONMODE),
          help        = STRING_TOKEN(STR_RESOLUTIONMODE_HELP),
          option text = STRING_TOKEN(STR_MAXPSTATE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_MAXCLIP),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_THRESHOLD),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AVGPSTATE),    value = 3, flags = RESET_REQUIRED;
      endoneof;

      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_EN
      oneof varid     = SYSTEM_CONFIGURATION.PerfPLimitEn,
          prompt      = STRING_TOKEN(STR_PERFPLIMITEN),
          help        = STRING_TOKEN(STR_PERFPLIMITEN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;          
      endoneof;
    endif;

//HSX >= C Stepping or BDX-DE >=A0
 
    suppressif  ideqval SYSTEM_CONFIGURATION.AboveHSXCStepping == 0 AND
    ideqval SYSTEM_CONFIGURATION.cpuType == 0;   //cpuType HSX=0,BDX=2
      // PERF_P_LIMIT_CONTROL.PERF_PLIMIT_DIFFERENTIAL
      numeric varid   = SYSTEM_CONFIGURATION.PerfPlimitDifferential, 
        prompt  = STRING_TOKEN (STR_PERF_PLIMIT_DIFFERENTIAL),
        help    = STRING_TOKEN (STR_PERF_PLIMIT_DIFFERENTIAL_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x7,
        step    = 0,
        default = 0x1,
      endnumeric;      
      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_THRESHOLD
      numeric varid   = SYSTEM_CONFIGURATION.PerfPLmtThshld, 
        prompt  = STRING_TOKEN (STR_PERF_P_LIMIT_THRESHOLD),
        help    = STRING_TOKEN (STR_PERF_P_LIMIT_THRESHOLD_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x1F,
        step    = 0,
        default = 0x0F,
      endnumeric;      

      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_EN
      oneof varid     = SYSTEM_CONFIGURATION.PerfPLimitEn,
          prompt      = STRING_TOKEN(STR_PERFPLIMITEN),
          help        = STRING_TOKEN(STR_PERFPLIMITEN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;          
      endoneof;
    endif;
      
    endform;    //end of Program Perf P Limit Control Csr Form

#ifdef GRANGEVILLE_FLAG
#endif   //#ifdef GRANGEVILLE_FLAG    
    
      // Program Entry Criteria CSR Socket 0 Sub Form Start
      form formid = SOCKET0_CPUPWRADVPMCFG_FORMID,
      title = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_0_FORM);
      subtitle text = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_0_FORM);
      subtitle text = STRING_TOKEN(STR_NULL_STRING);

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_0_IN L0S/L1 - Socket 0
        oneof varid     = SYSTEM_CONFIGURATION.Qpi0In[0],
            prompt      = STRING_TOKEN(STR_QPI_0_IN_S0),
            help        = STRING_TOKEN(STR_QPI_0_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED; 
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_1_IN L0S/L1 - Socket 0
        oneof varid     = SYSTEM_CONFIGURATION.Qpi1In[0],
            prompt      = STRING_TOKEN(STR_QPI_1_IN_S0),
            help        = STRING_TOKEN(STR_QPI_1_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_2_IN L0S/L1 - Socket 0
        oneof varid     = SYSTEM_CONFIGURATION.Qpi2In[0],
            prompt      = STRING_TOKEN(STR_QPI_2_IN_S0),
            help        = STRING_TOKEN(STR_QPI_2_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK -  PCIE0-10 IN L0S/L1 - Socket 0
        oneof varid     = SYSTEM_CONFIGURATION.Pcie0In[0],
            prompt      = STRING_TOKEN(STR_PCIE0_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
       endoneof;
 
        oneof varid     = SYSTEM_CONFIGURATION.Pcie1In[0],
            prompt      = STRING_TOKEN(STR_PCIE1_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie2In[0],
            prompt      = STRING_TOKEN(STR_PCIE2_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie3In[0],
            prompt      = STRING_TOKEN(STR_PCIE3_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie4In[0],
            prompt      = STRING_TOKEN(STR_PCIE4_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie5In[0],
            prompt      = STRING_TOKEN(STR_PCIE5_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie6In[0],
            prompt      = STRING_TOKEN(STR_PCIE6_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie7In[0],
            prompt      = STRING_TOKEN(STR_PCIE7_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie8In[0],
            prompt      = STRING_TOKEN(STR_PCIE8_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie9In[0],
            prompt      = STRING_TOKEN(STR_PCIE9_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie10In[0],
            prompt      = STRING_TOKEN(STR_PCIE10_IN_LX_S0),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

      endform;    //end of Program Entry Criteria Socket 0 CSR Sub Form

      // Program Entry Criteria CSR Socket 1 Sub Form Start
      form formid = SOCKET1_CPUPWRADVPMCFG_FORMID,
      title = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_1_FORM);
      subtitle text = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_1_FORM);
      subtitle text = STRING_TOKEN(STR_NULL_STRING);

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_0_IN L0S/L1 - Socket 1
        oneof varid     = SYSTEM_CONFIGURATION.Qpi0In[1],
            prompt      = STRING_TOKEN(STR_QPI_0_IN_S1),
            help        = STRING_TOKEN(STR_QPI_0_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_1_IN L0S/L1 - Socket 1
        oneof varid     = SYSTEM_CONFIGURATION.Qpi1In[1],
            prompt      = STRING_TOKEN(STR_QPI_1_IN_S1),
            help        = STRING_TOKEN(STR_QPI_1_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_1_IN L0S/L1 - Socket 1
        oneof varid     = SYSTEM_CONFIGURATION.Qpi2In[1],
            prompt      = STRING_TOKEN(STR_QPI_2_IN_S1),
            help        = STRING_TOKEN(STR_QPI_2_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK -  PCIE0-10 IN L0S/L1 - Socket 1
        oneof varid     = SYSTEM_CONFIGURATION.Pcie0In[1],
            prompt      = STRING_TOKEN(STR_PCIE0_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;
 
        oneof varid     = SYSTEM_CONFIGURATION.Pcie1In[1],
            prompt      = STRING_TOKEN(STR_PCIE1_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie2In[1],
            prompt      = STRING_TOKEN(STR_PCIE2_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie3In[1],
            prompt      = STRING_TOKEN(STR_PCIE3_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie4In[1],
            prompt      = STRING_TOKEN(STR_PCIE4_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie5In[1],
            prompt      = STRING_TOKEN(STR_PCIE5_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie6In[1],
            prompt      = STRING_TOKEN(STR_PCIE6_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie7In[1],
            prompt      = STRING_TOKEN(STR_PCIE7_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie8In[1],
            prompt      = STRING_TOKEN(STR_PCIE8_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie9In[1],
            prompt      = STRING_TOKEN(STR_PCIE9_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie10In[1],
            prompt      = STRING_TOKEN(STR_PCIE10_IN_LX_S1),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

      endform;    //end of Program Entry Criteria Socket 1 CSR Sub Form

      //Program Entry Criteria Socket 2 CSR Sub Form Start
    form formid = SOCKET2_CPUPWRADVPMCFG_FORMID,
        title = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_2_FORM);
        subtitle text = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_2_FORM);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_0_IN L0S/L1 - Socket 2
        oneof varid     = SYSTEM_CONFIGURATION.Qpi0In[2],
            prompt      = STRING_TOKEN(STR_QPI_0_IN_S2),
            help        = STRING_TOKEN(STR_QPI_0_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_1_IN L0S/L1 - Socket 2
        oneof varid     = SYSTEM_CONFIGURATION.Qpi1In[2],
            prompt      = STRING_TOKEN(STR_QPI_1_IN_S2),
            help        = STRING_TOKEN(STR_QPI_1_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;
        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_2_IN L0S/L1 - Socket 2
        oneof varid     = SYSTEM_CONFIGURATION.Qpi2In[2],
            prompt      = STRING_TOKEN(STR_QPI_2_IN_S2),
            help        = STRING_TOKEN(STR_QPI_2_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK -  PCIE0-10 IN L0S/L1 - Socket 2
        oneof varid     = SYSTEM_CONFIGURATION.Pcie0In[2],
            prompt      = STRING_TOKEN(STR_PCIE0_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;
 
        oneof varid     = SYSTEM_CONFIGURATION.Pcie1In[2],
            prompt      = STRING_TOKEN(STR_PCIE1_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie2In[2],
            prompt      = STRING_TOKEN(STR_PCIE2_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie3In[2],
            prompt      = STRING_TOKEN(STR_PCIE3_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie4In[2],
            prompt      = STRING_TOKEN(STR_PCIE4_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie5In[2],
            prompt      = STRING_TOKEN(STR_PCIE5_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie6In[2],
            prompt      = STRING_TOKEN(STR_PCIE6_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie7In[2],
            prompt      = STRING_TOKEN(STR_PCIE7_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie8In[2],
            prompt      = STRING_TOKEN(STR_PCIE8_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie9In[2],
            prompt      = STRING_TOKEN(STR_PCIE9_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie10In[2],
            prompt      = STRING_TOKEN(STR_PCIE10_IN_LX_S2),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

      endform;  // end of Program Entry Criteria Socket 2 CSR Sub Form

      //Program Entry Criteria Socket 3 CSR Sub Form Start
    form formid = SOCKET3_CPUPWRADVPMCFG_FORMID,
        title = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_3_FORM);
        subtitle text = STRING_TOKEN(STR_SOCKET_CPUPWRADVPMCFG_3_FORM);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_0_IN L0S/L1 - Socket 3
        oneof varid     = SYSTEM_CONFIGURATION.Qpi0In[3],
            prompt      = STRING_TOKEN(STR_QPI_0_IN_S3),
            help        = STRING_TOKEN(STR_QPI_0_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_1_IN L0S/L1 - Socket 3
        oneof varid     = SYSTEM_CONFIGURATION.Qpi1In[3],
            prompt      = STRING_TOKEN(STR_QPI_1_IN_S3),
            help        = STRING_TOKEN(STR_QPI_1_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK - QPI_2_IN L0S/L1 - Socket 3
        oneof varid     = SYSTEM_CONFIGURATION.Qpi2In[3],
            prompt      = STRING_TOKEN(STR_QPI_2_IN_S3),
            help        = STRING_TOKEN(STR_QPI_2_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        // PKG_CST_ENTRY_CRITERIA_MASK -  PCIE0-10 IN L0S/L1 - Socket 3
        oneof varid     = SYSTEM_CONFIGURATION.Pcie0In[3],
            prompt      = STRING_TOKEN(STR_PCIE0_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;
 
        oneof varid     = SYSTEM_CONFIGURATION.Pcie1In[3],
            prompt      = STRING_TOKEN(STR_PCIE1_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie2In[3],
            prompt      = STRING_TOKEN(STR_PCIE2_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie3In[3],
            prompt      = STRING_TOKEN(STR_PCIE3_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie4In[3],
            prompt      = STRING_TOKEN(STR_PCIE4_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie5In[3],
            prompt      = STRING_TOKEN(STR_PCIE5_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie6In[3],
            prompt      = STRING_TOKEN(STR_PCIE6_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie7In[3],
            prompt      = STRING_TOKEN(STR_PCIE7_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie8In[3],
            prompt      = STRING_TOKEN(STR_PCIE8_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie9In[3],
            prompt      = STRING_TOKEN(STR_PCIE9_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SYSTEM_CONFIGURATION.Pcie10In[3],
            prompt      = STRING_TOKEN(STR_PCIE10_IN_LX_S3),
            help        = STRING_TOKEN(STR_PCIE_IN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IN_L1),   value = 2, flags = RESET_REQUIRED;
        endoneof;

      endform;  // end of Program Entry Criteria Socket 3 CSR Sub Form

  //----------- Advanced PM Tuning Form End

  //----------- DRAM RAPL Form Start
    //Program Dram Rapl Form Start
    form formid = DRAM_RAPL_FORMID,
    title = STRING_TOKEN(STR_DRAM_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_DRAM_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      oneof varid     = SYSTEM_CONFIGURATION.DramRaplInit,
        prompt      = STRING_TOKEN(STR_DRAM_RAPL_EN),
        help        = STRING_TOKEN(STR_DRAM_RAPL_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DRAMRAPLMODE0),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DRAMRAPLMODE1),   value = 2, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

		
	    suppressif ideqval SYSTEM_CONFIGURATION.DramRaplInit == 0; 
        numeric varid   = SYSTEM_CONFIGURATION.BwLimitTfOvrd,
          prompt   = STRING_TOKEN (STR_OVRDDRAMRAPLBWLIMITTF),
          help     = STRING_TOKEN (STR_OVRDDRAMRAPLBWLIMITTF_HELP),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 1,
          maximum  = 16,    // 
          step     = 1,    //  
          default = 1,
        endnumeric;
	    endif;


      suppressif ideqval SYSTEM_CONFIGURATION.DramRaplInit == 0; 
        oneof varid   = SYSTEM_CONFIGURATION.DramRaplExtendedRange,
          prompt      = STRING_TOKEN(STR_DRAM_RAPL_EXTENDED_RANGE_PROMPT),
          help        = STRING_TOKEN(STR_DRAM_RAPL_EXTENDED_RANGE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
         endoneof;
      endif;

	
      /** IVT/HSX doesn't support 
	    suppressif ideqval SYSTEM_CONFIGURATION.DramRaplInit == 0;     
		    oneof varid     = SYSTEM_CONFIGURATION.HybridMode,
			    prompt      = STRING_TOKEN(STR_HYBRID_MODE_EN),
			    help        = STRING_TOKEN(STR_HYBRID_MODE_EN_HELP),
			    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
			    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
		    endoneof;
	    endif;
	
	    suppressif ideqval SYSTEM_CONFIGURATION.HybridMode == 0;     
		    oneof varid     = SYSTEM_CONFIGURATION.ForcedStressTest,
			    prompt      = STRING_TOKEN(STR_FORCED_MODE_EN),
			    help        = STRING_TOKEN(STR_FORCED_MODE_EN_HELP),
			    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
			    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
		      endoneof;
	    endif;
      ***/
    endform;  //end of Program Dram Rapl Form
  //----------- DRAM RAPL Form End

    //----------- SOCKET RAPL Form Start
    //Program Socket Rapl Form Start
    form formid = SOCKET_RAPL_FORMID,
    title = STRING_TOKEN(STR_SOCKET_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_SOCKET_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // FAST_RAPL_NSTRIKE_PL2_DUTY_CYCLE
        numeric varid   = SYSTEM_CONFIGURATION.FastRaplDutyCycle,
          prompt   = STRING_TOKEN (STR_FAST_RAPL_DUTY_CYCLE),
          help     = STRING_TOKEN (STR_FAST_RAPL_DUTY_CYCLE_HELP),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 0,
          maximum  = 255,   
          step     = 1,      
          default = 64,
        endnumeric;

      // MSR_TURBO_POWER_LIMIT  0x610
      // CSR_TURBO_POWER_LIMIT  1:30:0:0xe8
      suppressif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0 
                          OR ideqval SYSTEM_CONFIGURATION.TurboMode == 0;
        oneof varid  = SYSTEM_CONFIGURATION.TurboPowerLimitLock,
            prompt   = STRING_TOKEN (STR_TURBO_PWR_LIMIT_LOCK),
            help     = STRING_TOKEN (STR_TURBO_PWR_LIMIT_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid  = SYSTEM_CONFIGURATION.PowerLimit1En,
            prompt   = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_OVERRIDE),
            help     = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_OVERRIDE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       endif; 

       suppressif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0 
                       OR ideqval SYSTEM_CONFIGURATION.TurboMode == 0
                       OR  ideqval SYSTEM_CONFIGURATION.PowerLimit1En == 0;
          numeric varid   = SYSTEM_CONFIGURATION.PowerLimit1Power,
              prompt   = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT),
              help     = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 32767,    // 
              step     = 1,        // Stepping of 0 equates to a manual entering of a value, 
                                   // otherwise it will auto-increment with a left/right arrow
              default = 0,
          endnumeric;

          numeric varid   = SYSTEM_CONFIGURATION.PowerLimit1Time,
              prompt   = STRING_TOKEN (STR_LONG_DUR_TIME_WINDOW),
              help     = STRING_TOKEN (STR_LONG_DUR_TIME_WINDOW_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 56,       // 
              step     = 1,        // Stepping of 0 equates to a manual entering of a value, 
                                   // otherwise it will auto-increment with a left/right arrow
              default = 1,
          endnumeric;

          oneof varid  = SYSTEM_CONFIGURATION.PkgClmpLim1,
             prompt   = STRING_TOKEN (STR_PKG_CLMP_LIM_1),
             help     = STRING_TOKEN (STR_PKG_CLMP_LIM_1_HELP),
            option text = STRING_TOKEN(STR_LIMITP1_P0),       value = 0, flags = MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(STR_LIMIT_BELOW_P1),  value = 1, flags = DEFAULT | RESET_REQUIRED;
          endoneof;


          oneof varid  = SYSTEM_CONFIGURATION.PowerLimit2En,
             prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_1),
             help     = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      endif;

      suppressif ideqval SYSTEM_CONFIGURATION.ProcessorEistEnable == 0 
                        OR ideqval SYSTEM_CONFIGURATION.TurboMode == 0
                        OR ideqval SYSTEM_CONFIGURATION.PowerLimit2En == 0;
          numeric varid   = SYSTEM_CONFIGURATION.PowerLimit2Power,
              prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT),
              help     = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 32767,    // 
              step     = 1,        // Stepping of 0 equates to a manual entering of a value, 
                                   // otherwise it will auto-increment with a left/right arrow
              default = 0,
          endnumeric;

          oneof varid  = SYSTEM_CONFIGURATION.PkgClmpLim2,
             prompt   = STRING_TOKEN (STR_PKG_CLMP_LIM_2),
             help     = STRING_TOKEN (STR_PKG_CLMP_LIM_2_HELP),
            option text = STRING_TOKEN(STR_LIMITP1_P0),       value = 0, flags = MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(STR_LIMIT_BELOW_P1),  value = 1, flags = DEFAULT | RESET_REQUIRED;
          endoneof;
       endif;

    endform;  //end of Socket Rapl Form
  //----------- SOCKET RAPL Form End

