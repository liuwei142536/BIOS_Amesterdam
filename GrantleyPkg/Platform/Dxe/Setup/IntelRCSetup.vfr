//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// *++
//
// Copyright (c)  1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// 
// 
// Module Name:
//
//   IntelRCSetup.vfr 
// 
// Abstract:
// 
//   IntelRCSetup formset.
// 
// Revision History: 
// 
// --*/

#include "Configuration.h"
#include "PlatformStrDefs.h"
#include <Guid/SetupVariable.h>
#include <Token.h> // Aptio V server override
  
#include "Common.hfr"

#define EFI_HII_DEFAULT_CLASS_MANUFACTURING  0x0001

formset 
    guid      = SYSTEM_CONFIGURATION_GUID,
    title     = STRING_TOKEN(STR_INTELRCSETUP_TITLE),
    help      = STRING_TOKEN(STR_INTELRCSETUP_HELP),
    class     = VFR_INTELRCSETUP_CLASS,
    subclass  = 0,

    VFR_VARSTORE_SETUP
    defaultstore AmiMfgDefault, prompt = STRING_TOKEN(STR_NULL_STRING), attribute = EFI_HII_DEFAULT_CLASS_MANUFACTURING;

//#define SYSTEM_CONFIGURATION  Setup

    form formid = VFR_FORMID_INTELRCSETUP,

        title = STRING_TOKEN(STR_INTELRCSETUP_TITLE);

        //
        // Jump to Processor Configuration Form
        //
        goto VFR_FORMID_PROCESSOR,
            prompt = STRING_TOKEN(STR_PROCESSOR_CONFIG_FORM_TITLE),
            help   = STRING_TOKEN(STR_PROCESSOR_CONFIG_FORM_HELP);

        //
        // Jump to Power Management Configuration Form
        //
        goto VFR_FORMID_PWRMGT,
            prompt = STRING_TOKEN(STR_POWER_MGT_CONFIG_FORM_TITLE),
            help   = STRING_TOKEN(STR_POWER_MGT_CONFIG_FORM_HELP);

        //
        // Jump to CommonRc Configuration Form
        //
        goto VFR_FORMID_COMMONRC,
            prompt = STRING_TOKEN(STR_RC_COMMON_FORM_TITLE),
            help   = STRING_TOKEN(STR_RC_COMMON_FORM_HELP);

        //
        // Jump to CSI Configuration Form
        //
// AptioV Server Override Start: Added the INTERACTIVE flag to get QPI status updated at form callback
//        goto VFR_FORMID_CSI, 
//            prompt = STRING_TOKEN(STR_CSI_CONFIG_FORM_TITLE),
//            help   = STRING_TOKEN(STR_CSI_CONFIG_FORM_HELP);
        goto VFR_FORMID_CSI, 
            prompt = STRING_TOKEN(STR_CSI_CONFIG_FORM_TITLE),
            help   = STRING_TOKEN(STR_CSI_CONFIG_FORM_HELP),
            flags = INTERACTIVE;
// AptioV Server Override End

        //
        // Jump to MRC Configuration Form
        //
        goto VFR_FORMID_MEMORY,
            prompt = STRING_TOKEN(STR_MEMORY_CONFIG_FORM_TITLE),
            help   = STRING_TOKEN(STR_MEMORY_CONFIG_FORM_HELP);

        //
        // Jump to IIO Configuration Form
        //
        goto VFR_FORMID_IIO,
            prompt = STRING_TOKEN(STR_IIO_CONFIG_FORM_TITLE),
            help   = STRING_TOKEN(STR_IIO_CONFIG_FORM_HELP);


        // Jump to Pch Configuration Form
        //
        goto VFR_FORMID_PCH,
            prompt = STRING_TOKEN(STR_PCH_CONFIG_FORM_TITLE),
            help   = STRING_TOKEN(STR_PCH_CONFIG_FORM_HELP);




        // Jump to the Overclocking Form
        //
        suppressif  ideqval SYSTEM_CONFIGURATION.PlatformOCSupport == 0;
          goto VFR_FORMID_OVERCLOCKING,
              prompt = STRING_TOKEN(STR_OVERCLOCKING_MENU_CONFIGURATION),
              help   = STRING_TOKEN(STR_OVERCLOCKING_CONFIGURATION_HELP);
        endif;

        //
        // Jump to Miscelleneous Configuration Form
        //
        goto VFR_FORMID_MISC,
            prompt = STRING_TOKEN(STR_MISC_FORM_TITLE),
            help   = STRING_TOKEN(STR_MISC_FORM_HELP);

        //
        // Console Redirection setup
        //
 //Aptio V Grantley Override: Removing unused intel setup .uni/.hfr files.
        /*goto VFR_FORMID_CONSOLE_REDIRECTION_CONFIGURATION,
            prompt = STRING_TOKEN(STR_CONSOLE_REDIRECTION_CONFIGURATION_FORM_TITLE),
            help   = STRING_TOKEN(STR_CONSOLE_REDIRECTION_CONFIGURATION_FORM_TITLE_HELP*/

        //
        // Jump to Network Configuration Form
        //
        // Aptio V server override : Network setup page not required
        suppressif TRUE;
        goto VFR_FORMID_NETWORK,
            prompt = STRING_TOKEN(STR_NETWORK_CONFIGURATION),
            help   = STRING_TOKEN(STR_NETWORK_CONFIGURATION_HELP);
         endif;

        //
        // Jump to FW Debug Form
        //
         goto VFR_FORMID_FWDEBUG,
            prompt  = STRING_TOKEN(STR_FWDEBUG_FORM),
            help    = STRING_TOKEN(STR_FWDEBUG_FORM_HELP);

	// Aptio V server override : Prompt added for ME form        
        //
        // Jump to ME Form
        //
        goto VFR_FORMID_ME, 
            prompt = STRING_TOKEN(STR_SERVER_ME_FORM),
            help   = STRING_TOKEN(STR_SERVER_ME_FORM_HELP);        
        
        //
        // Jump to ELOG Configuration Form
        //
        goto VFR_FORMID_ELOG,
            prompt = STRING_TOKEN(STR_ELOG_FORM_TITLE),
            help   = STRING_TOKEN(STR_ELOG_FORM_HELP);

        //
        // Jump to Reserve Memory Form
        //
// APTIOV_SERVER_OVERRIDE_RC_START : Removing unused Setup options
// EIP#561658

        goto VFR_RESERVE_MEMORY,
            prompt = STRING_TOKEN(STR_RESERVE_MEMORY_OPTION),
            help   = STRING_TOKEN(STR_RESERVE_MEMORY_OPTION_HELP);

// APTIOV_SERVER_OVERRIDE_RC_END : Removing unused Setup options
        //
        // Jump to BootAllOptions Form
        //
//Aptio V Server Override: Removing unused intel setup .uni/.hfr files.
/*      
        goto VFR_BOOT_ALL_OPTIONS,
            prompt = STRING_TOKEN(STR_BOOT_ALL_OPTIONS),
            help   = STRING_TOKEN(STR_BOOT_ALL_OPTIONS_HELP);
  endif;                    
*/            

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
        subtitle text = STRING_TOKEN(STR_WARNING_MESSAGE1);
        subtitle text = STRING_TOKEN(STR_WARNING_MESSAGE2);
        subtitle text = STRING_TOKEN(STR_WARNING_MESSAGE3);

        // Aptio V Server Override start: form added
  suppressif TRUE;        
        goto VFR_RC_SETUP_HIDE_FORMID, 
            prompt = STRING_TOKEN(RC_SETUP_HIDE_FORM_TITLE),
            help   = STRING_TOKEN(RC_SETUP_HIDE_FORM_TITLE); 
  endif;                    
        // Aptio V Server Override end: form added

    endform;



    //
    // Miscelleneous Configuration Form
    //
    form formid = VFR_FORMID_MISC,

        title    = STRING_TOKEN(STR_MISC_FORM_TITLE);

        subtitle text = STRING_TOKEN(STR_MISC_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
        //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

        //
        // PCI 64-Bit Resource Allocation Support
        //
        // Aptio V Server Override start: suppressing question
        suppressif TRUE;
        oneof varid     = SYSTEM_CONFIGURATION.Pci64BitResourceAllocation,
            prompt      = STRING_TOKEN(STR_PCI_64BIT_RESOURCE_ALLOCATION_PROMPT),
            help        = STRING_TOKEN(STR_PCI_64BIT_RESOURCE_ALLOCATION_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;
        endif; 
        //Aptio V Server Override end
        
        //
        // Select Max Page Table Size
        //
        // Aptio V Server Override start: Remove Question use only PCD.
        //oneof varid     = SYSTEM_CONFIGURATION.Use1GPageTable,
        //    prompt      = STRING_TOKEN(STR_MAX_PAGE_TABLE_SIZE_SELECT_PROMPT),
        //    help        = STRING_TOKEN(STR_MAX_PAGE_TABLE_SIZE_SELECT_HELP),
        //    option text = STRING_TOKEN(STR_2M_PAGE_TABLE), value = 0, flags = RESET_REQUIRED;
        //    option text = STRING_TOKEN(STR_1G_PAGE_TABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        //endoneof;
        // Aptio V Server Override End
        
        //
        // Fan PWM Offset
        //
        numeric varid = SYSTEM_CONFIGURATION.FanPwmOffset,
            prompt    = STRING_TOKEN(STR_FAN_PWM_OFFSET_PROMPT),
            help      = STRING_TOKEN(STR_FAN_PWM_OFFSET_HELP),
            flags     = RESET_REQUIRED,
            minimum   = 0, maximum = 100,
            default   = 0,
        endnumeric;

        //
        // PCIe Max Read Request Size
        //
        oneof varid     = SYSTEM_CONFIGURATION.PcieMaxReadRequestSize,
            prompt      = STRING_TOKEN(STR_PCIE_PORT_MAX_READ_REQUEST_SIZE_PROMPT),
            help        = STRING_TOKEN(STR_PCIE_PORT_MAX_READ_REQUEST_HELP),
            option text = STRING_TOKEN(STR_PCIE_MRRS_AUTO),    value = 7, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_MRRS_128B),    value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_MRRS_256B),    value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_MRRS_512B),    value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_MRRS_1024B),   value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_MRRS_2048B),   value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_MRRS_4096B),   value = 5, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

        //
        // PCIe Latency Tolerence Reporting
        //
        oneof varid     = SYSTEM_CONFIGURATION.PCIe_LTR,
            prompt      = STRING_TOKEN(STR_PCI_LTR_PROMPT),
            help        = STRING_TOKEN(STR_PCI_LTR_HELP),
            option text = STRING_TOKEN(STR_DISABLE),        value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),         value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

        numeric varid = SYSTEM_CONFIGURATION.PciMinSecondaryBus,
            prompt    = STRING_TOKEN(STR_PCI_MIN_SECONDARY_BUS_PROMPT),
            help      = STRING_TOKEN(STR_PCI_MIN_SECONDARY_BUS_HELP),
            flags     = RESET_REQUIRED,
            minimum   = 1, maximum = 223,
            step      = 1, // 0 = manual entering of a value, else it will auto-increment with a left/right arrow
            default   = 1,
            default   = 1, defaultstore = AmiMfgDefault,
        endnumeric;

        oneof varid   = SYSTEM_CONFIGURATION.PcieExtendedTagField,
            prompt      = STRING_TOKEN(STR_PCIE_EXTENDED_TAG_PROMPT),
            help        = STRING_TOKEN(STR_EXTENDED_TAG_HELP),
            option text = STRING_TOKEN(STR_AUTO),           value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DISABLE),        value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),         value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

        oneof varid   = SYSTEM_CONFIGURATION.PCIe_AtomicOpReq,
            prompt        = STRING_TOKEN(STR_PCI_ATOMICOP_PROMPT),
            help          = STRING_TOKEN(STR_PCI_ATOMICOP_HELP),
            option text   = STRING_TOKEN(STR_DISABLE),        value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text   = STRING_TOKEN(STR_ENABLE),         value = 1, flags = RESET_REQUIRED;
        endoneof;

        //
        // Breakpoints
        //
        oneof varid = SYSTEM_CONFIGURATION.ValidationBreakpointType,
            prompt  = STRING_TOKEN(STR_VALIDATION_BREAKPOINT_TYPE),
            help    = STRING_TOKEN(STR_VALIDATION_BREAKPOINT_TYPE_HELP),
            option text = STRING_TOKEN(STR_NONE),           value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_BREAKPOINT_AFTER_MRC),     value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_BREAKPOINT_AFTER_QPIRC),   value = 2,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_BREAKPOINT_AFTER_RESOURCE_ALLOC), value = 3,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_BREAKPOINT_AFTER_POST), value = 4,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_BREAKPOINT_AFTER_FULL_SPEED_SETUP), value = 5,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_BREAKPOINT_READY_FOR_IBIST), value = 6, flags = RESET_REQUIRED;
        endoneof;

//        numeric varid = SYSTEM_CONFIGURATION.PciRootPortBusPadding,
//            prompt    = STRING_TOKEN(STR_PCI_ROOT_PORT_BUS_PADDING_PROMPT),
//            help      = STRING_TOKEN(STR_PCI_ROOT_PORT_BUS_PADDING_HELP),
//            flags     = RESET_REQUIRED,
//            minimum   = 0, maximum = 16,
//            step      = 1, // 0 = manual entering of a value, else it will auto-increment with a left/right arrow
//            default   = 0,
//        endnumeric;

         //
         //  Force Setup
         //
        // Aptio V Server Override start: suppressing question and changing default value to Disabled
        suppressif TRUE;              
         checkbox varid = SYSTEM_CONFIGURATION.ForceSetup,
              prompt   = STRING_TOKEN(STR_FORCE_SETUP_PROMPT),
              help     = STRING_TOKEN(STR_FORCE_SETUP_HELP),
              flags    = 0,
         endcheckbox;
        endif; 
        //Aptio V Server Override end         
         

         //
         //  Pfat setup question
         //
         grayoutif ideqval SYSTEM_CONFIGURATION.PfatPlatformSupported == 0;
           checkbox varid = SYSTEM_CONFIGURATION.PfatEnabled,
                prompt   = STRING_TOKEN(STR_PFAT_SETUP_PROMPT),
                help     = STRING_TOKEN(STR_PFAT_SETUP_HELP),
                flags    = RESET_REQUIRED,
                default  = 0,
           endcheckbox;
         endif;
        suppressif ideqval SYSTEM_CONFIGURATION.AntiFlashWearoutSupported == 0;
         checkbox varid = SYSTEM_CONFIGURATION.EnableAntiFlashWearout,
              prompt   = STRING_TOKEN(STR_PFAT_ANTI_FW_PROMPT),
              help     = STRING_TOKEN(STR_PFAT_ANTI_FW_HELP),
              flags    = RESET_REQUIRED,
              default  = 0,
         endcheckbox;
        endif;         
        //
        // Serial Debug level
        //
#ifndef SDP_FLAG 
        oneof varid = SYSTEM_CONFIGURATION.serialDebugMsgLvl,
          prompt      = STRING_TOKEN(STR_SERIAL_DEBUG_MSG_PROMPT),
          help        = STRING_TOKEN(STR_SERIAL_DEBUG_MSG_HELP),
	  #ifdef DISABLE_TRUE_RELEASE
          option text = STRING_TOKEN(STR_DISABLE),                 value = 0, flags = RESET_REQUIRED | MANUFACTURING ;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MINIMUM),    value = 1, flags = RESET_REQUIRED | DEFAULT;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_NORMAL),     value = 2, flags = RESET_REQUIRED;
	  #else
          option text = STRING_TOKEN(STR_DISABLE),                 value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MINIMUM),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_NORMAL),     value = 2, flags = RESET_REQUIRED;
	  #endif
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MAXIMUM),    value = 3, flags = RESET_REQUIRED | MANUFACTURING| DEFAULT ;
        endoneof;
#else  // SDP_FLAG
  #ifdef DISABLE_TRUE_RELEASE
          oneof varid = SYSTEM_CONFIGURATION.serialDebugMsgLvl,
          prompt      = STRING_TOKEN(STR_SERIAL_DEBUG_MSG_PROMPT),
          help        = STRING_TOKEN(STR_SERIAL_DEBUG_MSG_HELP),
          option text = STRING_TOKEN(STR_DISABLE),                 value = 0, flags = RESET_REQUIRED | MANUFACTURING ;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MINIMUM),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_NORMAL),     value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MAXIMUM),    value = 3, flags = RESET_REQUIRED | DEFAULT;
        endoneof;
  #endif

  #ifdef SDP_FLAG
          oneof varid = SYSTEM_CONFIGURATION.serialDebugMsgLvl,
          prompt      = STRING_TOKEN(STR_SERIAL_DEBUG_MSG_PROMPT),
          help        = STRING_TOKEN(STR_SERIAL_DEBUG_MSG_HELP),
          option text = STRING_TOKEN(STR_DISABLE),                 value = 0, flags = RESET_REQUIRED | MANUFACTURING ;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MINIMUM),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_NORMAL),     value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SERIAL_DEBUG_MAXIMUM),    value = 3, flags = RESET_REQUIRED | DEFAULT;
        endoneof;
  #endif

#endif


        oneof varid = SYSTEM_CONFIGURATION.serialDebugTrace,
          prompt      = STRING_TOKEN(STR_SERIAL_DEBUG_TRACE_PROMPT),
          help        = STRING_TOKEN(STR_SERIAL_DEBUG_TRACE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLED_STRING),   value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_WITH_TAG), value = 64, flags = RESET_REQUIRED;
        endoneof;

      oneof varid = SYSTEM_CONFIGURATION.serialDebugMsgLvlTrainResults,
        prompt      = STRING_TOKEN(STR_MRC_SERIAL_DEBUG_TRAIN_PROMPT),
        help        = STRING_TOKEN(STR_MRC_SERIAL_DEBUG_TRAIN_HELP),
        option text = STRING_TOKEN(STR_DISABLED_STRING),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED_STRING),   value = 8, flags = RESET_REQUIRED;
      endoneof;

        oneof varid = SYSTEM_CONFIGURATION.PromoteRcWarnings,
          prompt      = STRING_TOKEN(STR_PROMOTE_RC_WARNING_PROMPT),
          help        = STRING_TOKEN(STR_PROMOTE_RC_WARNING_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

        oneof varid = SYSTEM_CONFIGURATION.PromoteRcMRCWarnings,
          prompt      = STRING_TOKEN(STR_PROMOTE_RC_MRC_WARNING_PROMPT),
          help        = STRING_TOKEN(STR_PROMOTE_RC_MRC_WARNING_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

        //
        // Video Support
        //
        // Aptio V Server Override: Removing "Auto" control and settin default to Off-board.      
        oneof varid     = SYSTEM_CONFIGURATION.VideoSelect,
            prompt      = STRING_TOKEN(STR_VIDEO_SELECT_PROMPT),
            help        = STRING_TOKEN(STR_VIDEO_SELECT_HELP),
            option text = STRING_TOKEN(STR_VIDEO_SELECT_ONBOARD), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_VIDEO_SELECT_PCIE),    value = 2, flags = RESET_REQUIRED | DEFAULT;
        endoneof;

// AptioV Server Override Start: Added for Vga Priority Porting
    suppressif  ideqval SYSTEM_CONFIGURATION.VideoSelect == 0;
      text 
        help   = STRING_TOKEN(STR_TARGET_VGA_HELP_PROMPT),
        text   = STRING_TOKEN(STR_TARGET_VGA),
        text   = STRING_TOKEN(STR_TARGET_VGA_NAME),
        flags  = 0,
        key    = 0;
    endif;
// AptioV Server Override End: Added for Vga Priority Porting

        //
        // PS2 Port Support
        //
// AptioV Server Override Start: suppressing this option
    suppressif TRUE;
        oneof varid     = SYSTEM_CONFIGURATION.Ps2PortSwap,
            prompt      = STRING_TOKEN(STR_PS2PORT_PROMPT),
            help        = STRING_TOKEN(STR_PS2PORT_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
        endoneof;
    endif;

        //
        // Network Boot
        //
//        oneof varid     = SYSTEM_CONFIGURATION.BootNetwork,
//            prompt      = STRING_TOKEN(STR_BOOT_NETWORK_PROMPT),
//            help        = STRING_TOKEN(STR_BOOT_NETWORK_HELP),
//            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = INTERACTIVE | RESET_REQUIRED | DEFAULT;
//            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = INTERACTIVE | RESET_REQUIRED;
//        endoneof;
//#ifdef EFI_PCI_IOV_SUPPORT
//Hiding the setup options as per HSD-4025710. SRIOV options are currently
//implemented as PCD flags. These setup options does not have any functionality
//currently.
//        //
//        // ARI Enable
//        //
//        oneof varid     = SYSTEM_CONFIGURATION.ARIEnable,
//            prompt      = STRING_TOKEN(STR_ARI_ENABLE_PROMPT),
//            help        = STRING_TOKEN(STR_ARI_ENABLE_HELP),
//            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = INTERACTIVE | RESET_REQUIRED ;
//            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = INTERACTIVE | RESET_REQUIRED | DEFAULT;
//        endoneof;
//
//        grayoutif ideqval SYSTEM_CONFIGURATION.ARIEnable == 0;
////            oneof varid     = SYSTEM_CONFIGURATION.ARIForwarding,
////                prompt      = STRING_TOKEN(STR_ARI_FORWARD_PROMPT),
////                help        = STRING_TOKEN(STR_ARI_FORWARD_HELP),
////                option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
////                option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
////            endoneof;
//        endif;
//
//        //
//        // SR-IOV Enable
//        //
//        oneof varid     = SYSTEM_CONFIGURATION.SRIOVEnable,
//            prompt      = STRING_TOKEN(STR_SR_IOV_ENABLE_PROMPT),
//            help        = STRING_TOKEN(STR_SR_IOV_ENABLE_HELP),
//            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = INTERACTIVE | RESET_REQUIRED;
//            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = INTERACTIVE | RESET_REQUIRED | DEFAULT;
//        endoneof;
//
//       grayoutif ideqval SYSTEM_CONFIGURATION.SRIOVEnable == 0;
//            oneof varid     = SYSTEM_CONFIGURATION.SystemPageSize,
//                prompt      = STRING_TOKEN(STR_SR_IOV_SYSTEM_PAGE_SIZE_PROMPT),
//                help        = STRING_TOKEN(STR_SR_IOV_SYSTEM_PAGE_SIZE_HELP),
//                option text = STRING_TOKEN(STR_4K),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
//                option text = STRING_TOKEN(STR_8K),   value = 2, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_64K),  value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_256K), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_1M),   value = 5, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_4M),   value = 6, flags = RESET_REQUIRED;
//            endoneof;
//        endif;
//
//        //
//        // MR-IOV Enable
//        //
//        oneof varid     = SYSTEM_CONFIGURATION.MRIOVEnable,
//            prompt      = STRING_TOKEN(STR_MR_IOV_ENABLE_PROMPT),
//            help        = STRING_TOKEN(STR_MR_IOV_ENABLE_HELP),
//            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = INTERACTIVE | RESET_REQUIRED | DEFAULT;
//            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = INTERACTIVE | RESET_REQUIRED;
//        endoneof;
//#endif

// AptioV server override Start: Suppressing invalid controls. 
    suppressif TRUE;

        /*//
        // Manageability Engine (ME) Support
        //
        oneof varid     = SYSTEM_CONFIGURATION.MESupport,
            prompt      = STRING_TOKEN(STR_ME_SUPPORT_PROMPT),
            help        = STRING_TOKEN(STR_ME_SUPPORT_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval SYSTEM_CONFIGURATION.MESupport == 0 OR
                  ideqval SYSTEM_CONFIGURATION.MEFwState == 0;
            oneof varid     = SYSTEM_CONFIGURATION.MEViaBmc,
                prompt      = STRING_TOKEN(STR_ME_VIA_BMC_PROMPT),
                help        = STRING_TOKEN(STR_ME_VIA_BMC_HELP),
                option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
                option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
            endoneof;
        endif;

        grayoutif ideqval SYSTEM_CONFIGURATION.MESupport == 0;
            oneof varid     = SYSTEM_CONFIGURATION.MEEopSupport,
                prompt      = STRING_TOKEN(STR_ME_END_OF_POST_PROMPT),
                help        = STRING_TOKEN(STR_ME_END_OF_POST_HELP),
                option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            endoneof;
        endif;

        grayoutif ideqval SYSTEM_CONFIGURATION.MESupport == 0 OR
                  ideqval SYSTEM_CONFIGURATION.MEViaBmc == 1;
            oneof varid     = SYSTEM_CONFIGURATION.MEFwState,
                prompt      = STRING_TOKEN(STR_ME_FW_STATE_PROMPT),
                help        = STRING_TOKEN(STR_ME_FW_STATE_HELP),
                option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            endoneof;
        endif;*/
                oneof   varid   = SYSTEM_CONFIGURATION.WakeOnRTCS5,
        prompt      = STRING_TOKEN(STR_WAKE_ON_RTC_PROMPT),
        help        = STRING_TOKEN(STR_WAKE_ON_RTC_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value=0, flags=  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE), value= 1, flags= RESET_REQUIRED;
          endoneof;

      suppressif  ideqval SYSTEM_CONFIGURATION.WakeOnRTCS5 == 0;
        numeric varid  = SYSTEM_CONFIGURATION.RTCWakeupTimeHour,
          prompt      = STRING_TOKEN(STR_RTC_WAKEUP_HOUR_PROMPT),
          help        = STRING_TOKEN(STR_RTC_HOUR_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 23,
          step        = 1,
          default     = 0,
        endnumeric;

        numeric varid  = SYSTEM_CONFIGURATION.RTCWakeupTimeMinute,
          prompt      = STRING_TOKEN(STR_RTC_WAKEUP_MINUTE_PROMPT),
          help        = STRING_TOKEN(STR_TIME_MINUTE_HELP),
          flags       = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 59,
          step          = 1,
          default       = 0,
        endnumeric;

        numeric varid  = SYSTEM_CONFIGURATION.RTCWakeupTimeSecond,
          prompt      = STRING_TOKEN(STR_RTC_WAKEUP_SECOND_PROMPT),
          help        = STRING_TOKEN(STR_TIME_SECOND_HELP),
          flags       = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 59,
          step          = 1,
          default       = 0,
        endnumeric;
           endif;

    endif;			
// AptioV server override End: Suppressing invalid controls and redundant option for ACPI sleep state. 
     
    endform;

  form formid = VFR_FORMID_NETWORK,

    title     = STRING_TOKEN(STR_NETWORK_CONFIGURATION);

    oneof varid = SYSTEM_CONFIGURATION.EfiNetworkSupport,
      prompt   = STRING_TOKEN(STR_EFI_NETWORK_CONTROL),
      help     = STRING_TOKEN(STR_EFI_NETWORK_CONTROL_HELP),
      option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.LomDisableByGpio,
      prompt   = STRING_TOKEN(STR_LOM_DISABLE_BY_GPIO),
      help     = STRING_TOKEN(STR_LOM_DISABLE_BY_GPIO_HELP),
      option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
    endoneof;

  endform;

  form formid = VFR_RESERVE_MEMORY,

    title     = STRING_TOKEN(STR_RESERVE_MEMORY_OPTION);

    //
    // Reserve Memory that is hidden from the OS.
    //

    checkbox varid = SYSTEM_CONFIGURATION.ReserveMem,
      prompt   = STRING_TOKEN(STR_RESERVE_MEMORY_ENABLE),
      help     = STRING_TOKEN(STR_RESERVE_MEMORY_ENABLE_HELP),
      flags    = 0,
      default  = 0,
    endcheckbox;


    grayoutif ideqval SYSTEM_CONFIGURATION.ReserveMem == 0;
      numeric varid = SYSTEM_CONFIGURATION.ReserveStartAddr,
        prompt    = STRING_TOKEN(STR_RESERVE_MEMORY_START_ADDRESS),
        help      = STRING_TOKEN(STR_RESERVE_MEMORY_START_ADDRESS_HELP),
        flags     = DISPLAY_UINT_HEX,
        minimum   = 0x100000,
        maximum   = 0xFFFFFFFFFFFFFFFF,
        step      = 0x1000,
        default   = 0x100000,
		default   = 0x100000, defaultstore = AmiMfgDefault,
      endnumeric;
    endif;

    //
    // ReserveMem Result Display
    //
    suppressif ideqval SYSTEM_CONFIGURATION.ReserveMem == 0;
      text
          help   = STRING_TOKEN(STR_NULL_STRING),
          text   = STRING_TOKEN(STR_RESERVE_MEMORY_RESULT),
          text   = STRING_TOKEN(STR_RESERVE_MEMORY_RESULT_VALUE),
          flags  = 0, key = 0;
    endif;

    //
    // Reserve TAGEC Memory
    //
    oneof varid   = SYSTEM_CONFIGURATION.TagecMem,
        prompt      = STRING_TOKEN(STR_TAGEC_MEMORY),
        help        = STRING_TOKEN(STR_TAGEC_MEMORY_HELP),
        option text = STRING_TOKEN(STR_DISABLE),        value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),         value = 1, flags = RESET_REQUIRED | MANUFACTURING;
    endoneof;

  endform;

  #include "PchSetup.hfr"
  #include "CommonRefCode.hfr"
  #include "CsiSetup.hfr"
  #include "CsiSystemConfig.hfr"
  #include "CsiCpu0Config.hfr"
  #include "CsiCpu1Config.hfr"
  #include "CsiCpu2Config.hfr"
  #include "CsiCpu3Config.hfr"
#if (MAX_CPU_SOCKET > 4)
  #include "CsiCpu4Config.hfr"
  #include "CsiCpu5Config.hfr"
  #include "CsiCpu6Config.hfr"
  #include "CsiCpu7Config.hfr"
#endif  // (MAX_CPU_SOCKET > 4)
  #include "IioSetup.hfr"
  #include "EventLogSetup.hfr"
  #include "MemorySetup.hfr"
  #include "MemorySetupRas.hfr"
  #include "ProcessorSetup.hfr"
  //#include "ConsoleRedirectionConfigurationSetup.hfr" //Aptio V Grantley Override: Removing unused intel setup .uni/.hfr files.  
  //#include "UsbConfigData.hfr"  //Aptio V Server Override: Removing unused intel setup .uni/.hfr files.
#if defined(ME_SUPPORT_FLAG) && ME_SUPPORT_FLAG  
  #include "MeConfigData.hfr"
#endif  
  #include "PowerManagementSetup.hfr"
  //#include "BootAllOptions.hfr"  //Aptio V Server Override: Removing unused intel setup .uni/.hfr files.
 #include "Overclocking.hfr"  
 #include "IntelRCSetupHide.hfr"  
endformset;
