//
// This file contains an 'Intel Peripheral Driver' and is      
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may 
// be modified by the user, subject to additional terms of the 
// license agreement                                           
//
// *++
//
// Copyright (c) 1999 - 2019 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// 
// 
// Module Name:
//
//   ProcessorSetup.hfr 
// 
// Abstract:
// 
//   Processor Setup formset.
// 
// Revision History: 
// 
// --*/

#include <Token.h> // AptioV Server Override: Added to get the value of sdl tokens

  form formid = VFR_FORMID_PROCESSOR,

    title         = STRING_TOKEN(STR_PROCESSOR_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_PROCESSOR_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);

    suppressif TRUE;
    checkbox varid    = SYSTEM_CONFIGURATION.Access,
             prompt   = STRING_TOKEN(STR_NULL_PROCACCESS_STRING),
             help     = STRING_TOKEN(STR_NULL_STRING),
             flags    = 0,
    endcheckbox;
    endif;

    goto VFR_FORMID_PER_SOCKET,
    prompt  = STRING_TOKEN(STR_PERSOCKET_CONFIG_FORM_TITLE),
    help    = STRING_TOKEN(STR_PERSOCKET_CONFIG_FORM_HELP);

    //
    // Processor Information
    //
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_SOCKET_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_SOCKET_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_ID_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_ID_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_FREQ_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_FREQ_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MAX_RATIO_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MAX_RATIO_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MIN_RATIO_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MIN_RATIO_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MICROCODE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MICROCODE_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L1_CACHE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L1_CACHE_VALUE),
        flags = 0, key = 0;

    text 
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L2_CACHE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L2_CACHE_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L3_CACHE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L3_CACHE_VALUE),
        flags = 0, key = 0;

suppressif ideqval SYSTEM_CONFIGURATION.FourSocketsSKUFound == 0;

	
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_SOCKET_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_SOCKET_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_ID_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_ID_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_FREQ_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_FREQ_VALUE),
        flags = 0, key = 0;        
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MAX_RATIO_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_MAX_RATIO_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MIN_RATIO_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_MIN_RATIO_VALUE),
        flags = 0, key = 0;        
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_MICROCODE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_MICROCODE_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L1_CACHE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_L1_CACHE_VALUE),
        flags = 0, key = 0;
    text 
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L2_CACHE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_L2_CACHE_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_L3_CACHE_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR2_3_L3_CACHE_VALUE),
        flags = 0, key = 0;
endif;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET0_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET0_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET0_VALUE2),
        flags = 0, key = 0;

// Aptio V Server Override - hide second socket on one-socket platform (Grangeville)
#if NUMBER_CPU_SOCKETS == 2
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET1_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET1_VALUE),
        flags = 0, key = 0;

    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET1_VALUE2),
        flags = 0, key = 0;
#endif

suppressif ideqval SYSTEM_CONFIGURATION.FourSocketsSKUFound == 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET2_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET2_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET2_VALUE2),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET3_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET3_VALUE),
        flags = 0, key = 0;
    text
        help  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_NULL_STRING),
        text  = STRING_TOKEN(STR_PROCESSOR_VERSION_SOCKET3_VALUE2),
        flags = 0, key = 0;
endif;

    subtitle text = STRING_TOKEN(STR_NULL_STRING);


    //
    // Enable HT in Socket 0
    //
    suppressif  ideqval SYSTEM_CONFIGURATION.Access == SYSTEM_PASSWORD_USER;
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorHyperThreadingDisable,
        prompt      = STRING_TOKEN(STR_PROCESSOR0_HT),
        help        = STRING_TOKEN(STR_PROCESSOR_HT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
    endif;
    
    // A minimum of 4MB IDERAM is required for HSX and BDX.
    // disabling the IED is not allowed.
    suppressif TRUE;
      oneof varid     = SYSTEM_CONFIGURATION.IedSize,
          prompt      = STRING_TOKEN(STR_PROCESSOR_IED_PROMPT),
          help        = STRING_TOKEN(STR_PROCESSOR_IED_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_4096K),    value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;
    endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
      //
      //IED Trace support
      //
    suppressif ideqval SYSTEM_CONFIGURATION.IedSize == 0x00;
      oneof varid   = SYSTEM_CONFIGURATION.IedTraceSize,        
            prompt      = STRING_TOKEN(STR_PROCESSOR_IED_TRACE_PROMPT),
            help        = STRING_TOKEN(STR_PROCESSOR_IED_TRACE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_4M),       value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_8M),       value = 2,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_16M),      value = 3,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_32M),      value = 4,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_64M),      value = 5,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_128M),     value = 6,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_256M),     value = 7,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_512M),     value = 8,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_1G),       value = 9,  flags = RESET_REQUIRED;         
        endoneof;
    endif; // suppressif
endif;    

//AptioV Server Override - Suppress question that end user should not change
suppressif TRUE;
      //
      // TSEG support
      //
      oneof varid     = SYSTEM_CONFIGURATION.TsegSize,
          prompt      = STRING_TOKEN(STR_PROCESSOR_TSEG_PROMPT),
          help        = STRING_TOKEN(STR_PROCESSOR_TSEG_HELP),
          option text = STRING_TOKEN(STR_4M),      value = 0,   flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_8M),      value = 1,   flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_16M),     value = 2,   flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_32M),     value = 3,   flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_64M),     value = MAX_PROCESSOR_TSEG,   flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;          
endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
   oneof varid     = SYSTEM_CONFIGURATION.CheckCpuBist,
          prompt      = STRING_TOKEN(STR_CHECK_BIST_RESULT_PROMPT),
          help        = STRING_TOKEN(STR_CHECK_BIST_RESULT_HELP),
		  option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
	  
      endoneof;

    //
    // Flexible Ratio
    //
    suppressif  ideqval SYSTEM_CONFIGURATION.Access == SYSTEM_PASSWORD_USER;
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorFlexibleRatioOverrideEnable,
          prompt      = STRING_TOKEN(STR_PROCESSOR_RATIO_OVERRIDE),
          help        = STRING_TOKEN(STR_PROCESSOR_RATIO_OVERRIDE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;


    grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorFlexibleRatioOverrideEnable == 0;
      numeric varid = SYSTEM_CONFIGURATION.ProcessorFlexibleRatio,
          prompt  = STRING_TOKEN(STR_PROCESSOR_CORE_RATIO),
          help    = STRING_TOKEN(STR_PROCESSOR_CORE_RATIO_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0, 
          maximum = MAX_PROCESSOR_CORE_RATIO,
          step    = 1, // Stepping of 0 equates to a manual entering of a value, otherwise
                       // it will auto-increment with a left/right arrow
          default = DEFAULT_PROCESSOR_CORE_RATIO,
          default = DEFAULT_PROCESSOR_CORE_RATIO, defaultstore = AmiMfgDefault,
      endnumeric;
    endif;
    endif;  
endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // 3strike timer enable
    //
    oneof varid     = SYSTEM_CONFIGURATION.ThreeStrikeTimer,
        prompt      = STRING_TOKEN(STR_THREESTRIKETIMER_DISABLE),
        help        = STRING_TOKEN(STR_THREESTRIKETIMER_DISABLE_HELP),
        option text = STRING_TOKEN(STR_ENABLE),  value = 1,  flags = RESET_REQUIRED| MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED ;
    endoneof;
endif;

    //
    // iTurbo Mode Enable
    //
    suppressif  TRUE;   //Aptio V Server Override - Intel RC always overwrites 0x1b0 with 7, regardless of this value.
    oneof varid     = SYSTEM_CONFIGURATION.iTurboModeValue,
        prompt      = STRING_TOKEN(STR_PROCESSOR_I_TURBO_MODE),
        help        = STRING_TOKEN(STR_PROCESSOR_I_TURBO_MODE_HELP),
        option text = STRING_TOKEN(STR_TRADITIONAL), value = ITURBO_MODE_TRADITIONAL, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_POWER_OPTIMIZED), value = ITURBO_MODE_POWER_OPTIMIZED, flags = RESET_REQUIRED;
    endoneof;
    endif;
    //
    // eXtreme Enable (XE)
    // rrr: comment because Extreme is not assigned with value.
    //
//    grayoutif ideqval SYSTEM_CONFIGURATION.Extreme == 0x00;
//        oneof varid     = SYSTEM_CONFIGURATION.ProcessorXEEnable,
//            prompt      = STRING_TOKEN(STR_PROCESSOR_XE),
//            help        = STRING_TOKEN(STR_PROCESSOR_XE_HELP),
//            option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
//            option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
//        endoneof;
//
//        //
//        // Turbo-XE Mode Processor TDC Limit Override Enable
//        //
//        oneof varid     = SYSTEM_CONFIGURATION.ProcessorTDCLimitOverrideEnable,
//            prompt      = STRING_TOKEN(STR_PROCESSOR_TDC_OVERRIDE),
//            help        = STRING_TOKEN(STR_PROCESSOR_TDC_OVERRIDE_HELP),
//            option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
//            option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
//        endoneof;
//
//        //
//        // Turbo-XE Mode Processor TDC Limit
//        //
//        numeric varid   = SYSTEM_CONFIGURATION.ProcessorTDCLimit,
//                prompt  = STRING_TOKEN(STR_PROCESSOR_TDC),
//                help    = STRING_TOKEN(STR_PROCESSOR_TDC_HELP),
//                flags   = 0 | RESET_REQUIRED,
//                minimum = 0,
//                maximum = 127,      // 1/8 A granularity. MAX value = 8000h - 1
//                step    = 0,        // Stepping of 0 equates to a manual entering of a value, 
//                                    // otherwise it will auto-increment with a left/right arrow
//                default = 0,
//        endnumeric;
//
//        //
//        // Turbo-XE Mode Processor TDP Limit Override Enable
//        //
//        oneof varid     = SYSTEM_CONFIGURATION.ProcessorTDPLimitOverrideEnable,
//            prompt      = STRING_TOKEN(STR_PROCESSOR_TDP_OVERRIDE),
//            help        = STRING_TOKEN(STR_PROCESSOR_TDP_OVERRIDE_HELP),
//            option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
//            option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
//        endoneof;
//
//        //
//        // Turbo-XE Mode Processor TDP Limit
//        //
//        numeric varid   = SYSTEM_CONFIGURATION.ProcessorTDPLimit,
//                prompt  = STRING_TOKEN(STR_PROCESSOR_TDP),
//                help    = STRING_TOKEN(STR_PROCESSOR_TDP_HELP),
//                flags   = 0 | RESET_REQUIRED,
//                minimum = 0,
//                maximum = 127,      // 1/8 W granularity. MAX value = 8000h - 1
//                step    = 0,        // Stepping of 0 equates to a manual entering of a value, 
//                                    // otherwise it will auto-increment with a left/right arrow
//                default = 0,
//        endnumeric;
//    endif;


//MWAIT changes-start 
      //
      // Monitor / Mwait - never disable Mwait due to silicon HSD, force code in PlatformCpuPolicy.c
      //
      oneof varid     = SYSTEM_CONFIGURATION.MonitorMwaitEnable,
          prompt      = STRING_TOKEN(STR_MWAIT),
          help        = STRING_TOKEN(STR_MWAIT_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED  | MANUFACTURING | DEFAULT;
      endoneof;
//MWAIT changes-end

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // Fast String
    //
    oneof varid     = SYSTEM_CONFIGURATION.FastStringEnable,
        prompt      = STRING_TOKEN(STR_FAST_STR),
        help        = STRING_TOKEN(STR_FAST_STR_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED  | MANUFACTURING | DEFAULT;
    endoneof;
endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // Machine Check
    //
    oneof varid     = SYSTEM_CONFIGURATION.MachineCheckEnable,
        prompt      = STRING_TOKEN(STR_MCH_STR),
        help        = STRING_TOKEN(STR_MCH_STR_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED  | MANUFACTURING | DEFAULT;
    endoneof;
endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // CPUID Max
    //
    oneof varid     = SYSTEM_CONFIGURATION.CpuidMaxValue,
        prompt      = STRING_TOKEN(STR_LIMIT_CPUID_PROMPT),
        help        = STRING_TOKEN(STR_LIMIT_CPUID_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;
endif;


//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // XTPR
    //
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorxTPRDisable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_XTPR),
        help        = STRING_TOKEN(STR_PROCESSOR_XTPR_HELP),
        option text = STRING_TOKEN(STR_ENABLE),   value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE),  value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
endif;

    //
    // Execute Disable
    //
    oneof varid     = SYSTEM_CONFIGURATION.ExecuteDisableBit,
        prompt      = STRING_TOKEN (STR_EXECUTE_DISABLE_BIT_PROMPT),
        help        = STRING_TOKEN (STR_EXECUTE_DISABLE_BIT_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = 0;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid     = SYSTEM_CONFIGURATION.ProcessorLtsxEnable,
        prompt      = STRING_TOKEN(STR_LTSX),
        help        = STRING_TOKEN(STR_LTSX_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING  | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
    endoneof;

  grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorLtsxEnable == 0x01;
    //
    // VMX
    //
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorVmxEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_VMX),
        help        = STRING_TOKEN(STR_PROCESSOR_VMX_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | DEFAULT;
    endoneof;
  endif;
    //
    // SMX
    //

  grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorLtsxEnable == 0x01;
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorSmxEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_SMX),
        help        = STRING_TOKEN(STR_PROCESSOR_SMX_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

    //
    // Lock Chipset
    //
    grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorLtsxEnable == 0x01;
      oneof varid     = SYSTEM_CONFIGURATION.LockChipset,
          prompt      = STRING_TOKEN(STR_LOCK_CHIPSET_PROMPT),
          help        = STRING_TOKEN(STR_LOCK_CHIPSET_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;
     endif;
     
#ifdef BTG_FLAG
#if TESTMENU_FLAG || ME_TESTMENU_FLAG
      //
      // Skip StopPbet 
      //
      oneof varid     = SYSTEM_CONFIGURATION.SkipStopPbet,
          prompt      = STRING_TOKEN(STR_SKIP_STOPPBET_PROMPT),
          help        = STRING_TOKEN(STR_SKIP_STOPPBET_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
#endif // TESTMENU_FLAG || ME_TESTMENU_FLAG
#endif // BTG_FLAG

    //
    // MSR Lock Bit Control
    // Lock the MSR if LT is enabled.
    //
    //grayoutif ideqval SYSTEM_CONFIGURATION.ProcessorSmxEnable == 0x01;
        oneof varid     = SYSTEM_CONFIGURATION.ProcessorMsrLockControl,
            prompt      = STRING_TOKEN(STR_PROCESSOR_MSR_LOCK),
            help        = STRING_TOKEN(STR_PROCESSOR_MSR_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | DEFAULT;
        endoneof;
    //endif;

    //
    // PPIN
    //
      oneof varid     = SYSTEM_CONFIGURATION.PpinControl,
          prompt      = STRING_TOKEN(STR_PPIN_CONTROL_PROMPT),
          help        = STRING_TOKEN(STR_PPIN_CONTROL_HELP),
          option text = STRING_TOKEN(STR_UNLOCK_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_UNLOCK_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;   

    //
    // IA32_DEBUG_INTERFACE_MSR  
    //
      oneof varid     = SYSTEM_CONFIGURATION.DebugInterface,
          prompt      = STRING_TOKEN(STR_DEBUG_INTERFACE),
          help        = STRING_TOKEN(STR_DEBUG_INTERFACE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;
        

    //
    // Hardware Prefetcher
    //
    oneof varid     = SYSTEM_CONFIGURATION.MlcStreamerPrefetcherEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_HARDWARE_PREFETCHER),
        help        = STRING_TOKEN(STR_PROCESSOR_HARDWARE_PREFETCHER_HELP),
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    endoneof;

    //
    // Adjacent Cache Line Prefetcher
    //
    oneof varid     = SYSTEM_CONFIGURATION.MlcSpatialPrefetcherEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_ADJACENT_CACHE_PREFETCHER),
        help        = STRING_TOKEN(STR_PROCESSOR_ADJACENT_CACHE_PREFETCHER_HELP),
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    endoneof;

    //
    // DCU Streamer Prefetcher
    //
    oneof varid     = SYSTEM_CONFIGURATION.DCUStreamerPrefetcherEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_DCU_STREAMER_PREFETCHER),
        help        = STRING_TOKEN(STR_PROCESSOR_DCU_STREAMER_PREFETCHER_HELP),
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    endoneof;

    //
    // DCU IP Prefetcher
    //
    oneof varid     = SYSTEM_CONFIGURATION.DCUIPPrefetcherEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_DCU_IP_PREFETCHER),
        help        = STRING_TOKEN(STR_PROCESSOR_DCU_IP_PREFETCHER_HELP),
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    endoneof;

    //
    // DCU Mode Selection
    //
    oneof varid     = SYSTEM_CONFIGURATION.DCUModeSelection,
        prompt      = STRING_TOKEN(STR_PROCESSOR_DCU_MODE),
        help        = STRING_TOKEN(STR_PROCESSOR_DCU_MODE_HELP),
        option text = STRING_TOKEN(STR_32K_8WAY_WITHOUT_ECC),   value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_16K_4WAY_WITH_ECC),      value = 1, flags = RESET_REQUIRED;
    endoneof;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // BSP Selection
    //
    // 2S systems
    suppressif NOT ideqval SYSTEM_CONFIGURATION.FourSocketsSKUFound == 0;
      oneof varid     = SYSTEM_CONFIGURATION.BspSelection,
            prompt      = STRING_TOKEN(STR_BSP_SELECT),
            help        = STRING_TOKEN(STR_BSP_SELECT_HELP),
            option text = STRING_TOKEN(STR_SOCKET0),        value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SOCKET1),        value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_AUTO),           value = 0xFF, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
       endoneof;
    endif; // Suppressif FourSocketsSKUFound
    // 4S systems
    suppressif ideqval SYSTEM_CONFIGURATION.FourSocketsSKUFound == 0;
      oneof varid     = SYSTEM_CONFIGURATION.BspSelection,
            prompt      = STRING_TOKEN(STR_BSP_SELECT),
            help        = STRING_TOKEN(STR_BSP_SELECT_HELP),
            option text = STRING_TOKEN(STR_SOCKET0),        value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SOCKET1),        value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SOCKET2),        value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_SOCKET3),        value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_AUTO),           value = 0xFF, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;
    endif; // Suppressif NOT FourSocketsSKUFound
endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
    //
    // UP Boot Mode Selection
    //
    oneof varid     = SYSTEM_CONFIGURATION.UpBootSelection,
         prompt      = STRING_TOKEN(STR_UPBOOT_SELECT),
         help        = STRING_TOKEN(STR_UPBOOT_SELECT_HELP),
         option text = STRING_TOKEN(STR_DISABLE),        value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
         option text = STRING_TOKEN(STR_SOCKET0),        value = 1, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_SOCKET1),        value = 2, flags = RESET_REQUIRED;
    endoneof;
endif;

    //
    // DCA (Direct Cache Access)
    //
    oneof varid     = SYSTEM_CONFIGURATION.DcaEnable,
        prompt      = STRING_TOKEN(STR_DCA),
        help        = STRING_TOKEN(STR_DCA_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO),     value = 2, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid     = SYSTEM_CONFIGURATION.DcaPrefetchDelayValue,
        prompt      = STRING_TOKEN(STR_DCA_PREFETCH_DELAY_PROMPT),
        help        = STRING_TOKEN(STR_DCA_PREFETCH_DELAY_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_8),        value = 1,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_16),       value = 2,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_24),       value = 3,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_32),       value = 4,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_40),       value = 5,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_48),       value = 6,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_56),       value = 7,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_64),       value = 8,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_72),       value = 9,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_80),       value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_88),       value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_96),       value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_104),      value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_112),      value = 14, flags = RESET_REQUIRED;
    endoneof;

//AptioV Server Override - Suppress question that end user should not change
suppressif TRUE;
    //
    // MTRR type
    //
    oneof varid = SYSTEM_CONFIGURATION.MTRRDefTypeUncachable,
        prompt  = STRING_TOKEN(STR_MTRR_DEFAULT_TYPE_PROMPT),
        help    = STRING_TOKEN(STR_MTRR_DEFAULT_TYPE_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;
endif;

    //
    // XAPIC support
    //
    oneof varid     = SYSTEM_CONFIGURATION.ProcessorXapic,
        prompt      = STRING_TOKEN(STR_PROCESSOR_XAPIC),
        help        = STRING_TOKEN(STR_PROCESSOR_XAPIC_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
    endoneof;
  
    //
    // X2APIC_OPT_OUT Flag support
    //
    suppressif ideqval SYSTEM_CONFIGURATION.cpuType == CPU_HSX;
      suppressif ideqval SYSTEM_CONFIGURATION.ProcessorXapic == 0;
        oneof varid     = SYSTEM_CONFIGURATION.X2ApicOptOut,
            prompt      = STRING_TOKEN(STR_X2APIC_OPT_OUT_PROMPT),
            help        = STRING_TOKEN(STR_X2APIC_OPT_OUT_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;
    
    //
    // AES-NI support
    //
    oneof varid     = SYSTEM_CONFIGURATION.AesEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_AES),
        help        = STRING_TOKEN(STR_PROCESSOR_AES_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | DEFAULT;
    endoneof;

//AptioV Server Override - Suppress question that end user should not change
suppressif TRUE;   
  //
  // Physical Mode type
  //
  oneof varid = SYSTEM_CONFIGURATION.ForcePhysicalModeEnable,
      prompt  = STRING_TOKEN(STR_FORCE_PHYSICAL_MODE_PROMPT),
      help    = STRING_TOKEN(STR_FORCE_PHYSICAL_MODE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
  endoneof;
endif;

//AptioV Server Override - Suppress test question that end user should not change
suppressif TRUE;
  //
  // Virtual Wire Mode
  //
  oneof varid = SYSTEM_CONFIGURATION.ProcessorVirtualWireMode,
      prompt  = STRING_TOKEN(STR_VIRTUAL_WIRE_MODE_PROMPT),
      help    = STRING_TOKEN(STR_VIRTUAL_WIRE_MODE_HELP),
      option text = STRING_TOKEN(STR_VIRTUAL_WIRE_A), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_VIRTUAL_WIRE_B), value = 1, flags = RESET_REQUIRED;
  endoneof;
endif;

  oneof varid   = SYSTEM_CONFIGURATION.PCIeDownStreamPECIWrite,
    prompt      = STRING_TOKEN(STR_PECIDN_ERROR_PROMPT),
    help        = STRING_TOKEN(STR_PECIDN_ERROR_HELP),
    option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
  endoneof;

      numeric varid = SYSTEM_CONFIGURATION.IioLlcWaysMask,
          prompt  = STRING_TOKEN(STR_IIO_LLC_WAYS_PROMPT),
          help    = STRING_TOKEN(STR_IIO_LLC_WAYS_HELP),
          flags   = DISPLAY_UINT_HEX | RESET_REQUIRED,
          minimum  = 0,
          maximum = 0xfffff,
          step       = 1,
          default   = 0,
      endnumeric;
 
      numeric varid = SYSTEM_CONFIGURATION.QlruCfgMask_Hi,
          prompt  = STRING_TOKEN(STR_QLRU_CFG_HI_PROMPT),
          help    = STRING_TOKEN(STR_QLRU_CFG_HELP),
          flags   = DISPLAY_UINT_HEX | RESET_REQUIRED,
          minimum  = 0,
          maximum = 0xffffffff,
          step       = 1,
          default   = 0,
      endnumeric;
 
      numeric varid = SYSTEM_CONFIGURATION.QlruCfgMask_Lo,
          prompt  = STRING_TOKEN(STR_QLRU_CFG_LO_PROMPT),
          help    = STRING_TOKEN(STR_QLRU_CFG_HELP),
          flags   = DISPLAY_UINT_HEX | RESET_REQUIRED,
          minimum  = 0,
          maximum = 0xffffffff,
          step       = 1,
          default   = 0,
      endnumeric;


      oneof varid   = SYSTEM_CONFIGURATION.SmmSaveState,
        prompt      = STRING_TOKEN(STR_SMM_SAVE_STATE),
        help        = STRING_TOKEN(STR_SMM_SAVE_STATE_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
      
      oneof varid   = SYSTEM_CONFIGURATION.TargetedSmi,
        prompt      = STRING_TOKEN(STR_TARGETED_SMI),
        help        = STRING_TOKEN(STR_TARGETED_SMI_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
 
  endform;


 //
 //  Per-socket Config Form
 //
  form formid = VFR_FORMID_PER_SOCKET,
    title = STRING_TOKEN(STR_PERSOCKET_CONFIG_FORM_TITLE);

           goto VFR_FORMID_CPU_SOCKET0,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_0),
           help    = STRING_TOKEN(STR_NULL);

// Aptio V Server Override
#if NUMBER_CPU_SOCKETS == 2
       //suppressif  ideqval  socket1_not_present
           goto VFR_FORMID_CPU_SOCKET1,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_1),
           help    = STRING_TOKEN(STR_NULL);
#endif

// Aptio V Server Override
#if NUMBER_CPU_SOCKETS > 2
       //suppressif  ideqval  socket2_not_present
           goto VFR_FORMID_CPU_SOCKET2,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_2),
           help    = STRING_TOKEN(STR_NULL);

       //suppressif  ideqval  socket3_not_present
           goto VFR_FORMID_CPU_SOCKET3,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_3),
           help    = STRING_TOKEN(STR_NULL);
#endif	   
//Aptio V Server Override
#if 0
       //suppressif  ideqval  socket4_not_present
           goto VFR_FORMID_CPU_SOCKET4,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_4),
           help    = STRING_TOKEN(STR_NULL);

       //suppressif  ideqval  socket5_not_present
           goto VFR_FORMID_CPU_SOCKET5,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_5),
           help    = STRING_TOKEN(STR_NULL);

       //suppressif  ideqval  socket6_not_present
           goto VFR_FORMID_CPU_SOCKET6,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_6),
           help    = STRING_TOKEN(STR_NULL);

       //suppressif  ideqval  socket7_not_present
           goto VFR_FORMID_CPU_SOCKET7,
           prompt  = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_7),
           help    = STRING_TOKEN(STR_NULL);
#endif
  endform;
  

  //
  //  CPU Socket 0  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET0,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_0);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_0);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   0
    #include "ProcessorSocketSetup.hfr"

  endform;

  //
  //  CPU Socket 1  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET1,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_1);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_1);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   1
    #include "ProcessorSocketSetup.hfr"

  endform;

//Aptio V Server Override
#if NUMBER_CPU_SOCKETS > 2
  //
  //  CPU Socket 2  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET2,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_2);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_2);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   2
    #include "ProcessorSocketSetup.hfr"

  endform;

  //
  //  CPU Socket 3  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET3,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_3);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_3);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   3
    #include "ProcessorSocketSetup.hfr"

  endform;
#endif

//Aptio V Server Override
#if 0
#if MAX_SOCKET == 8
  //
  //  CPU Socket 4  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET4,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_4);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_4);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   4
    #include "ProcessorSocketSetup.hfr"

  endform;

  //
  //  CPU Socket 5  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET5,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_5);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_5);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   5
    #include "ProcessorSocketSetup.hfr"

  endform;

  //
  //  CPU Socket 6  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET6,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_6);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_6);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   6
    #include "ProcessorSocketSetup.hfr"

  endform;

  //
  //  CPU Socket 7  Form 
  //
  form formid = VFR_FORMID_CPU_SOCKET7,
    title = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_7);

    subtitle text = STRING_TOKEN(STR_SOCKET_CONFIG_FORM_TITLE_7);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    //subtitle text = STRING_TOKEN(STR_NULL_STRING);//AptioV Server Override: Extra Horizontal Lines display removal.

    #undef  INDEX
    #define INDEX   7
    #include "ProcessorSocketSetup.hfr"

  endform;
  
#endif      //  MAX_SOCKET = 8
#endif












