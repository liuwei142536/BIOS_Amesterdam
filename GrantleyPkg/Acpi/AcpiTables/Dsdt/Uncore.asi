/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++

  Copyright (c)  2001 - 2015 Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under 
  a license and may only be used or copied in accordance with the terms 
  of the license.  Except as permitted by such license, no part of this 
  software or documentation may be reproduced, stored in a retrieval system, 
  or transmitted in any form or by any means without the express written 
  consent of Intel Corporation.

  Module Name:

    Uncore.asi

  Abstract:

    Uncore devices

--*/

Scope (\_SB) {

//AptioV server override start: AMI declares ROUTER DEVICE LNKA - LNKD in Scope \SB.
    Name (PRUN, Package() {
        Package() { 0x0008FFFF, 0, LNKA, 0 },
        Package() { 0x0008FFFF, 1, LNKB, 0 },
        Package() { 0x0008FFFF, 2, LNKC, 0 },
        Package() { 0x0008FFFF, 3, LNKD, 0 },
        
        Package() { 0x0009FFFF, 0, LNKA, 0 },
        Package() { 0x0009FFFF, 1, LNKB, 0 },
        Package() { 0x0009FFFF, 2, LNKC, 0 },
        Package() { 0x0009FFFF, 3, LNKD, 0 },
        
        Package() { 0x000AFFFF, 0, LNKA, 0 },
        Package() { 0x000AFFFF, 1, LNKB, 0 },
        Package() { 0x000AFFFF, 2, LNKC, 0 },
        Package() { 0x000AFFFF, 3, LNKD, 0 },
        
        Package() { 0x000BFFFF, 0, LNKA, 0 },
        Package() { 0x000BFFFF, 1, LNKB, 0 },
        Package() { 0x000BFFFF, 2, LNKC, 0 },
        Package() { 0x000BFFFF, 3, LNKD, 0 },
        
        Package() { 0x000CFFFF, 0, LNKA, 0 },
        Package() { 0x000CFFFF, 1, LNKB, 0 },
        Package() { 0x000CFFFF, 2, LNKC, 0 },
        Package() { 0x000CFFFF, 3, LNKD, 0 },
        
        Package() { 0x000DFFFF, 0, LNKA, 0 },
        Package() { 0x000DFFFF, 1, LNKB, 0 },
        Package() { 0x000DFFFF, 2, LNKC, 0 },
        Package() { 0x000DFFFF, 3, LNKD, 0 },
        
        Package() { 0x000EFFFF, 0, LNKA, 0 },
        Package() { 0x000EFFFF, 1, LNKB, 0 },
        Package() { 0x000EFFFF, 2, LNKC, 0 },
        Package() { 0x000EFFFF, 3, LNKD, 0 },
        
        Package() { 0x000FFFFF, 0, LNKA, 0 },
        Package() { 0x000FFFFF, 1, LNKB, 0 },
        Package() { 0x000FFFFF, 2, LNKC, 0 },
        Package() { 0x000FFFFF, 3, LNKD, 0 },
        
        Package() { 0x0010FFFF, 0, LNKA, 0 },
        Package() { 0x0010FFFF, 1, LNKB, 0 },
        Package() { 0x0010FFFF, 2, LNKC, 0 },
        Package() { 0x0010FFFF, 3, LNKD, 0 },
        
        Package() { 0x0011FFFF, 0, LNKA, 0 },
        Package() { 0x0011FFFF, 1, LNKB, 0 },
        Package() { 0x0011FFFF, 2, LNKC, 0 },
        Package() { 0x0011FFFF, 3, LNKD, 0 },
        
        Package() { 0x0012FFFF, 0, LNKA, 0 },
        Package() { 0x0012FFFF, 1, LNKB, 0 },
        Package() { 0x0012FFFF, 2, LNKC, 0 },
        Package() { 0x0012FFFF, 3, LNKD, 0 },
        
        Package() { 0x0013FFFF, 0, LNKA, 0 },
        Package() { 0x0013FFFF, 1, LNKB, 0 },
        Package() { 0x0013FFFF, 2, LNKC, 0 },
        Package() { 0x0013FFFF, 3, LNKD, 0 },
        
        Package() { 0x0014FFFF, 0, LNKA, 0 },
        Package() { 0x0014FFFF, 1, LNKB, 0 },
        Package() { 0x0014FFFF, 2, LNKC, 0 },
        Package() { 0x0014FFFF, 3, LNKD, 0 },
        
        Package() { 0x0016FFFF, 0, LNKA, 0 },
        Package() { 0x0016FFFF, 1, LNKB, 0 },
        Package() { 0x0016FFFF, 2, LNKC, 0 },
        Package() { 0x0016FFFF, 3, LNKD, 0 },
        
        Package() { 0x0017FFFF, 0, LNKA, 0 },
        Package() { 0x0017FFFF, 1, LNKB, 0 },
        Package() { 0x0017FFFF, 2, LNKC, 0 },
        Package() { 0x0017FFFF, 3, LNKD, 0 },
        
        Package() { 0x0018FFFF, 0, LNKA, 0 },
        Package() { 0x0018FFFF, 1, LNKB, 0 },
        Package() { 0x0018FFFF, 2, LNKC, 0 },
        Package() { 0x0018FFFF, 3, LNKD, 0 },
        
        Package() { 0x0019FFFF, 0, LNKA, 0 },
        Package() { 0x0019FFFF, 1, LNKB, 0 },
        Package() { 0x0019FFFF, 2, LNKC, 0 },
        Package() { 0x0019FFFF, 3, LNKD, 0 },

        Package() { 0x001CFFFF, 0, LNKA, 0 },
        Package() { 0x001CFFFF, 1, LNKB, 0 },
        Package() { 0x001CFFFF, 2, LNKC, 0 },
        Package() { 0x001CFFFF, 3, LNKD, 0 },

        Package() { 0x001DFFFF, 0, LNKA, 0 },
        Package() { 0x001DFFFF, 1, LNKB, 0 },
        Package() { 0x001DFFFF, 2, LNKC, 0 },
        Package() { 0x001DFFFF, 3, LNKD, 0 },

        Package() { 0x001EFFFF, 0, LNKA, 0 },
        Package() { 0x001EFFFF, 1, LNKB, 0 },
        Package() { 0x001EFFFF, 2, LNKC, 0 },
        Package() { 0x001EFFFF, 3, LNKD, 0 },

        Package() { 0x001FFFFF, 0, LNKA, 0 },
        Package() { 0x001FFFFF, 1, LNKB, 0 },
        Package() { 0x001FFFFF, 2, LNKC, 0 },
        Package() { 0x001FFFFF, 3, LNKD, 0 },
    })
//AptioV server override end

  Name (ARUN, Package() {
    Package() { 0x0008FFFF, 0, 0, 16 },
    Package() { 0x0008FFFF, 1, 0, 17 },
    Package() { 0x0008FFFF, 2, 0, 18 },
    Package() { 0x0008FFFF, 3, 0, 19 },

    Package() { 0x0009FFFF, 0, 0, 16 },
    Package() { 0x0009FFFF, 1, 0, 17 },
    Package() { 0x0009FFFF, 2, 0, 18 },
    Package() { 0x0009FFFF, 3, 0, 19 },

    Package() { 0x000AFFFF, 0, 0, 16 },
    Package() { 0x000AFFFF, 1, 0, 17 },
    Package() { 0x000AFFFF, 2, 0, 18 },
    Package() { 0x000AFFFF, 3, 0, 19 },

    Package() { 0x000BFFFF, 0, 0, 16 },
    Package() { 0x000BFFFF, 1, 0, 17 },
    Package() { 0x000BFFFF, 2, 0, 18 },
    Package() { 0x000BFFFF, 3, 0, 19 },

    Package() { 0x000CFFFF, 0, 0, 16 },
    Package() { 0x000CFFFF, 1, 0, 17 },
    Package() { 0x000CFFFF, 2, 0, 18 },
    Package() { 0x000CFFFF, 3, 0, 19 },

    Package() { 0x000DFFFF, 0, 0, 16 },
    Package() { 0x000DFFFF, 1, 0, 17 },
    Package() { 0x000DFFFF, 2, 0, 18 },
    Package() { 0x000DFFFF, 3, 0, 19 },

    Package() { 0x000EFFFF, 0, 0, 16 },
    Package() { 0x000EFFFF, 1, 0, 17 },
    Package() { 0x000EFFFF, 2, 0, 18 },
    Package() { 0x000EFFFF, 3, 0, 19 },

    Package() { 0x000FFFFF, 0, 0, 16 },
    Package() { 0x000FFFFF, 1, 0, 17 },
    Package() { 0x000FFFFF, 2, 0, 18 },
    Package() { 0x000FFFFF, 3, 0, 19 },

    Package() { 0x0010FFFF, 0, 0, 16 },
    Package() { 0x0010FFFF, 1, 0, 17 },
    Package() { 0x0010FFFF, 2, 0, 18 },
    Package() { 0x0010FFFF, 3, 0, 19 },

    Package() { 0x0011FFFF, 0, 0, 16 },
    Package() { 0x0011FFFF, 1, 0, 17 },
    Package() { 0x0011FFFF, 2, 0, 18 },
    Package() { 0x0011FFFF, 3, 0, 19 },

    Package() { 0x0012FFFF, 0, 0, 16 },
    Package() { 0x0012FFFF, 1, 0, 17 },
    Package() { 0x0012FFFF, 2, 0, 18 },
    Package() { 0x0012FFFF, 3, 0, 19 },

    Package() { 0x0013FFFF, 0, 0, 16 },
    Package() { 0x0013FFFF, 1, 0, 17 },
    Package() { 0x0013FFFF, 2, 0, 18 },
    Package() { 0x0013FFFF, 3, 0, 19 },

    Package() { 0x0014FFFF, 0, 0, 16 },
    Package() { 0x0014FFFF, 1, 0, 17 },
    Package() { 0x0014FFFF, 2, 0, 18 },
    Package() { 0x0014FFFF, 3, 0, 19 },

    Package() { 0x0016FFFF, 0, 0, 16 },
    Package() { 0x0016FFFF, 1, 0, 17 },
    Package() { 0x0016FFFF, 2, 0, 18 },
    Package() { 0x0016FFFF, 3, 0, 19 },

    Package() { 0x0017FFFF, 0, 0, 16 },
    Package() { 0x0017FFFF, 1, 0, 17 },
    Package() { 0x0017FFFF, 2, 0, 18 },
    Package() { 0x0017FFFF, 3, 0, 19 },

    Package() { 0x0018FFFF, 0, 0, 16 },
    Package() { 0x0018FFFF, 1, 0, 17 },
    Package() { 0x0018FFFF, 2, 0, 18 },
    Package() { 0x0018FFFF, 3, 0, 19 },

    Package() { 0x0019FFFF, 0, 0, 16 },
    Package() { 0x0019FFFF, 1, 0, 17 },
    Package() { 0x0019FFFF, 2, 0, 18 },
    Package() { 0x0019FFFF, 3, 0, 19 },

    Package() { 0x001CFFFF, 0, 0, 16 },
    Package() { 0x001CFFFF, 1, 0, 17 },
    Package() { 0x001CFFFF, 2, 0, 18 },
    Package() { 0x001CFFFF, 3, 0, 19 },

    Package() { 0x001DFFFF, 0, 0, 16 },
    Package() { 0x001DFFFF, 1, 0, 17 },
    Package() { 0x001DFFFF, 2, 0, 18 },
    Package() { 0x001DFFFF, 3, 0, 19 },

    Package() { 0x001EFFFF, 0, 0, 16 },
    Package() { 0x001EFFFF, 1, 0, 17 },
    Package() { 0x001EFFFF, 2, 0, 18 },
    Package() { 0x001EFFFF, 3, 0, 19 },

    Package() { 0x001FFFFF, 0, 0, 16 },
    Package() { 0x001FFFFF, 1, 0, 17 },
    Package() { 0x001FFFFF, 2, 0, 18 },
    Package() { 0x001FFFFF, 3, 0, 19 },
  })

  //----------------------------------------------------------------
  //  Method USTA()
  //      Get current enabled processors in the package
  //      If it has at least 1 thread enabled, report the Uncore 
  //      otherwise, do not report uncore
  //  Inputs: Arg0 = Socket Number where uncore belongs
  //----------------------------------------------------------------
  Method(USTA, 1) {        // Processor Status
    Store(0, Local6)
    ShiftRight(PRBM, Arg0, Local6)
    And(Local6, 0x1, Local6)
    if(LEqual(Local6, 0x0)) {
      Return(0x00)
    } else {
      Return(0x0F)
    }
  } // End Method USTA
/*
  //
  // Uncore for socket 3 (Devices 8 - 31)
  //
  Device (UNC3) {
    Name (_HID, EISAID("PNP0A03"))
    Name (_UID, 0xFF)
    Method (_BBN, 0, NotSerialized) {
      return (BBU3)
    }
    Name (_ADR, 0x00000000)
    Name (_EJD, "\\_SB.SCK3")

    Method (_STA) {
      Return(\_SB.USTA(3))
    }

    Name (_CRS, ResourceTemplate() {
      WORDBusNumber (     // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
        ResourceProducer, // bit 0 of general flags is 1
        MinFixed,         // Range is fixed
        MaxFixed,         // Range is fixed
        PosDecode,        // PosDecode
        0x4946,           // Granularity (FIX4 - Patched by ACPI Platform Driver during POST)
        0x3458,           // Min         (FIX4 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Max         (FIX4 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Translation
        0x0001           // Range Length = Max-Min+1 (FIX4 - Patched by ACPI Platform Driver during POST)
      )
    })

    Method (_PRT, 0) {
      If (LEqual(PICM, Zero)) {
        Return (PRUN)
      }
      Return (ARUN)
    }
  }

  //
  // Uncore for socket 2 (Devices 8 - 31)
  //
  Device (UNC2) {
    Name (_HID, EISAID("PNP0A03"))
    Name (_UID, 0xBF)
    Method (_BBN, 0, NotSerialized) {
      return (BBU2)
    }
    Name (_ADR, 0x00000000)
    Name (_EJD, "\\_SB.SCK2")

    Method (_STA) {
      Return(\_SB.USTA(2))
    }

    Name (_CRS, ResourceTemplate() {
      WORDBusNumber (     // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
        ResourceProducer, // bit 0 of general flags is 1
        MinFixed,         // Range is fixed
        MaxFixed,         // Range is fixed
        PosDecode,        // PosDecode
        0x4946,           // Granularity (FIX3 - Patched by ACPI Platform Driver during POST)
        0x3358,           // Min         (FIX3 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Max         (FIX3 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Translation
        0x0001           // Range Length = Max-Min+1 (FIX3 - Patched by ACPI Platform Driver during POST)
      )
    })

    Method (_PRT, 0) {
      If (LEqual(PICM, Zero)) {
        Return (PRUN)
      }
      Return (ARUN)
    }
  }

  //
  // Uncore for socket 1 (Devices 8 - 31)
  //
  Device (UNC1) {
    Name (_HID, EISAID("PNP0A03"))
    Name (_UID, 0x7F)
    Method (_BBN, 0, NotSerialized) {
      return (BBU1)
    }
    Name (_ADR, 0x00000000)
    Name (_EJD, "\\_SB.SCK1")

    Method (_STA) {
      Return(\_SB.USTA(1))
    }

    Name (_CRS, ResourceTemplate() {
      WORDBusNumber (     // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
        ResourceProducer, // bit 0 of general flags is 1
        MinFixed,         // Range is fixed
        MaxFixed,         // Range is fixed
        PosDecode,        // PosDecode
        0x4946,           // Granularity (FIX2 - Patched by ACPI Platform Driver during POST)
        0x3258,           // Min         (FIX2 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Max         (FIX2 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Translation
        0x0001           // Range Length = Max-Min+1 (FIX2 - Patched by ACPI Platform Driver during POST)
      )
    })

    Method (_PRT, 0) {
      If (LEqual(PICM, Zero)) {
        Return (PRUN)
      }
      Return (ARUN)
    }
  }
*/
  //
  // Uncore for socket 0 (Devices 8 - 31)
  //
  Device (UNC0) {
    Name (_HID, EISAID("PNP0A03"))
    Name (_UID, 0x3F)
    Method (_BBN, 0, NotSerialized) {
      return (BBU0)
    }
    Name (_ADR, 0x00000000)
    Name (_EJD, "\\_SB.SCK0")

    Method (_STA) {
      Return(\_SB.USTA(0))
    }

    Name (_CRS, ResourceTemplate() {
      WORDBusNumber (     // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
        ResourceProducer, // bit 0 of general flags is 1
        MinFixed,         // Range is fixed
        MaxFixed,         // Range is fixed
        PosDecode,        // PosDecode
        0x4946,           // Granularity (FIX1 - Patched by ACPI Platform Driver during POST)
        0x3158,           // Min         (FIX1 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Max         (FIX1 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Translation
        0x0001           // Range Length = Max-Min+1 (FIX1 - Patched by ACPI Platform Driver during POST)
      )
    })

    Method (_PRT, 0) {
      If (LEqual(PICM, Zero)) {
        Return (PRUN)
      }
      Return (ARUN)
    }
  }
}
