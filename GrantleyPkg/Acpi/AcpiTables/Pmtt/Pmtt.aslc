/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++

  Copyright (c) 2012-2013 Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under 
  a license and may only be used or copied in accordance with the terms 
  of the license.  Except as permitted by such license, no part of this 
  software or documentation may be reproduced, stored in a retrieval 
  system, or transmitted in any form or by any means without the express 
  written consent of Intel Corporation.
 
Module Name:

  Pmtt.aslc

Abstract:

  This file contains a structure definition for the ACPI Platform Memory
  Topology Table (PMTT).

--*/

//
// Statements that include other files
//
#include <Acpi\Pmtt.h>

//
// PMTT Table
//
#define PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMPONENT_IDENTIFIER_TYPE_DIMM,          \
  EFI_ACPI_RESERVED_BYTE,                           \
  sizeof (EFI_ACPI_PHYSICAL_COMP_IDENTIFIER_STRUC), \
  (EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_TLAD | EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_PHYELEMENT | EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_VOLATILE), \
  EFI_ACPI_RESERVED_BYTE,                           \
  0x00000000,                                       \
  EFI_ACPI_RESERVED_BYTE,                           \
  0x00000000,                                       \
  0x00000000,                
                         
// AptioV Server Override: Changes done for PMTT Table - Updated to use the correct Macro for Type field of Memory Controller Structure. 
#define MEM_CONTROLLER                              \
  EFI_ACPI_TOP_LEVEL_MEMOERY_TYPE_MEM_CTRL_HUB,            \
  EFI_ACPI_RESERVED_BYTE,                           \
  sizeof (EFI_ACPI_MEM_CTRL_STRUC),                 \
  (EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_TLAD | EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_PHYELEMENT | EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_VOLATILE), \
  EFI_ACPI_RESERVED_BYTE,                           \
  MEMCTRL_CHAR,                                     \
  EFI_ACPI_RESERVED_BYTE,                           \
  0x00000000,                                       \
  PROX_DOMAIN,                                      \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          \
  PHYSICAL_COMP_IDENTIFIER                          // EFI_ACPI_PHYSICAL_COMP_IDENTIFIER_STRUC []

#define SKT_LEVEL                                   \
  EFI_ACPI_TOP_LEVEL_MEMORY_TYPE_SOCKET,            \
  EFI_ACPI_RESERVED_BYTE,                           \
  sizeof (EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC),        \
  (EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_TLAD | EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_PHYELEMENT | EFI_ACPI_TOP_LEVEL_SKT_MEM_STRUC_VOLATILE), \
  EFI_ACPI_RESERVED_BYTE,                           \
  0x00000000,                                       \
  EFI_ACPI_RESERVED_BYTE,                           \
  MEM_CONTROLLER                                    \
  MEM_CONTROLLER                                    // EFI_ACPI_MEM_CTRL_STRUC []

#pragma pack(1)

EFI_ACPI_PLATFORM_MEMORY_TOPOLOGY_TABLE mPmttTable = {
  // EFI_ACPI_PLATFORM_MEMORY_TOPOLOGY_TABLE_HEADER
  { 
    EFI_ACPI_2_0_PMTT_TABLE_SIGNATURE,
    sizeof (EFI_ACPI_PLATFORM_MEMORY_TOPOLOGY_TABLE), // Length
    EFI_ACPI_PLATFORM_MEMORY_TOPOLOGY_TABLE_REVISION, // Revision
    0x00,                                           // CheckSum
    'I', 'N', 'T', 'E', 'L', ' ',                   // OemId
    0,                                              // OemTableId
    EFI_ACPI_OEM_PMTT_REVISION,                     // OemRevision
    EFI_ACPI_CREATOR_ID,                            // CreaterId
    EFI_ACPI_CREATOR_REVISION,                      // CreaterRevision
  },
  EFI_ACPI_RESERVED_BYTE,                           // Reserved[0]
  EFI_ACPI_RESERVED_BYTE,                           // Reserved[1]
  EFI_ACPI_RESERVED_BYTE,                           // Reserved[2]
  EFI_ACPI_RESERVED_BYTE,                           // Reserved[3]
  // Socket 0
  SKT_LEVEL
  // Socket 1
  SKT_LEVEL
  // Socket 2
  SKT_LEVEL
  // Socket 3
  SKT_LEVEL
};

#pragma pack()

VOID
main (
  VOID
  )

{
}
