/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++
  
  Copyright (c)  2001 - 2013 Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under 
  a license and may only be used or copied in accordance with the terms 
  of the license.  Except as permitted by such license, no part of this 
  software or documentation may be reproduced, stored in a retrieval system, 
  or transmitted in any form or by any means without the express written 
  consent of Intel Corporation.

  Module Name:

    SysBus.asi

  Abstract:
  
    System devices
  
--*/

  Name (SUPP, 0)
  Name (CTRL, 0)
  
  //
  // Set this root port to use the correct Proximity Domain
  //
  Name(_PXM, 0)

  Method(_OSC,4) {
    //
    // Create DWord-addressable fields from the capabilities Buffer
    //
    CreateDWordField(Arg3,0,CDW1)
    CreateDWordField(Arg3,4,CDW2)
    CreateDWordField(Arg3,8,CDW3)

    //
    // Save Capabilities DWord2 & 3
    //
    Store(CDW2,SUPP)
    Store(CDW3,CTRL)

    //
    // The Intel xHCI driver will call _OSC with this UUID
    // This is to enable xHCI controller on older OSs
    //
    If (LEqual (Arg0, ToUUID("7C9512A9-1705-4CB4-AF7D-506A2423AB71"))) {
      Return (\_SB.PCI0.XHCI.POSC(Arg1, Arg2, Arg3))
    } Else {

      If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {
        //
        // Only allow native hot plug control if OS supports
        // * ASPM
        // * MSI/MSI-X
        //
        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { // Conditions not met?         
          And(CTRL, 0x1E, CTRL) // Mask bit 0 to deny.
          Sleep(1000)
        }

        //
        // Never allow SHPC (no SHPC controller in system)
        //
        And(CTRL, 0x1D, CTRL)
        //And (CTRL, 0x1C, CTRL)

        If (Not(And(CDW1,1))) { // Query Flag Clear?
          //
          // Disable GPEs for Features granted native control
          //
          If (And(CTRL, 0x01)) { // Native Hot plug control granted?

            \_SB.PCI0.BR1A.OSHP ()
            \_SB.PCI0.BR1B.OSHP ()
            \_SB.PCI0.BR2A.OSHP ()
            \_SB.PCI0.BR2B.OSHP ()
            \_SB.PCI0.BR2C.OSHP ()
            \_SB.PCI0.BR2D.OSHP ()
            \_SB.PCI0.BR3A.OSHP ()
            \_SB.PCI0.BR3B.OSHP ()
            \_SB.PCI0.BR3C.OSHP ()
            \_SB.PCI0.BR3D.OSHP ()

            Store (0x01, GPSH)                // Clear Hotplug SCI Enable in GPE0
          }
      }

          If (LNotEqual(Arg1,one)) { // unknown revision
            Or(CDW1,0x08,CDW1)
          }

          If(LNotEqual(CDW3,CTRL)) { // capabilities bits were masked
            Or(CDW1,0x10,CDW1)
          }
          //
          // update DWORD3 in the buffer
          //
          Store(CTRL,CDW3)
          Return(Arg3)

      } Else {
        //
        // Just indicate unrecognized UUID
        // Leave it at that
        //
        Or (CDW1,4,CDW1)
        Store (0xEE, IO80)
        Return(Arg3)
      }
    }
  } // End _OSC

#include "Pch.asi"
#include "PchApic.asi"

  // IIO0 presence detect routine
  Device (IIOP) {
    // Within the IIO, read D0:F0 for IIO presence detect
    Name(_ADR, 0x00000000)          // Device 00
    Name(_UID, "PCI0PRES")          // PCI0 Present

    // IIOR - Config register for Vendor ID check
      OperationRegion(IIOR, PCI_Config, 0x00, 0x02)
    Field(IIOR, ByteAcc, NoLock, Preserve){
        offset(0x00),
      VID0,16,  // Vendor ID
    }
  }

#define RESOURCE_CHUNK1_OFF     0
#define RESOURCE_CHUNK2_OFF    16   //(RESOURCE_CHUNK1_OFF + 16)
#define RESOURCE_CHUNK3_OFF    24   //(RESOURCE_CHUNK2_OFF +  8)
#define RESOURCE_CHUNK4_OFF    40   //(RESOURCE_CHUNK3_OFF + 16)
#define RESOURCE_CHUNK5_OFF    56   //(RESOURCE_CHUNK4_OFF + 16)
#define RESOURCE_CHUNK6_OFF    82   //(RESOURCE_CHUNK5_OFF + 26)
#define RESOURCE_CHUNK7_OFF   108   //(RESOURCE_CHUNK6_OFF + 26)

#define PciResourceStart       Local0
#define PciResourceLen         Local1

  Name(P0RS, ResourceTemplate() {
    //RESOURCE_CHUNK1_OFF
    WORDBusNumber(            // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
      ResourceProducer,       // bit 0 of general flags is 1
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,              // PosDecode
      0x4946,                 // Granularity (FIX5 - Patched by ACPI Platform Driver during POST)
      0x3558,                 // Min         (FIX5 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX5 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0001                 // Range Length = Max-Min+1 (FIX5 - Patched by ACPI Platform Driver during POST)
    )

    //RESOURCE_CHUNK2_OFF
    IO(                       // Consumed resource (CF8-CFF)
      Decode16,
      0x0cf8,
      0xcf8,
      1,
      8
    )

    //RESOURCE_CHUNK3_OFF
    WORDIO(                   // Consumed-and-produced resource (all I/O below CF8)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity
      0x0000,                 // Min
      0x0cf7,                 // Max
      0x0000,                 // Translation
      0x0cf8                  // Range Length
   )

    //RESOURCE_CHUNK4_OFF
    WORDIO(                   // Consumed-and-produced resource (all I/O above CFF)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x4946,                 // Granularity  (FIX6 - Patched by ACPI Platform Driver during POST)
      0x3658,                 // Min          (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max          (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0001                  // Range Length (FIX6 - Patched by ACPI Platform Driver during POST)
    )

    //RESOURCE_CHUNK5_OFF
    DWORDMEMORY(              // descriptor for video RAM on video card
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is Fixed
      Cacheable,
      ReadWrite,
      0x30485450,             // Granularity  (PTH0 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Min          (PTH0 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Max          (PTH0 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Translation
      0x00000000              // Range Length (PTH0 - Patched by ACPI Platform Driver during POST)
    )
/*  // Disabling the report of Shadow RAM as the range determined using PAMS register is invalid
    //RESOURCE_CHUNK6_OFF
    DWORDMEMORY(              // descriptor for Shadow RAM
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is Fixed
      Cacheable,
      ReadWrite,
      0x00000000,             // Granularity
      0x00000000,             // Min (calculated dynamically)
      0x00000000,             // Max (calculated dynamically)
      0x00000000,             // Translation
      0x00000000,             // Range Length (calculated dynamically)
                ,
                ,
      XXXX                    // DescriptorName populated so iASL doesn't flag 0 value fields and no tag as error
    )
*/
/*
    //RESOURCE_TPM
    DWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x00000000,             // Granularity
      0xFED40000,             // Min (calculated dynamically)
      0xFEDFFFFF,             // Max = 4GB - 1MB  (fwh + fwh alias...)
      0x00000000,             // Translation
      0x000C0000              // Range Length (calculated dynamically)
    )
*/
    //
    // PCI RESOURCE_32bit
    //
    DWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x37584946,             // Granularity (FIX7 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Min (calculated dynamically) (FIX7 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Max = 4GB - 1MB  (fwh + fwh alias) (FIX7 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Translation
      0x00000000             // Range Length (calculated dynamically) (FIX7 - Patched by ACPI Platform Driver during POST)
    )

    //
    // PCI RESOURCE_64bit
    //
    QWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x38584946,          // Granularity (FIX8 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Min (calculated dynamically) (FIX8 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Max = 4GB - 1MB  (fwh + fwh alias) (FIX8 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Translation
      0x00000000000          // Range Length (calculated dynamically) (FIX8 - Patched by ACPI Platform Driver during POST)
    )
  }) // end of P0RS Buffer

  OperationRegion(TMEM, PCI_Config, 0x00, 0x100)
  Field(TMEM, ByteAcc, NoLock, Preserve) {
// AptioV Server Override - Start: Ubuntu Linux complains video option ROM memory range overlaps 
    Offset(0x40),
    , 4,
    BSEG, 4,
    PAMS, 48,
    Offset(0x52),
    DIM0, 4,
    DIM1, 4,
    , 8,
    DIM2, 4,
#if 0
    Offset(0x90),
    , 4,
    BSEG, 4,
    PAMS, 48
#endif
// AptioV Server Override End: Ubuntu Linux complains video option ROM memory range overlaps 
  }

  Name(MTBL, Package(0x10) {
    0x0,
    0x20,
    0x20,
    0x30,
    0x40,
    0x40,
    0x60,
    0x80,
    0x80,
    0x80,
    0x80,
    0xc0,
    0x100,
    0x100,
    0x100,
    0x200
  })

  Name(ERNG, Package(0xd) {
    0xc0000,
    0xc4000,
    0xc8000,
    0xcc000,
    0xd0000,
    0xd4000,
    0xd8000,
    0xdc000,
    0xe0000,
    0xe4000,
    0xe8000,
    0xec000,
    0xf0000
  })

  Name(PAMB, Buffer(0x7) {
  })

  Method(EROM, 0x0, NotSerialized) {
    CreateDWordField(P0RS, 0x5c, RMIN)
    CreateDWordField(P0RS, 0x60, RMAX)
    CreateDWordField(P0RS, 0x68, RLEN)
    CreateByteField(PAMB, 0x6, BREG)
    Store(PAMS, PAMB)
    Store(BSEG, BREG)
    Store(0x0, RMIN)
    Store(0x0, RMAX)
    Store(0x0, RLEN)
    Store(0x0, Local0)
    While(LLess(Local0, 0xd))
    {
      ShiftRight(Local0, 0x1, Local1)
      Store(DerefOf(Index(PAMB, Local1, )), Local2)
      If(And(Local0, 0x1, ))
      {
          ShiftRight(Local2, 0x4, Local2)
      }
      And(Local2, 0x3, Local2)
      If(RMIN)
      {
        If(Local2)
        {
          Add(DerefOf(Index(ERNG, Local0, )), 0x3fff, RMAX)
          If(LEqual(RMAX, 0xf3fff))
          {
            Store(0xfffff, RMAX)
          }
          Subtract(RMAX, RMIN, RLEN)
          Increment(RLEN)
        }
        Else
        {
          Store(0xc, Local0)
        }
      }
      Else
      {
        If(Local2)
        {
          Store(DerefOf(Index(ERNG, Local0, )), RMIN)
          Add(DerefOf(Index(ERNG, Local0, )), 0x3fff, RMAX)
          If(LEqual(RMAX, 0xf3fff))
          {
            Store(0xfffff, RMAX)
          }
          Subtract(RMAX, RMIN, RLEN)
          Increment(RLEN)
        }
        Else
        {
        }
      }
      Increment(Local0)
    }
  }

  // Current resource template return
  Method(_CRS, 0x0, NotSerialized) {
    // Disabling the report of Shadow RAM as the range determined using PAMS register is invalid
    //EROM() 
    Return(P0RS)
  }

  //
  // Memory Riser UID will be in Interger form to support CPU Migration on WIN8 
  // and later OS. First two digits will indicate Memory Device(01) and last two
  // digits will represent the Memory Riser number.
  //
  Device (MHP0) {
    // Within the IIO, read D5:F1 for Memory HP status
    Name(_ADR, 0x00050001)          // D5:F1
    Name(_UID, "00-00")

    // MHP0 - Config register for Slot status
    OperationRegion(MHP0, PCI_Config, 0x00, 0x100)
    Field(MHP0,ByteAcc,NoLock,Preserve) {
      Offset(0x0E),
      STM0,7,
    }
  }

  Device (MHP1) {
    // Within the IIO, read D5:F1 for Memory HP status
    Name(_ADR, 0x00050001)          // D5:F1
    Name(_UID, "00-01")

    // MHP1 - Config register for Slot status
    OperationRegion(MHP1, PCI_Config, 0x00, 0x100)
    Field(MHP1,ByteAcc,NoLock,Preserve) {
      Offset(0x1E),
      STM1,7,
    }
  }
