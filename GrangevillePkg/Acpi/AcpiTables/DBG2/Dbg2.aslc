/**@file

@copyright
 Copyright (c) 1999 - 2014 Intel Corporation. All rights reserved
 This software and associated documentation (if any) is furnished
 under a license and may only be used or copied in accordance
 with the terms of the license. Except as permitted by the
 license, no part of this software or documentation may be
 reproduced, stored in a retrieval system, or transmitted in any
 form or by any means without the express written consent of
 Intel Corporation.

This file contains an 'Intel Peripheral Driver' and is uniquely
 identified as "Intel Reference Module" and is licensed for Intel
 CPUs and chipsets under the terms of your license agreement with
 Intel or your vendor. This file may be modified by the user, subject
 to additional terms of the license agreement.
**/
/*++
  This file contains an 'Intel Peripheral Driver' and is
  licensed for Intel CPUs and chipsets under the terms of your
  license agreement with Intel or your vendor.  This file may
  be modified by the user, subject to additional terms of the
  license agreement
--*/
/*++

Copyright (c)  1999 - 2010 Intel Corporation. All rights reserved
This software and associated documentation (if any) is furnished
under a license and may only be used or copied in accordance
with the terms of the license. Except as permitted by such
license, no part of this software or documentation may be
reproduced, stored in a retrieval system, or transmitted in any
form or by any means without the express written consent of
Intel Corporation.


--*/


#include <IndustryStandard/Acpi50.h>


#define EFI_ACPI_CREATOR_REVISION 0x0100000D

//
// DBG2 Definitions
//
#define EFI_ACPI_OEM_DBG2_TABLE_REVISION 0x00000000
#define NUMBER_DBG_DEVICE_INFO 1
#define DEBUG_DEVICE_INFORMATION_REVISION 0x00
#define NAMESPACE_STRING_MAX_LENGTH 32
#define EFI_ACPI_OEM_TABLE_ID_2 SIGNATURE_64('I','N','T','L','D','B','G','2') //Oem table Id for Dbg2
//
// Ensure proper structure formats
//
#pragma pack (1)
typedef struct _DEBUG_DEVICE_INFORMATION {
  UINT8  Revision;
  UINT16 Length;
  UINT8  NumberOfGenericAddressRegisters;
  UINT16 NameSpaceStringLength;
  UINT16 NameSpaceStringOffset;
  UINT16 OemDataLength;
  UINT16 OemDataOffset;
  UINT16 PortType;
  UINT16 PortSubtype;
  UINT16 Reserved;
  UINT16 BaseAddressRegisterOffset;
  UINT16 AddressSizeOffset;
  EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE BaseAddressRegister[1];
  UINT32 AddressSize[1];
  CHAR8  NamespaceString[NAMESPACE_STRING_MAX_LENGTH];
} DEBUG_DEVICE_INFORMATION;

//
// DBG2 structure
//
typedef struct {
  EFI_ACPI_DESCRIPTION_HEADER            Header;
  UINT32                                 OffsetDbgDeviceInfo;
  UINT32                                 NumberDbgDeviceInfo;
  DEBUG_DEVICE_INFORMATION               DbgDeviceInfoCom1;
} EFI_ACPI_DEBUG_PORT_2_TABLE;

#pragma pack ()

//
// Debug Port Table
//
EFI_ACPI_DEBUG_PORT_2_TABLE Dbg2 = {
  {
    EFI_ACPI_5_0_DEBUG_PORT_2_TABLE_SIGNATURE,
    sizeof(EFI_ACPI_DEBUG_PORT_2_TABLE),
    EFI_ACPI_OEM_DBG2_TABLE_REVISION,
    0,                          // to make sum of entire table == 0
    0,            // OEMID is a 6 bytes long field
    0,    // OEM table identification(8 bytes long)
    1,      // OEM revision
    0,        // ASL compiler vendor ID
    0   // ASL compiler revision number
  },
  OFFSET_OF (EFI_ACPI_DEBUG_PORT_2_TABLE, DbgDeviceInfoCom1),
  NUMBER_DBG_DEVICE_INFO,
  //
  // COM1
  //
  {
    DEBUG_DEVICE_INFORMATION_REVISION,
    sizeof(DEBUG_DEVICE_INFORMATION),
    1,            // NumberOfGenericAddressRegisters
    NAMESPACE_STRING_MAX_LENGTH,
    OFFSET_OF (DEBUG_DEVICE_INFORMATION, NamespaceString),
    0,            // OemDataLength
    0,            // OemDataOffset
    0x8000,      // PortType - Serial
    0x0000,       // PortSubtype - 16550 compatible
    0,            // Reserved
    OFFSET_OF (DEBUG_DEVICE_INFORMATION, BaseAddressRegister),
    OFFSET_OF (DEBUG_DEVICE_INFORMATION, AddressSize),
    {
      0x01,        // Address_Space_ID = 0 System Memory,  1 System IO
      0x08,        // Register_Bit_Width = 8 bits
      0x00,        // Register_Bit_offset
      0x00,        // access size
      0x3F8     // Base addresse of COM1
    },
    {
      8
    },
    "_SB\\PCI0\\LPC\\UAR1"
  }

};

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from
  // removing the data structure from the executable
  //
  return (VOID*)&Dbg2;
}
